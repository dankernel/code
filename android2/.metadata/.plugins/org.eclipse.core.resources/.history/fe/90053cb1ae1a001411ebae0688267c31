package com.example.hal;

import java.lang.reflect.Method;

import android.app.Activity;
import android.app.admin.DevicePolicyManager;
import android.bluetooth.BluetoothAdapter;
import android.content.ComponentName;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import android.net.wifi.WifiManager;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.widget.Toast;

import com.example.hal.MainActivity.DeviceAdminClass;

public class control_tower extends Activity {

	boolean camera 		= false;
	boolean microphone 	= false;
	boolean sdcard 		= false;
	boolean gps 		= false;
	boolean mobile 		= false;
	boolean wifi 		= false;
	boolean bluetooth 	= false;

	public boolean get_status(Context context, String name) {

		if (name=="camera") {

		}

		if (name=="microphone") {

		}

		if (name=="sdcard") {

		}

		if (name=="gps") {

		}

		if (name=="mobile") {
			return ismobile(context);
		}

		if (name=="wifi") {
			return iswifi(context);
		}

		if (name=="bluetooth") {
			return isbluetooth(context);
		}

		return false;
	}

	/* for nomal case */
	public int control(Context context, String name, boolean bool) {

		toast_print(context, name + " / " + bool);

		if (name=="camera") {

			//make class..//
			ComponentName adminComponent = new ComponentName(context, DeviceAdminClass.class);
			DevicePolicyManager devicePolicyManager = (DevicePolicyManager)context.getSystemService(Context.DEVICE_POLICY_SERVICE);

			if (0 <= toggleCamera(context, bool, adminComponent, devicePolicyManager)) {
				camera = bool;
				toast_print(context, "ch camera");
			} else
				toast_print(context, "Camera toggle fail..!");
		}

		if (name=="microphone") {
			if (0 <= toggleMicrophone(context, bool))
				microphone = bool;
			else
				toast_print(context, "microphone toggle fail..!");
		}

		if (name=="sdcard") {
			if (0 <= toggleSdcard(context, bool))
				sdcard = bool;
			else
				toast_print(context, "sdcard toggle fail..!");
		}

		if (name=="gps") {
			if (0 <= toggleGps(context, bool))
				gps = bool;
			else
				toast_print(context, "gps toggle fail..!");
		}

		if (name=="mobile") {
			try {
				if (0 <= toggleMobile(context, bool))
					mobile = bool;
				else
					toast_print(context, "mobile toggle fail..!");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		if (name=="wifi") {
			if (0 <= toggleWiFi(context, bool))
				wifi = bool;
			else
				toast_print(context, "wifi toggle fail..!");
		}

		if (name=="bluetooth") {
			if (0 <= togglebluetooth(context, bool))
				bluetooth = bool;
			else
				toast_print(context, "bluetooth toggle fail..!");
		}

		return 0;
	}

	public boolean get_status(){

		return false;
	}

	public int update_status(){

		camera 		= false;
		microphone 	= false;
		sdcard 		= false;
		gps 		= false;
		mobile 		= false;
		wifi 		= false;
		bluetooth 	= false;

		return 0;
	}

	/* Camera */
	private int toggleCamera(Context context, boolean status, ComponentName adminComponent, DevicePolicyManager devicePolicyManager) {

		try {
			devicePolicyManager.setCameraDisabled(adminComponent, status);
			return 0;
		} catch (Exception e) {
			Log.e("log :", e.toString());
			return -1;
		}
	}

	/* Microphone */
	private int toggleMicrophone(Context context, boolean status) {

		try {
			return 0;
		} catch (Exception e) {
			return -1;
		}
	}

	/* Sdcard */
	private int toggleSdcard(Context context, boolean status) {

		try {
			return 0;
		} catch (Exception e) {
			return -1;
		}
	}

	/* Gps */
	private int toggleGps(Context context, boolean status) {

		try {
			return 0;
		} catch (Exception e) {
			return -1;
		}
	}

	/* Mobile */
	private int toggleMobile(Context context, boolean on) {
		try {
			ConnectivityManager connectivityManager = (ConnectivityManager)context.getSystemService("connectivity");

			Method method = connectivityManager.getClass().getMethod("setMobileDataEnabled", boolean.class);
			method.invoke(connectivityManager, on);
			return 0;
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
			return -1;
		} catch (Exception e) {
			e.printStackTrace();
			return -2;
		}
	} 

	/* WIFI */
	private int toggleWiFi(Context context, boolean status) {
		try {
			WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
			if (status == true && !wifiManager.isWifiEnabled()) {
				wifiManager.setWifiEnabled(true);
			} else if (status == false && wifiManager.isWifiEnabled()) {
				wifiManager.setWifiEnabled(false);
			}
			return 0;
		} catch (Exception e) {
			return -1;
		}
	}

	/* bluetooth */
	private int togglebluetooth(Context context, boolean status) {
		try {
			BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter(); 
			if (status == true){
				adapter.enable();
			} else {
				adapter.disable();
			}
			return 0;
		} catch (Exception e) {
			return -1;
		}
	}

	/* toast */
	private void toast_print(Context context, String get_text){
		Toast t = null;
		if(t == null) {
			t = Toast.makeText(context, get_text, Toast.LENGTH_SHORT);
		}
		t.show();
	}

	private boolean ismobile(Context context) { // network 연결 상태 확인
		try {
			//TelephonyManager tm =  (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE); 
			//if (tm.getDataState() == TelephonyManager

			return true;
		} catch (NullPointerException e) {
			return false;
		}
	}

	private boolean iswifi(Context context) { // network 연결 상태 확인
		try {
			ConnectivityManager conMan = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);

			// wifi
			State wifi = conMan.getNetworkInfo(1).getState(); 

			if (!(wifi == NetworkInfo.State.DISCONNECTED || wifi == NetworkInfo.State.DISCONNECTING)) {
				return true;
			} else
				return false;

		} catch (NullPointerException e) {
			return false;
		}
	}

	@SuppressWarnings("unused")
	private boolean isbluetooth(Context context) { // network 연결 상태 확인
		try {
			BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter(); 
			if (adapter.isEnabled())
				return true;
			else
				return false;

		} catch (Exception e) {
			return false;
		}
	}

	private boolean isgps(Context context) { // network 연결 상태 확인
		try {
			BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter(); 
			if (adapter.isEnabled())
				return true;
			else
				return false;

		} catch (Exception e) {
			return false;
		}

	}

	//GPS 설정 체크
	private boolean chkGpsService() {

		String gps = android.provider.Settings.Secure.getString(getContentResolver(), android.provider.Settings.Secure.LOCATION_PROVIDERS_ALLOWED);

		Log.d(gps, "aaaa");  

		if (!(gps.matches(".*gps.*") && gps.matches(".*network.*"))) {

			// GPS OFF 일때 Dialog 표시 
			AlertDialog.Builder gsDialog = new AlertDialog.Builder(this); 
			gsDialog.setTitle("위치 서비스 설정");   
			gsDialog.setMessage("무선 네트워크 사용, GPS 위성 사용을 모두 체크하셔야 정확한 위치 서비스가 가능합니다.\n위치 서비스 기능을 설정하시겠습니까?"); 
			gsDialog.setPositiveButton("OK", new DialogInterface.OnClickListener() { 
				public void onClick(DialogInterface dialog, int which) { 
					// GPS설정 화면으로 이동 
					Intent intent = new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS); 
					intent.addCategory(Intent.CATEGORY_DEFAULT); 
					startActivity(intent); 
				} 
			})
			.setNegativeButton("NO", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int which) {
					return;
				}
			}).create().show();
			return false;

		} else { 
			return true; 
		} 
	}



}

