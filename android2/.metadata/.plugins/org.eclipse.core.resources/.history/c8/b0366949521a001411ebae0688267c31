package com.example.hal;

import android.app.Service;
import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.IntentFilter.MalformedMimeTypeException;
import android.location.LocationManager;
import android.media.MediaPlayer;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiManager;
import android.os.Handler;
import android.os.IBinder;
import android.util.Log;
import android.widget.Toast;
import android.content.BroadcastReceiver;
import android.database.Cursor;

public class LocalService extends Service {
    private MediaPlayer service_player;

    @Override
    public IBinder onBind(Intent arg0) {
        return null;
    }    
    
    private BroadcastReceiver surveillant_general = new BroadcastReceiver() {

		@Override
        public void onReceive(Context context, Intent intent) {
		    Log.e("Broadcast Handler", "[onReceive] URI - " + intent.getData());
		    
			// Detect WIFI - http://is.gd/ofsqSC
			if (intent.getAction().matches("android.net.wifi.supplicant.CONNECTION_CHANGE")) { 
				boolean connected = intent.getBooleanExtra(WifiManager.EXTRA_SUPPLICANT_CONNECTED, false);
		          
				if (!connected) {
					Toast.makeText(context, "WIFI Disconnect", Toast.LENGTH_SHORT).show();
		        }
		    } else if (intent.getAction().matches("android.net.wifi.STATE_CHANGE")) {
		    	NetworkInfo netInfo = intent.getParcelableExtra(WifiManager.EXTRA_NETWORK_INFO);
		        
		    	if(netInfo.isConnected()) {
		    		Toast.makeText(context, "WIFI Connect", Toast.LENGTH_SHORT).show();
		        }
		    }
		        
			// Detect Mobile - http://is.gd/AjseIh
            if (intent.getAction().matches("android.net.conn.CONNECTIVITY_CHANGE")) {
            	ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
                NetworkInfo mobNetInfo = connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
                
                if (mobNetInfo.isConnected()) {
        		         	Toast.makeText(context,"Mobile Network On", Toast.LENGTH_SHORT).show();    	
                } else {
                	Toast.makeText(context,"Mobile Network Off" , Toast.LENGTH_SHORT).show();                	
                }
            }
            
			// Detect GPS - http://is.gd/6WZ1Sp
            if (intent.getAction().matches("android.location.PROVIDERS_CHANGED")) {
            	LocationManager manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE );
            	boolean statusOfGPS = manager.isProviderEnabled(LocationManager.GPS_PROVIDER);
            	
                if (statusOfGPS) {
                	Toast.makeText(context, "GPS ON", Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(context, "GPS OFF", Toast.LENGTH_SHORT).show();
                }
            }
            
            // Detect BlueTooth - http://is.gd/K5ERZu
		    if (intent.getAction().matches("android.bluetooth.adapter.action.STATE_CHANGED")) {
		    	int state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE,BluetoothAdapter.ERROR);
		    	
		    	if (state == BluetoothAdapter.STATE_OFF){
			    	Toast.makeText(context, "BlueTooth OFF", Toast.LENGTH_SHORT).show();
		    	}else if (state == BluetoothAdapter.STATE_ON){
			    	Toast.makeText(context, "BlueTooth ON", Toast.LENGTH_SHORT).show();
	            }
		        // android.bluetooth.adapter.STATE_TURNING_OFF
		        // android.bluetooth.adapter.STATE_TURNING_ON
		    }
		    
		    // camera ? - http://is.gd/4ZUGzK
		    if (intent.getAction().matches("android.hardware.action.NEW_PICTURE")) {
		    	Toast.makeText(context, "Camera", Toast.LENGTH_SHORT).show();	    	
		    }
        }
    };
    
    private BroadcastReceiver surveillant_sdcard = new BroadcastReceiver() {

		@Override
        public void onReceive(Context context, Intent intent) {
		    // Detect SDCard (Mount/Umount) - http://is.gd/wkmAik
		    if (intent.getAction().matches("android.intent.action.MEDIA_MOUNTED")){
		    	Toast.makeText(context, "SdCard Mount", Toast.LENGTH_SHORT).show();				    	  
		    } else if (intent.getAction().matches("android.intent.action.MEDIA_UNMOUNTED")){
		    	Toast.makeText(context, "SdCard UnMount", Toast.LENGTH_SHORT).show();		    	
		    }
	        // android.intent.action.MEDIA_REMOVED
		}
    };
    
    @Override
    public void onCreate() {
        super.onCreate();
    
        // register general event
        final IntentFilter broadcast_event_general = new IntentFilter();
        
        // WIFI
        broadcast_event_general.addAction("android.net.wifi.STATE_CHANGE");
        broadcast_event_general.addAction("android.net.wifi.supplicant.CONNECTION_CHANGE");
        
        // Mobile
        broadcast_event_general.addAction("android.net.conn.CONNECTIVITY_CHANGE");
    
        // GPS
        broadcast_event_general.addAction("android.location.PROVIDERS_CHANGED");
        
        // BlueTooth
        broadcast_event_general.addAction("android.bluetooth.adapter.action.STATE_CHANGED");
        
        registerReceiver(surveillant_general, broadcast_event_general);
        
        // SDCard detect's broadcast handler is must be devide general (boradcast)handler.
        // Why? i don't know...
        final IntentFilter broadcast_event_sdcard = new IntentFilter();
        
        // SD Card
        broadcast_event_sdcard.addAction("android.intent.action.MEDIA_MOUNTED");
        broadcast_event_sdcard.addAction("android.intent.action.MEDIA_UNMOUNTED");
        broadcast_event_sdcard.addDataScheme("file");
        
        registerReceiver(surveillant_sdcard, broadcast_event_sdcard);
        
        service_player = MediaPlayer.create(this, R.raw.bradinsky);
    } 
    
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        super.onStartCommand(intent, flags, startId); 
        
        if (service_player != null && !service_player.isPlaying()) {
            service_player.start();
        }
        
        return START_NOT_STICKY;
    }
    
    @Override
    public void onDestroy() {    
        super.onDestroy();
        
        unregisterReceiver(surveillant_general);
        unregisterReceiver(surveillant_sdcard);
        
        if (service_player != null) {
            if (service_player.isPlaying()) {
            	service_player.stop();
            }
            
            service_player.release();
        }
    }   
}
