list print :      (nil) ( 0x1e1d040       INIT)  0x1e1d060 
list print :  0x1e1d040 ( 0x1e1d060         if)  0x1e1d080 
list print :  0x1e1d060 ( 0x1e1d080        for)  0x1e1d0a0 
list print :  0x1e1d080 ( 0x1e1d0a0      while)      (nil) 
[ OK ] open : 3 ok... 
str : /*
loop INIT
loop if
loop for
loop while
str :  *  kernel/sched/core.c
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *  Kernel scheduler and related syscalls
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *  Copyright (C) 1991-2002  Linus Torvalds
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *  1996-12-23  Modified by Dave Grothe to fix bugs in semaphores and
loop INIT
loop if
loop for
loop while
str :  *		make semaphores SMP safe
loop INIT
loop if
loop for
loop while
str :  *  1998-11-19	Implemented schedule_timeout() and related stuff
loop INIT
loop if
loop for
loop while
str :  *		by Andrea Arcangeli
loop INIT
loop if
loop for
loop while
str :  *  2002-01-04	New ultra-scalable O(1) scheduler by Ingo Molnar:
loop INIT
loop if
loop for
loop while
str :  *		hybrid priority-list and round-robin design with
loop INIT
loop if
loop for
loop while
str :  *		an array-switch method of distributing timeslices
loop INIT
loop if
loop for
loop while
str :  *		and per-CPU runqueues.  Cleanups and useful suggestions
loop INIT
loop if
loop for
loop while
str :  *		by Davide Libenzi, preemptible kernel bits by Robert Love.
loop INIT
loop if
loop for
loop while
str :  *  2003-09-03	Interactivity tuning by Con Kolivas.
loop INIT
loop if
loop for
loop while
str :  *  2004-04-02	Scheduler domains code by Nick Piggin
loop INIT
loop if
loop for
loop while
str :  *  2007-04-15  Work begun on replacing all interactivity tuning with a
loop INIT
loop if
loop for
loop while
str :  *              fair scheduling design by Con Kolivas.
loop INIT
loop if
loop for
loop while
str :  *  2007-05-05  Load balancing (smp-nice) and other improvements
loop INIT
loop if
loop for
loop while
str :  *              by Peter Williams
loop INIT
loop if
loop for
loop while
str :  *  2007-05-06  Interactivity improvements to CFS by Mike Galbraith
loop INIT
loop if
loop for
loop while
str :  *  2007-07-01  Group scheduling enhancements by Srivatsa Vaddagiri
loop INIT
loop if
loop for
loop while
str :  *  2007-11-29  RT balancing improvements by Steven Rostedt, Gregory Haskins,
loop INIT
loop if
loop for
loop while
str :  *              Thomas Gleixner, Mike Kravetz
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #include <linux/mm.h>
loop if
loop for
loop while
str : #include <linux/module.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/nmi.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/init.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/uaccess.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/highmem.h>
loop INIT
loop if
loop for
loop while
str : #include <asm/mmu_context.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/interrupt.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/capability.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/completion.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/kernel_stat.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/debug_locks.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/perf_event.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/security.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/notifier.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/profile.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/freezer.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/vmalloc.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/blkdev.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/delay.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/pid_namespace.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/smp.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/threads.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/timer.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/rcupdate.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/cpu.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/cpuset.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/percpu.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/proc_fs.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/seq_file.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/sysctl.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/syscalls.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/times.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/tsacct_kern.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/kprobes.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/delayacct.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/unistd.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/pagemap.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/hrtimer.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/tick.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/debugfs.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/ctype.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/ftrace.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/slab.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/init_task.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/binfmts.h>
loop INIT
loop if
loop for
loop while
str : #include <linux/context_tracking.h>
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #include <asm/switch_to.h>
loop if
loop for
loop while
str : #include <asm/tlb.h>
loop INIT
loop if
loop for
loop while
str : #include <asm/irq_regs.h>
loop INIT
loop if
loop for
loop while
str : #include <asm/mutex.h>
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_PARAVIRT
loop INIT
loop if
loop for
loop while
str : #include <asm/paravirt.h>
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #include "sched.h"
loop if
loop for
loop while
str : #include "../workqueue_internal.h"
loop INIT
loop if
loop for
loop while
str : #include "../smpboot.h"
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #define CREATE_TRACE_POINTS
loop if
loop for
loop while
str : #include <trace/events/sched.h>
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void start_bandwidth_timer(struct hrtimer *period_timer, ktime_t period)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long delta;
loop INIT
loop if
loop for
loop while
str : 	ktime_t soft, hard, now;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for (;;) {
loop if
loop for
loop while
str : 		if (hrtimer_active(period_timer))
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		now = hrtimer_cb_get_time(period_timer);
loop if
loop for
loop while
str : 		hrtimer_forward(period_timer, now, period);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		soft = hrtimer_get_softexpires(period_timer);
loop if
loop for
loop while
str : 		hard = hrtimer_get_expires(period_timer);
loop INIT
loop if
loop for
loop while
str : 		delta = ktime_to_ns(ktime_sub(hard, soft));
loop INIT
loop if
loop for
loop while
str : 		__hrtimer_start_range_ns(period_timer, soft, delta,
loop INIT
loop if
loop for
loop while
str : 					 HRTIMER_MODE_ABS_PINNED, 0);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : DEFINE_MUTEX(sched_domains_mutex);
loop if
loop for
loop while
str : DEFINE_PER_CPU_SHARED_ALIGNED(struct rq, runqueues);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void update_rq_clock_task(struct rq *rq, s64 delta);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void update_rq_clock(struct rq *rq)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	s64 delta;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (rq->skip_clock_update > 0)
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	delta = sched_clock_cpu(cpu_of(rq)) - rq->clock;
loop if
loop for
loop while
str : 	rq->clock += delta;
loop INIT
loop if
loop for
loop while
str : 	update_rq_clock_task(rq, delta);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Debugging: various feature bits
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #define SCHED_FEAT(name, enabled)	\
loop if
loop for
loop while
str : 	(1UL << __SCHED_FEAT_##name) * enabled |
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : const_debug unsigned int sysctl_sched_features =
loop if
loop for
loop while
str : #include "features.h"
loop INIT
loop if
loop for
loop while
str : 	0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #undef SCHED_FEAT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SCHED_DEBUG
loop if
loop for
loop while
str : #define SCHED_FEAT(name, enabled)	\
loop INIT
loop if
loop for
loop while
str : 	#name ,
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static const char * const sched_feat_names[] = {
loop if
loop for
loop while
str : #include "features.h"
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #undef SCHED_FEAT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_feat_show(struct seq_file *m, void *v)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for (i = 0; i < __SCHED_FEAT_NR; i++) {
loop if
loop for
loop while
str : 		if (!(sysctl_sched_features & (1UL << i)))
loop INIT
loop if
loop for
loop while
str : 			seq_puts(m, "NO_");
loop INIT
loop if
loop for
loop while
str : 		seq_printf(m, "%s ", sched_feat_names[i]);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	seq_puts(m, "\n");
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef HAVE_JUMP_LABEL
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #define jump_label_key__true  STATIC_KEY_INIT_TRUE
loop if
loop for
loop while
str : #define jump_label_key__false STATIC_KEY_INIT_FALSE
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #define SCHED_FEAT(name, enabled)	\
loop if
loop for
loop while
str : 	jump_label_key__##enabled ,
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : struct static_key sched_feat_keys[__SCHED_FEAT_NR] = {
loop if
loop for
loop while
str : #include "features.h"
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #undef SCHED_FEAT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void sched_feat_disable(int i)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (static_key_enabled(&sched_feat_keys[i]))
loop INIT
loop if
loop for
loop while
str : 		static_key_slow_dec(&sched_feat_keys[i]);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void sched_feat_enable(int i)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (!static_key_enabled(&sched_feat_keys[i]))
loop INIT
loop if
loop for
loop while
str : 		static_key_slow_inc(&sched_feat_keys[i]);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #else
loop INIT
loop if
loop for
loop while
str : static void sched_feat_disable(int i) { };
loop INIT
loop if
loop for
loop while
str : static void sched_feat_enable(int i) { };
loop INIT
loop if
loop for
loop while
str : #endif /* HAVE_JUMP_LABEL */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_feat_set(char *cmp)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i;
loop INIT
loop if
loop for
loop while
str : 	int neg = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (strncmp(cmp, "NO_", 3) == 0) {
loop if
loop for
loop while
str : 		neg = 1;
loop INIT
loop if
loop for
loop while
str : 		cmp += 3;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for (i = 0; i < __SCHED_FEAT_NR; i++) {
loop if
loop for
loop while
str : 		if (strcmp(cmp, sched_feat_names[i]) == 0) {
loop INIT
loop if
loop for
loop while
str : 			if (neg) {
loop INIT
loop if
loop for
loop while
str : 				sysctl_sched_features &= ~(1UL << i);
loop INIT
loop if
loop for
loop while
str : 				sched_feat_disable(i);
loop INIT
loop if
loop for
loop while
str : 			} else {
loop INIT
loop if
loop for
loop while
str : 				sysctl_sched_features |= (1UL << i);
loop INIT
loop if
loop for
loop while
str : 				sched_feat_enable(i);
loop INIT
loop if
loop for
loop while
str : 			}
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return i;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static ssize_t
loop if
loop for
loop while
str : sched_feat_write(struct file *filp, const char __user *ubuf,
loop INIT
loop if
loop for
loop while
str : 		size_t cnt, loff_t *ppos)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	char buf[64];
loop INIT
loop if
loop for
loop while
str : 	char *cmp;
loop INIT
loop if
loop for
loop while
str : 	int i;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (cnt > 63)
loop if
loop for
loop while
str : 		cnt = 63;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (copy_from_user(&buf, ubuf, cnt))
loop if
loop for
loop while
str : 		return -EFAULT;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	buf[cnt] = 0;
loop if
loop for
loop while
str : 	cmp = strstrip(buf);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	i = sched_feat_set(cmp);
loop if
loop for
loop while
str : 	if (i == __SCHED_FEAT_NR)
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	*ppos += cnt;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return cnt;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_feat_open(struct inode *inode, struct file *filp)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return single_open(filp, sched_feat_show, NULL);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static const struct file_operations sched_feat_fops = {
loop if
loop for
loop while
str : 	.open		= sched_feat_open,
loop INIT
loop if
loop for
loop while
str : 	.write		= sched_feat_write,
loop INIT
loop if
loop for
loop while
str : 	.read		= seq_read,
loop INIT
loop if
loop for
loop while
str : 	.llseek		= seq_lseek,
loop INIT
loop if
loop for
loop while
str : 	.release	= single_release,
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static __init int sched_init_debug(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	debugfs_create_file("sched_features", 0644, NULL, NULL,
loop INIT
loop if
loop for
loop while
str : 			&sched_feat_fops);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : late_initcall(sched_init_debug);
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_SCHED_DEBUG */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Number of tasks to iterate in a single balance run.
loop INIT
loop if
loop for
loop while
str :  * Limited because this is done with IRQs disabled.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : const_debug unsigned int sysctl_sched_nr_migrate = 32;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * period over which we average the RT time consumption, measured
loop INIT
loop if
loop for
loop while
str :  * in ms.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * default: 1s
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : const_debug unsigned int sysctl_sched_time_avg = MSEC_PER_SEC;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * period over which we measure -rt task cpu usage in us.
loop INIT
loop if
loop for
loop while
str :  * default: 1s
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : unsigned int sysctl_sched_rt_period = 1000000;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : __read_mostly int scheduler_running;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * part of the period that we allow rt tasks to run in us.
loop INIT
loop if
loop for
loop while
str :  * default: 0.95s
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int sysctl_sched_rt_runtime = 950000;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * __task_rq_lock - lock the rq @p resides on.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static inline struct rq *__task_rq_lock(struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : 	__acquires(rq->lock)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	lockdep_assert_held(&p->pi_lock);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for (;;) {
loop if
loop for
loop while
str : 		rq = task_rq(p);
loop INIT
loop if
loop for
loop while
str : 		raw_spin_lock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 		if (likely(rq == task_rq(p)))
loop INIT
loop if
loop for
loop while
str : 			return rq;
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * task_rq_lock - lock p->pi_lock and lock the rq @p resides on.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static struct rq *task_rq_lock(struct task_struct *p, unsigned long *flags)
loop INIT
loop if
loop for
loop while
str : 	__acquires(p->pi_lock)
loop INIT
loop if
loop for
loop while
str : 	__acquires(rq->lock)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for (;;) {
loop if
loop for
loop while
str : 		raw_spin_lock_irqsave(&p->pi_lock, *flags);
loop INIT
loop if
loop for
loop while
str : 		rq = task_rq(p);
loop INIT
loop if
loop for
loop while
str : 		raw_spin_lock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 		if (likely(rq == task_rq(p)))
loop INIT
loop if
loop for
loop while
str : 			return rq;
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock_irqrestore(&p->pi_lock, *flags);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void __task_rq_unlock(struct rq *rq)
loop if
loop for
loop while
str : 	__releases(rq->lock)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline void
loop if
loop for
loop while
str : task_rq_unlock(struct rq *rq, struct task_struct *p, unsigned long *flags)
loop INIT
loop if
loop for
loop while
str : 	__releases(rq->lock)
loop INIT
loop if
loop for
loop while
str : 	__releases(p->pi_lock)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock_irqrestore(&p->pi_lock, *flags);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * this_rq_lock - lock this runqueue and disable interrupts.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static struct rq *this_rq_lock(void)
loop INIT
loop if
loop for
loop while
str : 	__acquires(rq->lock)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	local_irq_disable();
loop if
loop for
loop while
str : 	rq = this_rq();
loop INIT
loop if
loop for
loop while
str : 	raw_spin_lock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return rq;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SCHED_HRTICK
loop if
loop for
loop while
str : /*
loop INIT
loop if
loop for
loop while
str :  * Use HR-timers to deliver accurate preemption points.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void hrtick_clear(struct rq *rq)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (hrtimer_active(&rq->hrtick_timer))
loop INIT
loop if
loop for
loop while
str : 		hrtimer_cancel(&rq->hrtick_timer);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * High-resolution timer tick.
loop INIT
loop if
loop for
loop while
str :  * Runs from hardirq context with interrupts disabled.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static enum hrtimer_restart hrtick(struct hrtimer *timer)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = container_of(timer, struct rq, hrtick_timer);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	WARN_ON_ONCE(cpu_of(rq) != smp_processor_id());
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock(&rq->lock);
loop if
loop for
loop while
str : 	update_rq_clock(rq);
loop INIT
loop if
loop for
loop while
str : 	rq->curr->sched_class->task_tick(rq, rq->curr, 1);
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return HRTIMER_NORESTART;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int __hrtick_restart(struct rq *rq)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct hrtimer *timer = &rq->hrtick_timer;
loop INIT
loop if
loop for
loop while
str : 	ktime_t time = hrtimer_get_softexpires(timer);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return __hrtimer_start_range_ns(timer, time, 0, HRTIMER_MODE_ABS_PINNED, 0);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * called from hardirq (IPI) context
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void __hrtick_start(void *arg)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = arg;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock(&rq->lock);
loop if
loop for
loop while
str : 	__hrtick_restart(rq);
loop INIT
loop if
loop for
loop while
str : 	rq->hrtick_csd_pending = 0;
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Called to set the hrtick timer state.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * called with rq->lock held and irqs disabled
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void hrtick_start(struct rq *rq, u64 delay)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct hrtimer *timer = &rq->hrtick_timer;
loop INIT
loop if
loop for
loop while
str : 	ktime_t time = ktime_add_ns(timer->base->get_time(), delay);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	hrtimer_set_expires(timer, time);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (rq == this_rq()) {
loop if
loop for
loop while
str : 		__hrtick_restart(rq);
loop INIT
loop if
loop for
loop while
str : 	} else if (!rq->hrtick_csd_pending) {
loop INIT
loop if
loop for
loop while
str : 		__smp_call_function_single(cpu_of(rq), &rq->hrtick_csd, 0);
loop INIT
loop if
loop for
loop while
str : 		rq->hrtick_csd_pending = 1;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int
loop if
loop for
loop while
str : hotplug_hrtick(struct notifier_block *nfb, unsigned long action, void *hcpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int cpu = (int)(long)hcpu;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	switch (action) {
loop if
loop for
loop while
str : 	case CPU_UP_CANCELED:
loop INIT
loop if
loop for
loop while
str : 	case CPU_UP_CANCELED_FROZEN:
loop INIT
loop if
loop for
loop while
str : 	case CPU_DOWN_PREPARE:
loop INIT
loop if
loop for
loop while
str : 	case CPU_DOWN_PREPARE_FROZEN:
loop INIT
loop if
loop for
loop while
str : 	case CPU_DEAD:
loop INIT
loop if
loop for
loop while
str : 	case CPU_DEAD_FROZEN:
loop INIT
loop if
loop for
loop while
str : 		hrtick_clear(cpu_rq(cpu));
loop INIT
loop if
loop for
loop while
str : 		return NOTIFY_OK;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return NOTIFY_DONE;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static __init void init_hrtick(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	hotcpu_notifier(hotplug_hrtick, 0);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #else
loop INIT
loop if
loop for
loop while
str : /*
loop INIT
loop if
loop for
loop while
str :  * Called to set the hrtick timer state.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * called with rq->lock held and irqs disabled
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void hrtick_start(struct rq *rq, u64 delay)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	__hrtimer_start_range_ns(&rq->hrtick_timer, ns_to_ktime(delay), 0,
loop INIT
loop if
loop for
loop while
str : 			HRTIMER_MODE_REL_PINNED, 0);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline void init_hrtick(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_SMP */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void init_rq_hrtick(struct rq *rq)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SMP
loop INIT
loop if
loop for
loop while
str : 	rq->hrtick_csd_pending = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq->hrtick_csd.flags = 0;
loop if
loop for
loop while
str : 	rq->hrtick_csd.func = __hrtick_start;
loop INIT
loop if
loop for
loop while
str : 	rq->hrtick_csd.info = rq;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	hrtimer_init(&rq->hrtick_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
loop if
loop for
loop while
str : 	rq->hrtick_timer.function = hrtick;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #else	/* CONFIG_SCHED_HRTICK */
loop INIT
loop if
loop for
loop while
str : static inline void hrtick_clear(struct rq *rq)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline void init_rq_hrtick(struct rq *rq)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline void init_hrtick(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif	/* CONFIG_SCHED_HRTICK */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * resched_task - mark a task 'to be rescheduled now'.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * On UP this means the setting of the need_resched flag, on SMP it
loop INIT
loop if
loop for
loop while
str :  * might also involve a cross-CPU call to trigger the scheduler on
loop INIT
loop if
loop for
loop while
str :  * the target CPU.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void resched_task(struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int cpu;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	lockdep_assert_held(&task_rq(p)->lock);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (test_tsk_need_resched(p))
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	set_tsk_need_resched(p);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cpu = task_cpu(p);
loop if
loop for
loop while
str : 	if (cpu == smp_processor_id()) {
loop INIT
loop if
loop for
loop while
str : 		set_preempt_need_resched();
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* NEED_RESCHED must be visible before we test polling */
loop if
loop for
loop while
str : 	smp_mb();
loop INIT
loop if
loop for
loop while
str : 	if (!tsk_is_polling(p))
loop INIT
loop if
loop for
loop while
str : 		smp_send_reschedule(cpu);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void resched_cpu(int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = cpu_rq(cpu);
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!raw_spin_trylock_irqsave(&rq->lock, flags))
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 	resched_task(cpu_curr(cpu));
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock_irqrestore(&rq->lock, flags);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : #ifdef CONFIG_NO_HZ_COMMON
loop INIT
loop if
loop for
loop while
str : /*
loop INIT
loop if
loop for
loop while
str :  * In the semi idle case, use the nearest busy cpu for migrating timers
loop INIT
loop if
loop for
loop while
str :  * from an idle cpu.  This is good for power-savings.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * We don't do similar optimization for completely idle system, as
loop INIT
loop if
loop for
loop while
str :  * selecting an idle cpu will add more delays to the timers than intended
loop INIT
loop if
loop for
loop while
str :  * (as that cpu's timer base may not be uptodate wrt jiffies etc).
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int get_nohz_timer_target(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int cpu = smp_processor_id();
loop INIT
loop if
loop for
loop while
str : 	int i;
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *sd;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_lock();
loop if
loop for
loop while
str : 	for_each_domain(cpu, sd) {
loop INIT
loop if
loop for
loop while
str : 		for_each_cpu(i, sched_domain_span(sd)) {
loop INIT
loop if
loop for
loop while
str : 			if (!idle_cpu(i)) {
loop INIT
loop if
loop for
loop while
str : 				cpu = i;
loop INIT
loop if
loop for
loop while
str : 				goto unlock;
loop INIT
loop if
loop for
loop while
str : 			}
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : unlock:
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 	return cpu;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : /*
loop INIT
loop if
loop for
loop while
str :  * When add_timer_on() enqueues a timer into the timer wheel of an
loop INIT
loop if
loop for
loop while
str :  * idle CPU then this timer might expire before the next timer event
loop INIT
loop if
loop for
loop while
str :  * which is scheduled to wake up that CPU. In case of a completely
loop INIT
loop if
loop for
loop while
str :  * idle system the next event might even be infinite time into the
loop INIT
loop if
loop for
loop while
str :  * future. wake_up_idle_cpu() ensures that the CPU is woken up and
loop INIT
loop if
loop for
loop while
str :  * leaves the inner idle loop so the newly added timer is taken into
loop INIT
loop if
loop for
loop while
str :  * account when the CPU goes back to idle and evaluates the timer
loop INIT
loop if
loop for
loop while
str :  * wheel for the next timer event.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void wake_up_idle_cpu(int cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = cpu_rq(cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (cpu == smp_processor_id())
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * This is safe, as this function is called with the timer
loop INIT
loop if
loop for
loop while
str : 	 * wheel base lock of (cpu) held. When the CPU is on the way
loop INIT
loop if
loop for
loop while
str : 	 * to idle and has not yet set rq->curr to idle then it will
loop INIT
loop if
loop for
loop while
str : 	 * be serialized on the timer wheel base lock and take the new
loop INIT
loop if
loop for
loop while
str : 	 * timer into account automatically.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (rq->curr != rq->idle)
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * We can set TIF_RESCHED on the idle task of the other CPU
loop INIT
loop if
loop for
loop while
str : 	 * lockless. The worst case is that the other CPU runs the
loop INIT
loop if
loop for
loop while
str : 	 * idle task through an additional NOOP schedule()
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	set_tsk_need_resched(rq->idle);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* NEED_RESCHED must be visible before we test polling */
loop if
loop for
loop while
str : 	smp_mb();
loop INIT
loop if
loop for
loop while
str : 	if (!tsk_is_polling(rq->idle))
loop INIT
loop if
loop for
loop while
str : 		smp_send_reschedule(cpu);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static bool wake_up_full_nohz_cpu(int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (tick_nohz_full_cpu(cpu)) {
loop INIT
loop if
loop for
loop while
str : 		if (cpu != smp_processor_id() ||
loop INIT
loop if
loop for
loop while
str : 		    tick_nohz_tick_stopped())
loop INIT
loop if
loop for
loop while
str : 			smp_send_reschedule(cpu);
loop INIT
loop if
loop for
loop while
str : 		return true;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return false;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void wake_up_nohz_cpu(int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (!wake_up_full_nohz_cpu(cpu))
loop INIT
loop if
loop for
loop while
str : 		wake_up_idle_cpu(cpu);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline bool got_nohz_idle_kick(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int cpu = smp_processor_id();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!test_bit(NOHZ_BALANCE_KICK, nohz_flags(cpu)))
loop if
loop for
loop while
str : 		return false;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (idle_cpu(cpu) && !need_resched())
loop if
loop for
loop while
str : 		return true;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * We can't run Idle Load Balance on this CPU for this time so we
loop INIT
loop if
loop for
loop while
str : 	 * cancel it and clear NOHZ_BALANCE_KICK
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	clear_bit(NOHZ_BALANCE_KICK, nohz_flags(cpu));
loop INIT
loop if
loop for
loop while
str : 	return false;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #else /* CONFIG_NO_HZ_COMMON */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline bool got_nohz_idle_kick(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return false;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif /* CONFIG_NO_HZ_COMMON */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_NO_HZ_FULL
loop if
loop for
loop while
str : bool sched_can_stop_tick(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str :        struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str :        rq = this_rq();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str :        /* Make sure rq->nr_running update is visible after the IPI */
loop if
loop for
loop while
str :        smp_rmb();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str :        /* More than one running task need preemption */
loop if
loop for
loop while
str :        if (rq->nr_running > 1)
loop INIT
loop if
loop for
loop while
str :                return false;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str :        return true;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_NO_HZ_FULL */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void sched_avg_update(struct rq *rq)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	s64 period = sched_avg_period();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	while ((s64)(rq_clock(rq) - rq->age_stamp) > period) {
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * Inline assembly required to prevent the compiler
loop INIT
loop if
loop for
loop while
str : 		 * optimising this loop into a divmod call.
loop INIT
loop if
loop for
loop while
str : 		 * See __iter_div_u64_rem() for another example of this.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		asm("" : "+rm" (rq->age_stamp));
loop INIT
loop if
loop for
loop while
str : 		rq->age_stamp += period;
loop INIT
loop if
loop for
loop while
str : 		rq->rt_avg /= 2;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif /* CONFIG_SMP */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #if defined(CONFIG_RT_GROUP_SCHED) || (defined(CONFIG_FAIR_GROUP_SCHED) && \
loop if
loop for
loop while
str : 			(defined(CONFIG_SMP) || defined(CONFIG_CFS_BANDWIDTH)))
loop INIT
loop if
loop for
loop while
str : /*
loop INIT
loop if
loop for
loop while
str :  * Iterate task_group tree rooted at *from, calling @down when first entering a
loop INIT
loop if
loop for
loop while
str :  * node and @up when leaving it for the final time.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Caller must hold rcu_lock or sufficient equivalent.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int walk_tg_tree_from(struct task_group *from,
loop INIT
loop if
loop for
loop while
str : 			     tg_visitor down, tg_visitor up, void *data)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_group *parent, *child;
loop INIT
loop if
loop for
loop while
str : 	int ret;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	parent = from;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : down:
loop if
loop for
loop while
str : 	ret = (*down)(parent, data);
loop INIT
loop if
loop for
loop while
str : 	if (ret)
loop INIT
loop if
loop for
loop while
str : 		goto out;
loop INIT
loop if
loop for
loop while
str : 	list_for_each_entry_rcu(child, &parent->children, siblings) {
loop INIT
loop if
loop for
loop while
str : 		parent = child;
loop INIT
loop if
loop for
loop while
str : 		goto down;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : up:
loop if
loop for
loop while
str : 		continue;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	ret = (*up)(parent, data);
loop INIT
loop if
loop for
loop while
str : 	if (ret || parent == from)
loop INIT
loop if
loop for
loop while
str : 		goto out;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	child = parent;
loop if
loop for
loop while
str : 	parent = parent->parent;
loop INIT
loop if
loop for
loop while
str : 	if (parent)
loop INIT
loop if
loop for
loop while
str : 		goto up;
loop INIT
loop if
loop for
loop while
str : out:
loop INIT
loop if
loop for
loop while
str : 	return ret;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : int tg_nop(struct task_group *tg, void *data)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return 0;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void set_load_weight(struct task_struct *p)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int prio = p->static_prio - MAX_RT_PRIO;
loop INIT
loop if
loop for
loop while
str : 	struct load_weight *load = &p->se.load;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * SCHED_IDLE tasks get minimal weight:
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (p->policy == SCHED_IDLE) {
loop INIT
loop if
loop for
loop while
str : 		load->weight = scale_load(WEIGHT_IDLEPRIO);
loop INIT
loop if
loop for
loop while
str : 		load->inv_weight = WMULT_IDLEPRIO;
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	load->weight = scale_load(prio_to_weight[prio]);
loop if
loop for
loop while
str : 	load->inv_weight = prio_to_wmult[prio];
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void enqueue_task(struct rq *rq, struct task_struct *p, int flags)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	update_rq_clock(rq);
loop INIT
loop if
loop for
loop while
str : 	sched_info_queued(rq, p);
loop INIT
loop if
loop for
loop while
str : 	p->sched_class->enqueue_task(rq, p, flags);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void dequeue_task(struct rq *rq, struct task_struct *p, int flags)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	update_rq_clock(rq);
loop INIT
loop if
loop for
loop while
str : 	sched_info_dequeued(rq, p);
loop INIT
loop if
loop for
loop while
str : 	p->sched_class->dequeue_task(rq, p, flags);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void activate_task(struct rq *rq, struct task_struct *p, int flags)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (task_contributes_to_load(p))
loop INIT
loop if
loop for
loop while
str : 		rq->nr_uninterruptible--;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	enqueue_task(rq, p, flags);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void deactivate_task(struct rq *rq, struct task_struct *p, int flags)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (task_contributes_to_load(p))
loop INIT
loop if
loop for
loop while
str : 		rq->nr_uninterruptible++;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	dequeue_task(rq, p, flags);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void update_rq_clock_task(struct rq *rq, s64 delta)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : /*
loop INIT
loop if
loop for
loop while
str :  * In theory, the compile should just see 0 here, and optimize out the call
loop INIT
loop if
loop for
loop while
str :  * to sched_rt_avg_update. But I don't trust it...
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : #if defined(CONFIG_IRQ_TIME_ACCOUNTING) || defined(CONFIG_PARAVIRT_TIME_ACCOUNTING)
loop INIT
loop if
loop for
loop while
str : 	s64 steal = 0, irq_delta = 0;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_IRQ_TIME_ACCOUNTING
loop INIT
loop if
loop for
loop while
str : 	irq_delta = irq_time_read(cpu_of(rq)) - rq->prev_irq_time;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Since irq_time is only updated on {soft,}irq_exit, we might run into
loop INIT
loop if
loop for
loop while
str : 	 * this case when a previous update_rq_clock() happened inside a
loop INIT
loop if
loop for
loop while
str : 	 * {soft,}irq region.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * When this happens, we stop ->clock_task and only update the
loop INIT
loop if
loop for
loop while
str : 	 * prev_irq_time stamp to account for the part that fit, so that a next
loop INIT
loop if
loop for
loop while
str : 	 * update will consume the rest. This ensures ->clock_task is
loop INIT
loop if
loop for
loop while
str : 	 * monotonic.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * It does however cause some slight miss-attribution of {soft,}irq
loop INIT
loop if
loop for
loop while
str : 	 * time, a more accurate solution would be to update the irq_time using
loop INIT
loop if
loop for
loop while
str : 	 * the current rq->clock timestamp, except that would require using
loop INIT
loop if
loop for
loop while
str : 	 * atomic ops.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (irq_delta > delta)
loop INIT
loop if
loop for
loop while
str : 		irq_delta = delta;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq->prev_irq_time += irq_delta;
loop if
loop for
loop while
str : 	delta -= irq_delta;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_PARAVIRT_TIME_ACCOUNTING
loop INIT
loop if
loop for
loop while
str : 	if (static_key_false((&paravirt_steal_rq_enabled))) {
loop INIT
loop if
loop for
loop while
str : 		u64 st;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		steal = paravirt_steal_clock(cpu_of(rq));
loop if
loop for
loop while
str : 		steal -= rq->prev_steal_time_rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (unlikely(steal > delta))
loop if
loop for
loop while
str : 			steal = delta;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		st = steal_ticks(steal);
loop if
loop for
loop while
str : 		steal = st * TICK_NSEC;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		rq->prev_steal_time_rq += steal;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		delta -= steal;
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq->clock_task += delta;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #if defined(CONFIG_IRQ_TIME_ACCOUNTING) || defined(CONFIG_PARAVIRT_TIME_ACCOUNTING)
loop if
loop for
loop while
str : 	if ((irq_delta + steal) && sched_feat(NONTASK_POWER))
loop INIT
loop if
loop for
loop while
str : 		sched_rt_avg_update(rq, irq_delta + steal);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void sched_set_stop_task(int cpu, struct task_struct *stop)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_param param = { .sched_priority = MAX_RT_PRIO - 1 };
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *old_stop = cpu_rq(cpu)->stop;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (stop) {
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * Make it appear like a SCHED_FIFO task, its something
loop INIT
loop if
loop for
loop while
str : 		 * userspace knows about and won't get confused about.
loop INIT
loop if
loop for
loop while
str : 		 *
loop INIT
loop if
loop for
loop while
str : 		 * Also, it will make PI more or less work without too
loop INIT
loop if
loop for
loop while
str : 		 * much confusion -- but then, stop work should not
loop INIT
loop if
loop for
loop while
str : 		 * rely on PI working anyway.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		sched_setscheduler_nocheck(stop, SCHED_FIFO, &param);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		stop->sched_class = &stop_sched_class;
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cpu_rq(cpu)->stop = stop;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (old_stop) {
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * Reset it back to a normal scheduling class so that
loop INIT
loop if
loop for
loop while
str : 		 * it can die in pieces.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		old_stop->sched_class = &rt_sched_class;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * __normal_prio - return the priority that is based on the static prio
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static inline int __normal_prio(struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return p->static_prio;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Calculate the expected normal priority: i.e. priority
loop INIT
loop if
loop for
loop while
str :  * without taking RT-inheritance into account. Might be
loop INIT
loop if
loop for
loop while
str :  * boosted by interactivity modifiers. Changes upon fork,
loop INIT
loop if
loop for
loop while
str :  * setprio syscalls, and whenever the interactivity
loop INIT
loop if
loop for
loop while
str :  * estimator recalculates.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static inline int normal_prio(struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int prio;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (task_has_dl_policy(p))
loop if
loop for
loop while
str : 		prio = MAX_DL_PRIO-1;
loop INIT
loop if
loop for
loop while
str : 	else if (task_has_rt_policy(p))
loop INIT
loop if
loop for
loop while
str : 		prio = MAX_RT_PRIO-1 - p->rt_priority;
loop INIT
loop if
loop for
loop while
str : 	else
loop INIT
loop if
loop for
loop while
str : 		prio = __normal_prio(p);
loop INIT
loop if
loop for
loop while
str : 	return prio;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Calculate the current priority, i.e. the priority
loop INIT
loop if
loop for
loop while
str :  * taken into account by the scheduler. This value might
loop INIT
loop if
loop for
loop while
str :  * be boosted by RT tasks, or might be boosted by
loop INIT
loop if
loop for
loop while
str :  * interactivity modifiers. Will be RT if the task got
loop INIT
loop if
loop for
loop while
str :  * RT-boosted. If not then it returns p->normal_prio.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int effective_prio(struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	p->normal_prio = normal_prio(p);
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * If we are RT tasks or we were boosted to RT priority,
loop INIT
loop if
loop for
loop while
str : 	 * keep the priority unchanged. Otherwise, update priority
loop INIT
loop if
loop for
loop while
str : 	 * to the normal priority:
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (!rt_prio(p->prio))
loop INIT
loop if
loop for
loop while
str : 		return p->normal_prio;
loop INIT
loop if
loop for
loop while
str : 	return p->prio;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * task_curr - is this task currently executing on a CPU?
loop INIT
loop if
loop for
loop while
str :  * @p: the task in question.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: 1 if the task is currently executing. 0 otherwise.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : inline int task_curr(const struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return cpu_curr(task_cpu(p)) == p;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline void check_class_changed(struct rq *rq, struct task_struct *p,
loop if
loop for
loop while
str : 				       const struct sched_class *prev_class,
loop INIT
loop if
loop for
loop while
str : 				       int oldprio)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (prev_class != p->sched_class) {
loop INIT
loop if
loop for
loop while
str : 		if (prev_class->switched_from)
loop INIT
loop if
loop for
loop while
str : 			prev_class->switched_from(rq, p);
loop INIT
loop if
loop for
loop while
str : 		p->sched_class->switched_to(rq, p);
loop INIT
loop if
loop for
loop while
str : 	} else if (oldprio != p->prio || dl_task(p))
loop INIT
loop if
loop for
loop while
str : 		p->sched_class->prio_changed(rq, p, oldprio);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void check_preempt_curr(struct rq *rq, struct task_struct *p, int flags)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	const struct sched_class *class;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (p->sched_class == rq->curr->sched_class) {
loop if
loop for
loop while
str : 		rq->curr->sched_class->check_preempt_curr(rq, p, flags);
loop INIT
loop if
loop for
loop while
str : 	} else {
loop INIT
loop if
loop for
loop while
str : 		for_each_class(class) {
loop INIT
loop if
loop for
loop while
str : 			if (class == rq->curr->sched_class)
loop INIT
loop if
loop for
loop while
str : 				break;
loop INIT
loop if
loop for
loop while
str : 			if (class == p->sched_class) {
loop INIT
loop if
loop for
loop while
str : 				resched_task(rq->curr);
loop INIT
loop if
loop for
loop while
str : 				break;
loop INIT
loop if
loop for
loop while
str : 			}
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * A queue event has occurred, and we're going to schedule.  In
loop INIT
loop if
loop for
loop while
str : 	 * this case, we can save a useless back to back clock update.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (rq->curr->on_rq && test_tsk_need_resched(rq->curr))
loop INIT
loop if
loop for
loop while
str : 		rq->skip_clock_update = 1;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : void set_task_cpu(struct task_struct *p, unsigned int new_cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SCHED_DEBUG
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * We should never call set_task_cpu() on a blocked task,
loop INIT
loop if
loop for
loop while
str : 	 * ttwu() will sort out the placement.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	WARN_ON_ONCE(p->state != TASK_RUNNING && p->state != TASK_WAKING &&
loop INIT
loop if
loop for
loop while
str : 			!(task_preempt_count(p) & PREEMPT_ACTIVE));
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_LOCKDEP
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * The caller should hold either p->pi_lock or rq->lock, when changing
loop INIT
loop if
loop for
loop while
str : 	 * a task's CPU. ->pi_lock for waking tasks, rq->lock for runnable tasks.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * sched_move_task() holds both and thus holding either pins the cgroup,
loop INIT
loop if
loop for
loop while
str : 	 * see task_group().
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * Furthermore, all task_rq users should acquire both locks, see
loop INIT
loop if
loop for
loop while
str : 	 * task_rq_lock().
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	WARN_ON_ONCE(debug_locks && !(lockdep_is_held(&p->pi_lock) ||
loop INIT
loop if
loop for
loop while
str : 				      lockdep_is_held(&task_rq(p)->lock)));
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	trace_sched_migrate_task(p, new_cpu);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (task_cpu(p) != new_cpu) {
loop if
loop for
loop while
str : 		if (p->sched_class->migrate_task_rq)
loop INIT
loop if
loop for
loop while
str : 			p->sched_class->migrate_task_rq(p, new_cpu);
loop INIT
loop if
loop for
loop while
str : 		p->se.nr_migrations++;
loop INIT
loop if
loop for
loop while
str : 		perf_sw_event(PERF_COUNT_SW_CPU_MIGRATIONS, 1, NULL, 0);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	__set_task_cpu(p, new_cpu);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void __migrate_swap_task(struct task_struct *p, int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (p->on_rq) {
loop INIT
loop if
loop for
loop while
str : 		struct rq *src_rq, *dst_rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		src_rq = task_rq(p);
loop if
loop for
loop while
str : 		dst_rq = cpu_rq(cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		deactivate_task(src_rq, p, 0);
loop if
loop for
loop while
str : 		set_task_cpu(p, cpu);
loop INIT
loop if
loop for
loop while
str : 		activate_task(dst_rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 		check_preempt_curr(dst_rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 	} else {
loop INIT
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * Task isn't running anymore; make it appear like we migrated
loop INIT
loop if
loop for
loop while
str : 		 * it before it went to sleep. This means on wakeup we make the
loop INIT
loop if
loop for
loop while
str : 		 * previous cpu our targer instead of where it really is.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		p->wake_cpu = cpu;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : struct migration_swap_arg {
loop if
loop for
loop while
str : 	struct task_struct *src_task, *dst_task;
loop INIT
loop if
loop for
loop while
str : 	int src_cpu, dst_cpu;
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int migrate_swap_stop(void *data)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct migration_swap_arg *arg = data;
loop INIT
loop if
loop for
loop while
str : 	struct rq *src_rq, *dst_rq;
loop INIT
loop if
loop for
loop while
str : 	int ret = -EAGAIN;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	src_rq = cpu_rq(arg->src_cpu);
loop if
loop for
loop while
str : 	dst_rq = cpu_rq(arg->dst_cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	double_raw_lock(&arg->src_task->pi_lock,
loop if
loop for
loop while
str : 			&arg->dst_task->pi_lock);
loop INIT
loop if
loop for
loop while
str : 	double_rq_lock(src_rq, dst_rq);
loop INIT
loop if
loop for
loop while
str : 	if (task_cpu(arg->dst_task) != arg->dst_cpu)
loop INIT
loop if
loop for
loop while
str : 		goto unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (task_cpu(arg->src_task) != arg->src_cpu)
loop if
loop for
loop while
str : 		goto unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!cpumask_test_cpu(arg->dst_cpu, tsk_cpus_allowed(arg->src_task)))
loop if
loop for
loop while
str : 		goto unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!cpumask_test_cpu(arg->src_cpu, tsk_cpus_allowed(arg->dst_task)))
loop if
loop for
loop while
str : 		goto unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	__migrate_swap_task(arg->src_task, arg->dst_cpu);
loop if
loop for
loop while
str : 	__migrate_swap_task(arg->dst_task, arg->src_cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	ret = 0;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : unlock:
loop if
loop for
loop while
str : 	double_rq_unlock(src_rq, dst_rq);
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock(&arg->dst_task->pi_lock);
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock(&arg->src_task->pi_lock);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ret;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Cross migrate two tasks
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int migrate_swap(struct task_struct *cur, struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct migration_swap_arg arg;
loop INIT
loop if
loop for
loop while
str : 	int ret = -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	arg = (struct migration_swap_arg){
loop if
loop for
loop while
str : 		.src_task = cur,
loop INIT
loop if
loop for
loop while
str : 		.src_cpu = task_cpu(cur),
loop INIT
loop if
loop for
loop while
str : 		.dst_task = p,
loop INIT
loop if
loop for
loop while
str : 		.dst_cpu = task_cpu(p),
loop INIT
loop if
loop for
loop while
str : 	};
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (arg.src_cpu == arg.dst_cpu)
loop if
loop for
loop while
str : 		goto out;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * These three tests are all lockless; this is OK since all of them
loop INIT
loop if
loop for
loop while
str : 	 * will be re-checked with proper locks held further down the line.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (!cpu_active(arg.src_cpu) || !cpu_active(arg.dst_cpu))
loop INIT
loop if
loop for
loop while
str : 		goto out;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!cpumask_test_cpu(arg.dst_cpu, tsk_cpus_allowed(arg.src_task)))
loop if
loop for
loop while
str : 		goto out;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!cpumask_test_cpu(arg.src_cpu, tsk_cpus_allowed(arg.dst_task)))
loop if
loop for
loop while
str : 		goto out;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	trace_sched_swap_numa(cur, arg.src_cpu, p, arg.dst_cpu);
loop if
loop for
loop while
str : 	ret = stop_two_cpus(arg.dst_cpu, arg.src_cpu, migrate_swap_stop, &arg);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : out:
loop if
loop for
loop while
str : 	return ret;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : struct migration_arg {
loop if
loop for
loop while
str : 	struct task_struct *task;
loop INIT
loop if
loop for
loop while
str : 	int dest_cpu;
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int migration_cpu_stop(void *data);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * wait_task_inactive - wait for a thread to unschedule.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * If @match_state is nonzero, it's the @p->state value just checked and
loop INIT
loop if
loop for
loop while
str :  * not expected to change.  If it changes, i.e. @p might have woken up,
loop INIT
loop if
loop for
loop while
str :  * then return zero.  When we succeed in waiting for @p to be off its CPU,
loop INIT
loop if
loop for
loop while
str :  * we return a positive number (its total switch count).  If a second call
loop INIT
loop if
loop for
loop while
str :  * a short while later returns the same number, the caller can be sure that
loop INIT
loop if
loop for
loop while
str :  * @p has remained unscheduled the whole time.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * The caller must ensure that the task *will* unschedule sometime soon,
loop INIT
loop if
loop for
loop while
str :  * else this function might spin for a *long* time. This function can't
loop INIT
loop if
loop for
loop while
str :  * be called with interrupts off, or it may introduce deadlock with
loop INIT
loop if
loop for
loop while
str :  * smp_call_function() if an IPI is sent by the same process we are
loop INIT
loop if
loop for
loop while
str :  * waiting to become inactive.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : unsigned long wait_task_inactive(struct task_struct *p, long match_state)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	int running, on_rq;
loop INIT
loop if
loop for
loop while
str : 	unsigned long ncsw;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for (;;) {
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * We do the initial early heuristics without holding
loop INIT
loop if
loop for
loop while
str : 		 * any task-queue locks at all. We'll only try to get
loop INIT
loop if
loop for
loop while
str : 		 * the runqueue lock when things look like they will
loop INIT
loop if
loop for
loop while
str : 		 * work out!
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		rq = task_rq(p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * If the task is actively running on another CPU
loop INIT
loop if
loop for
loop while
str : 		 * still, just relax and busy-wait without holding
loop INIT
loop if
loop for
loop while
str : 		 * any locks.
loop INIT
loop if
loop for
loop while
str : 		 *
loop INIT
loop if
loop for
loop while
str : 		 * NOTE! Since we don't hold any locks, it's not
loop INIT
loop if
loop for
loop while
str : 		 * even sure that "rq" stays as the right runqueue!
loop INIT
loop if
loop for
loop while
str : 		 * But we don't care, since "task_running()" will
loop INIT
loop if
loop for
loop while
str : 		 * return false if the runqueue has changed and p
loop INIT
loop if
loop for
loop while
str : 		 * is actually now running somewhere else!
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		while (task_running(rq, p)) {
loop INIT
loop if
loop for
loop while
str : 			if (match_state && unlikely(p->state != match_state))
loop INIT
loop if
loop for
loop while
str : 				return 0;
loop INIT
loop if
loop for
loop while
str : 			cpu_relax();
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * Ok, time to look more closely! We need the rq
loop INIT
loop if
loop for
loop while
str : 		 * lock now, to be *sure*. If we're wrong, we'll
loop INIT
loop if
loop for
loop while
str : 		 * just go back and repeat.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		rq = task_rq_lock(p, &flags);
loop INIT
loop if
loop for
loop while
str : 		trace_sched_wait_task(p);
loop INIT
loop if
loop for
loop while
str : 		running = task_running(rq, p);
loop INIT
loop if
loop for
loop while
str : 		on_rq = p->on_rq;
loop INIT
loop if
loop for
loop while
str : 		ncsw = 0;
loop INIT
loop if
loop for
loop while
str : 		if (!match_state || p->state == match_state)
loop INIT
loop if
loop for
loop while
str : 			ncsw = p->nvcsw | LONG_MIN; /* sets MSB */
loop INIT
loop if
loop for
loop while
str : 		task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * If it changed from the expected state, bail out now.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (unlikely(!ncsw))
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * Was it really running after all now that we
loop INIT
loop if
loop for
loop while
str : 		 * checked with the proper locks actually held?
loop INIT
loop if
loop for
loop while
str : 		 *
loop INIT
loop if
loop for
loop while
str : 		 * Oops. Go back and try again..
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (unlikely(running)) {
loop INIT
loop if
loop for
loop while
str : 			cpu_relax();
loop INIT
loop if
loop for
loop while
str : 			continue;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * It's not enough that it's not actively running,
loop INIT
loop if
loop for
loop while
str : 		 * it must be off the runqueue _entirely_, and not
loop INIT
loop if
loop for
loop while
str : 		 * preempted!
loop INIT
loop if
loop for
loop while
str : 		 *
loop INIT
loop if
loop for
loop while
str : 		 * So if it was still runnable (but just not actively
loop INIT
loop if
loop for
loop while
str : 		 * running right now), it's preempted, and we should
loop INIT
loop if
loop for
loop while
str : 		 * yield - it could be a while.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (unlikely(on_rq)) {
loop INIT
loop if
loop for
loop while
str : 			ktime_t to = ktime_set(0, NSEC_PER_SEC/HZ);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			set_current_state(TASK_UNINTERRUPTIBLE);
loop if
loop for
loop while
str : 			schedule_hrtimeout(&to, HRTIMER_MODE_REL);
loop INIT
loop if
loop for
loop while
str : 			continue;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * Ahh, all good. It wasn't running, and it wasn't
loop INIT
loop if
loop for
loop while
str : 		 * runnable, which means that it will never become
loop INIT
loop if
loop for
loop while
str : 		 * running in the future either. We're all done!
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ncsw;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /***
loop if
loop for
loop while
str :  * kick_process - kick a running thread to enter/exit the kernel
loop INIT
loop if
loop for
loop while
str :  * @p: the to-be-kicked thread
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Cause a process which is running on another CPU to enter
loop INIT
loop if
loop for
loop while
str :  * kernel-mode, without any delay. (to get signals handled.)
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * NOTE: this function doesn't have to take the runqueue lock,
loop INIT
loop if
loop for
loop while
str :  * because all it wants to ensure is that the remote task enters
loop INIT
loop if
loop for
loop while
str :  * the kernel. If the IPI races and the task has been migrated
loop INIT
loop if
loop for
loop while
str :  * to another CPU then no harm is done and the purpose has been
loop INIT
loop if
loop for
loop while
str :  * achieved as well.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void kick_process(struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int cpu;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	preempt_disable();
loop if
loop for
loop while
str : 	cpu = task_cpu(p);
loop INIT
loop if
loop for
loop while
str : 	if ((cpu != smp_processor_id()) && task_curr(p))
loop INIT
loop if
loop for
loop while
str : 		smp_send_reschedule(cpu);
loop INIT
loop if
loop for
loop while
str : 	preempt_enable();
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL_GPL(kick_process);
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_SMP */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : /*
loop INIT
loop if
loop for
loop while
str :  * ->cpus_allowed is protected by both rq->lock and p->pi_lock
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int select_fallback_rq(int cpu, struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int nid = cpu_to_node(cpu);
loop INIT
loop if
loop for
loop while
str : 	const struct cpumask *nodemask = NULL;
loop INIT
loop if
loop for
loop while
str : 	enum { cpuset, possible, fail } state = cpuset;
loop INIT
loop if
loop for
loop while
str : 	int dest_cpu;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * If the node that the cpu is on has been offlined, cpu_to_node()
loop INIT
loop if
loop for
loop while
str : 	 * will return -1. There is no cpu on the node, and we should
loop INIT
loop if
loop for
loop while
str : 	 * select the cpu on the other node.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (nid != -1) {
loop INIT
loop if
loop for
loop while
str : 		nodemask = cpumask_of_node(nid);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/* Look for allowed, online CPU in same node. */
loop if
loop for
loop while
str : 		for_each_cpu(dest_cpu, nodemask) {
loop INIT
loop if
loop for
loop while
str : 			if (!cpu_online(dest_cpu))
loop INIT
loop if
loop for
loop while
str : 				continue;
loop INIT
loop if
loop for
loop while
str : 			if (!cpu_active(dest_cpu))
loop INIT
loop if
loop for
loop while
str : 				continue;
loop INIT
loop if
loop for
loop while
str : 			if (cpumask_test_cpu(dest_cpu, tsk_cpus_allowed(p)))
loop INIT
loop if
loop for
loop while
str : 				return dest_cpu;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for (;;) {
loop if
loop for
loop while
str : 		/* Any allowed, online CPU? */
loop INIT
loop if
loop for
loop while
str : 		for_each_cpu(dest_cpu, tsk_cpus_allowed(p)) {
loop INIT
loop if
loop for
loop while
str : 			if (!cpu_online(dest_cpu))
loop INIT
loop if
loop for
loop while
str : 				continue;
loop INIT
loop if
loop for
loop while
str : 			if (!cpu_active(dest_cpu))
loop INIT
loop if
loop for
loop while
str : 				continue;
loop INIT
loop if
loop for
loop while
str : 			goto out;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		switch (state) {
loop if
loop for
loop while
str : 		case cpuset:
loop INIT
loop if
loop for
loop while
str : 			/* No more Mr. Nice Guy. */
loop INIT
loop if
loop for
loop while
str : 			cpuset_cpus_allowed_fallback(p);
loop INIT
loop if
loop for
loop while
str : 			state = possible;
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		case possible:
loop if
loop for
loop while
str : 			do_set_cpus_allowed(p, cpu_possible_mask);
loop INIT
loop if
loop for
loop while
str : 			state = fail;
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		case fail:
loop if
loop for
loop while
str : 			BUG();
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : out:
loop if
loop for
loop while
str : 	if (state != cpuset) {
loop INIT
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * Don't tell them about moving exiting tasks or
loop INIT
loop if
loop for
loop while
str : 		 * kernel threads (both mm NULL), since they never
loop INIT
loop if
loop for
loop while
str : 		 * leave kernel.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (p->mm && printk_ratelimit()) {
loop INIT
loop if
loop for
loop while
str : 			printk_sched("process %d (%s) no longer affine to cpu%d\n",
loop INIT
loop if
loop for
loop while
str : 					task_pid_nr(p), p->comm, cpu);
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return dest_cpu;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * The caller (fork, wakeup) owns p->pi_lock, ->cpus_allowed is stable.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static inline
loop INIT
loop if
loop for
loop while
str : int select_task_rq(struct task_struct *p, int cpu, int sd_flags, int wake_flags)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	cpu = p->sched_class->select_task_rq(p, cpu, sd_flags, wake_flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * In order not to call set_task_cpu() on a blocking task we need
loop INIT
loop if
loop for
loop while
str : 	 * to rely on ttwu() to place the task on a valid ->cpus_allowed
loop INIT
loop if
loop for
loop while
str : 	 * cpu.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * Since this is common to all placement strategies, this lives here.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * [ this allows ->select_task() to simply return task_cpu(p) and
loop INIT
loop if
loop for
loop while
str : 	 *   not worry about this generic constraint ]
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (unlikely(!cpumask_test_cpu(cpu, tsk_cpus_allowed(p)) ||
loop INIT
loop if
loop for
loop while
str : 		     !cpu_online(cpu)))
loop INIT
loop if
loop for
loop while
str : 		cpu = select_fallback_rq(task_cpu(p), p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return cpu;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void update_avg(u64 *avg, u64 sample)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	s64 diff = sample - *avg;
loop INIT
loop if
loop for
loop while
str : 	*avg += diff >> 3;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void
loop if
loop for
loop while
str : ttwu_stat(struct task_struct *p, int cpu, int wake_flags)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SCHEDSTATS
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = this_rq();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : 	int this_cpu = smp_processor_id();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (cpu == this_cpu) {
loop if
loop for
loop while
str : 		schedstat_inc(rq, ttwu_local);
loop INIT
loop if
loop for
loop while
str : 		schedstat_inc(p, se.statistics.nr_wakeups_local);
loop INIT
loop if
loop for
loop while
str : 	} else {
loop INIT
loop if
loop for
loop while
str : 		struct sched_domain *sd;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		schedstat_inc(p, se.statistics.nr_wakeups_remote);
loop if
loop for
loop while
str : 		rcu_read_lock();
loop INIT
loop if
loop for
loop while
str : 		for_each_domain(this_cpu, sd) {
loop INIT
loop if
loop for
loop while
str : 			if (cpumask_test_cpu(cpu, sched_domain_span(sd))) {
loop INIT
loop if
loop for
loop while
str : 				schedstat_inc(sd, ttwu_wake_remote);
loop INIT
loop if
loop for
loop while
str : 				break;
loop INIT
loop if
loop for
loop while
str : 			}
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 		rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (wake_flags & WF_MIGRATED)
loop if
loop for
loop while
str : 		schedstat_inc(p, se.statistics.nr_wakeups_migrate);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif /* CONFIG_SMP */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	schedstat_inc(rq, ttwu_count);
loop if
loop for
loop while
str : 	schedstat_inc(p, se.statistics.nr_wakeups);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (wake_flags & WF_SYNC)
loop if
loop for
loop while
str : 		schedstat_inc(p, se.statistics.nr_wakeups_sync);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif /* CONFIG_SCHEDSTATS */
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void ttwu_activate(struct rq *rq, struct task_struct *p, int en_flags)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	activate_task(rq, p, en_flags);
loop INIT
loop if
loop for
loop while
str : 	p->on_rq = 1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* if a worker is waking up, notify workqueue */
loop if
loop for
loop while
str : 	if (p->flags & PF_WQ_WORKER)
loop INIT
loop if
loop for
loop while
str : 		wq_worker_waking_up(p, cpu_of(rq));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Mark the task runnable and perform wakeup-preemption.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void
loop INIT
loop if
loop for
loop while
str : ttwu_do_wakeup(struct rq *rq, struct task_struct *p, int wake_flags)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	check_preempt_curr(rq, p, wake_flags);
loop INIT
loop if
loop for
loop while
str : 	trace_sched_wakeup(p, true);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	p->state = TASK_RUNNING;
loop if
loop for
loop while
str : #ifdef CONFIG_SMP
loop INIT
loop if
loop for
loop while
str : 	if (p->sched_class->task_woken)
loop INIT
loop if
loop for
loop while
str : 		p->sched_class->task_woken(rq, p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (rq->idle_stamp) {
loop if
loop for
loop while
str : 		u64 delta = rq_clock(rq) - rq->idle_stamp;
loop INIT
loop if
loop for
loop while
str : 		u64 max = 2*rq->max_idle_balance_cost;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		update_avg(&rq->avg_idle, delta);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (rq->avg_idle > max)
loop if
loop for
loop while
str : 			rq->avg_idle = max;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		rq->idle_stamp = 0;
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void
loop if
loop for
loop while
str : ttwu_do_activate(struct rq *rq, struct task_struct *p, int wake_flags)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SMP
loop INIT
loop if
loop for
loop while
str : 	if (p->sched_contributes_to_load)
loop INIT
loop if
loop for
loop while
str : 		rq->nr_uninterruptible--;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	ttwu_activate(rq, p, ENQUEUE_WAKEUP | ENQUEUE_WAKING);
loop if
loop for
loop while
str : 	ttwu_do_wakeup(rq, p, wake_flags);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Called in case the task @p isn't fully descheduled from its runqueue,
loop INIT
loop if
loop for
loop while
str :  * in this case we must do a remote wakeup. Its a 'light' wakeup though,
loop INIT
loop if
loop for
loop while
str :  * since all we need to do is flip p->state to TASK_RUNNING, since
loop INIT
loop if
loop for
loop while
str :  * the task is still ->on_rq.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int ttwu_remote(struct task_struct *p, int wake_flags)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 	int ret = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq = __task_rq_lock(p);
loop if
loop for
loop while
str : 	if (p->on_rq) {
loop INIT
loop if
loop for
loop while
str : 		/* check_preempt_curr() may use rq clock */
loop INIT
loop if
loop for
loop while
str : 		update_rq_clock(rq);
loop INIT
loop if
loop for
loop while
str : 		ttwu_do_wakeup(rq, p, wake_flags);
loop INIT
loop if
loop for
loop while
str : 		ret = 1;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	__task_rq_unlock(rq);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ret;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : static void sched_ttwu_pending(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = this_rq();
loop INIT
loop if
loop for
loop while
str : 	struct llist_node *llist = llist_del_all(&rq->wake_list);
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *p;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock(&rq->lock);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	while (llist) {
loop if
loop for
loop while
str : 		p = llist_entry(llist, struct task_struct, wake_entry);
loop INIT
loop if
loop for
loop while
str : 		llist = llist_next(llist);
loop INIT
loop if
loop for
loop while
str : 		ttwu_do_activate(rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_unlock(&rq->lock);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void scheduler_ipi(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * Fold TIF_NEED_RESCHED into the preempt_count; anybody setting
loop INIT
loop if
loop for
loop while
str : 	 * TIF_NEED_RESCHED remotely (for the first time) will also send
loop INIT
loop if
loop for
loop while
str : 	 * this IPI.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	preempt_fold_need_resched();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (llist_empty(&this_rq()->wake_list)
loop if
loop for
loop while
str : 			&& !tick_nohz_full_cpu(smp_processor_id())
loop INIT
loop if
loop for
loop while
str : 			&& !got_nohz_idle_kick())
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Not all reschedule IPI handlers call irq_enter/irq_exit, since
loop INIT
loop if
loop for
loop while
str : 	 * traditionally all their work was done from the interrupt return
loop INIT
loop if
loop for
loop while
str : 	 * path. Now that we actually do some work, we need to make sure
loop INIT
loop if
loop for
loop while
str : 	 * we do call them.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * Some archs already do call them, luckily irq_enter/exit nest
loop INIT
loop if
loop for
loop while
str : 	 * properly.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * Arguably we should visit all archs and update all handlers,
loop INIT
loop if
loop for
loop while
str : 	 * however a fair share of IPIs are still resched only so this would
loop INIT
loop if
loop for
loop while
str : 	 * somewhat pessimize the simple resched case.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	irq_enter();
loop INIT
loop if
loop for
loop while
str : 	tick_nohz_full_check();
loop INIT
loop if
loop for
loop while
str : 	sched_ttwu_pending();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Check if someone kicked us for doing the nohz idle load balance.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (unlikely(got_nohz_idle_kick())) {
loop INIT
loop if
loop for
loop while
str : 		this_rq()->idle_balance = 1;
loop INIT
loop if
loop for
loop while
str : 		raise_softirq_irqoff(SCHED_SOFTIRQ);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	irq_exit();
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void ttwu_queue_remote(struct task_struct *p, int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (llist_add(&p->wake_entry, &cpu_rq(cpu)->wake_list))
loop INIT
loop if
loop for
loop while
str : 		smp_send_reschedule(cpu);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : bool cpus_share_cache(int this_cpu, int that_cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return per_cpu(sd_llc_id, this_cpu) == per_cpu(sd_llc_id, that_cpu);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_SMP */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void ttwu_queue(struct task_struct *p, int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = cpu_rq(cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #if defined(CONFIG_SMP)
loop if
loop for
loop while
str : 	if (sched_feat(TTWU_QUEUE) && !cpus_share_cache(smp_processor_id(), cpu)) {
loop INIT
loop if
loop for
loop while
str : 		sched_clock_cpu(cpu); /* sync clocks x-cpu */
loop INIT
loop if
loop for
loop while
str : 		ttwu_queue_remote(p, cpu);
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock(&rq->lock);
loop if
loop for
loop while
str : 	ttwu_do_activate(rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * try_to_wake_up - wake up a thread
loop INIT
loop if
loop for
loop while
str :  * @p: the thread to be awakened
loop INIT
loop if
loop for
loop while
str :  * @state: the mask of task states that can be woken
loop INIT
loop if
loop for
loop while
str :  * @wake_flags: wake modifier flags (WF_*)
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Put it on the run-queue if it's not already there. The "current"
loop INIT
loop if
loop for
loop while
str :  * thread is always on the run-queue (except when the actual
loop INIT
loop if
loop for
loop while
str :  * re-schedule is in progress), and as such you're allowed to do
loop INIT
loop if
loop for
loop while
str :  * the simpler "current->state = TASK_RUNNING" to mark yourself
loop INIT
loop if
loop for
loop while
str :  * runnable without the overhead of this.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: %true if @p was woken up, %false if it was already running.
loop INIT
loop if
loop for
loop while
str :  * or @state didn't match @p's state.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int
loop INIT
loop if
loop for
loop while
str : try_to_wake_up(struct task_struct *p, unsigned int state, int wake_flags)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	int cpu, success = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * If we are going to wake up a thread waiting for CONDITION we
loop INIT
loop if
loop for
loop while
str : 	 * need to ensure that CONDITION=1 done by the caller can not be
loop INIT
loop if
loop for
loop while
str : 	 * reordered with p->state check below. This pairs with mb() in
loop INIT
loop if
loop for
loop while
str : 	 * set_current_state() the waiting thread does.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	smp_mb__before_spinlock();
loop INIT
loop if
loop for
loop while
str : 	raw_spin_lock_irqsave(&p->pi_lock, flags);
loop INIT
loop if
loop for
loop while
str : 	if (!(p->state & state))
loop INIT
loop if
loop for
loop while
str : 		goto out;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	success = 1; /* we're going to change ->state */
loop if
loop for
loop while
str : 	cpu = task_cpu(p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (p->on_rq && ttwu_remote(p, wake_flags))
loop if
loop for
loop while
str : 		goto stat;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * If the owning (remote) cpu is still in the middle of schedule() with
loop INIT
loop if
loop for
loop while
str : 	 * this task as prev, wait until its done referencing the task.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	while (p->on_cpu)
loop INIT
loop if
loop for
loop while
str : 		cpu_relax();
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * Pairs with the smp_wmb() in finish_lock_switch().
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	smp_rmb();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	p->sched_contributes_to_load = !!task_contributes_to_load(p);
loop if
loop for
loop while
str : 	p->state = TASK_WAKING;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (p->sched_class->task_waking)
loop if
loop for
loop while
str : 		p->sched_class->task_waking(p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cpu = select_task_rq(p, p->wake_cpu, SD_BALANCE_WAKE, wake_flags);
loop if
loop for
loop while
str : 	if (task_cpu(p) != cpu) {
loop INIT
loop if
loop for
loop while
str : 		wake_flags |= WF_MIGRATED;
loop INIT
loop if
loop for
loop while
str : 		set_task_cpu(p, cpu);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_SMP */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	ttwu_queue(p, cpu);
loop if
loop for
loop while
str : stat:
loop INIT
loop if
loop for
loop while
str : 	ttwu_stat(p, cpu, wake_flags);
loop INIT
loop if
loop for
loop while
str : out:
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return success;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * try_to_wake_up_local - try to wake up a local task with rq lock held
loop INIT
loop if
loop for
loop while
str :  * @p: the thread to be awakened
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Put @p on the run-queue if it's not already there. The caller must
loop INIT
loop if
loop for
loop while
str :  * ensure that this_rq() is locked, @p is bound to this_rq() and not
loop INIT
loop if
loop for
loop while
str :  * the current task.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void try_to_wake_up_local(struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = task_rq(p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (WARN_ON_ONCE(rq != this_rq()) ||
loop if
loop for
loop while
str : 	    WARN_ON_ONCE(p == current))
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	lockdep_assert_held(&rq->lock);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!raw_spin_trylock(&p->pi_lock)) {
loop if
loop for
loop while
str : 		raw_spin_unlock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 		raw_spin_lock(&p->pi_lock);
loop INIT
loop if
loop for
loop while
str : 		raw_spin_lock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!(p->state & TASK_NORMAL))
loop if
loop for
loop while
str : 		goto out;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!p->on_rq)
loop if
loop for
loop while
str : 		ttwu_activate(rq, p, ENQUEUE_WAKEUP);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	ttwu_do_wakeup(rq, p, 0);
loop if
loop for
loop while
str : 	ttwu_stat(p, smp_processor_id(), 0);
loop INIT
loop if
loop for
loop while
str : out:
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock(&p->pi_lock);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * wake_up_process - Wake up a specific process
loop INIT
loop if
loop for
loop while
str :  * @p: The process to be woken up.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Attempt to wake up the nominated process and move it to the set of runnable
loop INIT
loop if
loop for
loop while
str :  * processes.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: 1 if the process was woken up, 0 if it was already running.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * It may be assumed that this function implies a write memory barrier before
loop INIT
loop if
loop for
loop while
str :  * changing the task state if and only if any tasks are woken up.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int wake_up_process(struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	WARN_ON(task_is_stopped_or_traced(p));
loop INIT
loop if
loop for
loop while
str : 	return try_to_wake_up(p, TASK_NORMAL, 0);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(wake_up_process);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : int wake_up_state(struct task_struct *p, unsigned int state)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return try_to_wake_up(p, state, 0);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Perform scheduler related setup for a newly forked process p.
loop INIT
loop if
loop for
loop while
str :  * p is forked by current.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * __sched_fork() is basic setup used by init_idle() too:
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void __sched_fork(unsigned long clone_flags, struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	p->on_rq			= 0;
loop INIT
loop if
loop for
loop while
str : 	p->se.on_rq			= 0;
loop INIT
loop if
loop for
loop while
str : 	p->se.exec_start		= 0;
loop INIT
loop if
loop for
loop while
str : 	p->se.sum_exec_runtime		= 0;
loop INIT
loop if
loop for
loop while
str : 	p->se.prev_sum_exec_runtime	= 0;
loop INIT
loop if
loop for
loop while
str : 	p->se.nr_migrations		= 0;
loop INIT
loop if
loop for
loop while
str : 	p->se.vruntime			= 0;
loop INIT
loop if
loop for
loop while
str : 	INIT_LIST_HEAD(&p->se.group_node);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SCHEDSTATS
loop if
loop for
loop while
str : 	memset(&p->se.statistics, 0, sizeof(p->se.statistics));
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	RB_CLEAR_NODE(&p->dl.rb_node);
loop if
loop for
loop while
str : 	hrtimer_init(&p->dl.dl_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
loop INIT
loop if
loop for
loop while
str : 	p->dl.dl_runtime = p->dl.runtime = 0;
loop INIT
loop if
loop for
loop while
str : 	p->dl.dl_deadline = p->dl.deadline = 0;
loop INIT
loop if
loop for
loop while
str : 	p->dl.dl_period = 0;
loop INIT
loop if
loop for
loop while
str : 	p->dl.flags = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	INIT_LIST_HEAD(&p->rt.run_list);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_PREEMPT_NOTIFIERS
loop if
loop for
loop while
str : 	INIT_HLIST_HEAD(&p->preempt_notifiers);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_NUMA_BALANCING
loop if
loop for
loop while
str : 	if (p->mm && atomic_read(&p->mm->mm_users) == 1) {
loop INIT
loop if
loop for
loop while
str : 		p->mm->numa_next_scan = jiffies + msecs_to_jiffies(sysctl_numa_balancing_scan_delay);
loop INIT
loop if
loop for
loop while
str : 		p->mm->numa_scan_seq = 0;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (clone_flags & CLONE_VM)
loop if
loop for
loop while
str : 		p->numa_preferred_nid = current->numa_preferred_nid;
loop INIT
loop if
loop for
loop while
str : 	else
loop INIT
loop if
loop for
loop while
str : 		p->numa_preferred_nid = -1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	p->node_stamp = 0ULL;
loop if
loop for
loop while
str : 	p->numa_scan_seq = p->mm ? p->mm->numa_scan_seq : 0;
loop INIT
loop if
loop for
loop while
str : 	p->numa_scan_period = sysctl_numa_balancing_scan_delay;
loop INIT
loop if
loop for
loop while
str : 	p->numa_work.next = &p->numa_work;
loop INIT
loop if
loop for
loop while
str : 	p->numa_faults = NULL;
loop INIT
loop if
loop for
loop while
str : 	p->numa_faults_buffer = NULL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	INIT_LIST_HEAD(&p->numa_entry);
loop if
loop for
loop while
str : 	p->numa_group = NULL;
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_NUMA_BALANCING */
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_NUMA_BALANCING
loop if
loop for
loop while
str : #ifdef CONFIG_SCHED_DEBUG
loop INIT
loop if
loop for
loop while
str : void set_numabalancing_state(bool enabled)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (enabled)
loop INIT
loop if
loop for
loop while
str : 		sched_feat_set("NUMA");
loop INIT
loop if
loop for
loop while
str : 	else
loop INIT
loop if
loop for
loop while
str : 		sched_feat_set("NO_NUMA");
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #else
loop INIT
loop if
loop for
loop while
str : __read_mostly bool numabalancing_enabled;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void set_numabalancing_state(bool enabled)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	numabalancing_enabled = enabled;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_SCHED_DEBUG */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_PROC_SYSCTL
loop if
loop for
loop while
str : int sysctl_numa_balancing(struct ctl_table *table, int write,
loop INIT
loop if
loop for
loop while
str : 			 void __user *buffer, size_t *lenp, loff_t *ppos)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct ctl_table t;
loop INIT
loop if
loop for
loop while
str : 	int err;
loop INIT
loop if
loop for
loop while
str : 	int state = numabalancing_enabled;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (write && !capable(CAP_SYS_ADMIN))
loop if
loop for
loop while
str : 		return -EPERM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	t = *table;
loop if
loop for
loop while
str : 	t.data = &state;
loop INIT
loop if
loop for
loop while
str : 	err = proc_dointvec_minmax(&t, write, buffer, lenp, ppos);
loop INIT
loop if
loop for
loop while
str : 	if (err < 0)
loop INIT
loop if
loop for
loop while
str : 		return err;
loop INIT
loop if
loop for
loop while
str : 	if (write)
loop INIT
loop if
loop for
loop while
str : 		set_numabalancing_state(state);
loop INIT
loop if
loop for
loop while
str : 	return err;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * fork()/clone()-time setup:
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int sched_fork(unsigned long clone_flags, struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	int cpu = get_cpu();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	__sched_fork(clone_flags, p);
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * We mark the process as running here. This guarantees that
loop INIT
loop if
loop for
loop while
str : 	 * nobody will actually run it, and a signal or other external
loop INIT
loop if
loop for
loop while
str : 	 * event cannot wake it up and insert it on the runqueue either.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	p->state = TASK_RUNNING;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Make sure we do not leak PI boosting priority to the child.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	p->prio = current->normal_prio;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Revert to default priority/policy on fork if requested.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (unlikely(p->sched_reset_on_fork)) {
loop INIT
loop if
loop for
loop while
str : 		if (task_has_dl_policy(p) || task_has_rt_policy(p)) {
loop INIT
loop if
loop for
loop while
str : 			p->policy = SCHED_NORMAL;
loop INIT
loop if
loop for
loop while
str : 			p->static_prio = NICE_TO_PRIO(0);
loop INIT
loop if
loop for
loop while
str : 			p->rt_priority = 0;
loop INIT
loop if
loop for
loop while
str : 		} else if (PRIO_TO_NICE(p->static_prio) < 0)
loop INIT
loop if
loop for
loop while
str : 			p->static_prio = NICE_TO_PRIO(0);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		p->prio = p->normal_prio = __normal_prio(p);
loop if
loop for
loop while
str : 		set_load_weight(p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * We don't need the reset flag anymore after the fork. It has
loop INIT
loop if
loop for
loop while
str : 		 * fulfilled its duty:
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		p->sched_reset_on_fork = 0;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (dl_prio(p->prio)) {
loop if
loop for
loop while
str : 		put_cpu();
loop INIT
loop if
loop for
loop while
str : 		return -EAGAIN;
loop INIT
loop if
loop for
loop while
str : 	} else if (rt_prio(p->prio)) {
loop INIT
loop if
loop for
loop while
str : 		p->sched_class = &rt_sched_class;
loop INIT
loop if
loop for
loop while
str : 	} else {
loop INIT
loop if
loop for
loop while
str : 		p->sched_class = &fair_sched_class;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (p->sched_class->task_fork)
loop if
loop for
loop while
str : 		p->sched_class->task_fork(p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * The child is not yet in the pid-hash so no cgroup attach races,
loop INIT
loop if
loop for
loop while
str : 	 * and the cgroup is pinned to this child due to cgroup_fork()
loop INIT
loop if
loop for
loop while
str : 	 * is ran before sched_fork().
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * Silence PROVE_RCU.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	raw_spin_lock_irqsave(&p->pi_lock, flags);
loop INIT
loop if
loop for
loop while
str : 	set_task_cpu(p, cpu);
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #if defined(CONFIG_SCHEDSTATS) || defined(CONFIG_TASK_DELAY_ACCT)
loop if
loop for
loop while
str : 	if (likely(sched_info_on()))
loop INIT
loop if
loop for
loop while
str : 		memset(&p->sched_info, 0, sizeof(p->sched_info));
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #if defined(CONFIG_SMP)
loop INIT
loop if
loop for
loop while
str : 	p->on_cpu = 0;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	init_task_preempt_count(p);
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SMP
loop INIT
loop if
loop for
loop while
str : 	plist_node_init(&p->pushable_tasks, MAX_PRIO);
loop INIT
loop if
loop for
loop while
str : 	RB_CLEAR_NODE(&p->pushable_dl_tasks);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	put_cpu();
loop if
loop for
loop while
str : 	return 0;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : unsigned long to_ratio(u64 period, u64 runtime)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (runtime == RUNTIME_INF)
loop INIT
loop if
loop for
loop while
str : 		return 1ULL << 20;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Doing this here saves a lot of checks in all
loop INIT
loop if
loop for
loop while
str : 	 * the calling paths, and returning zero seems
loop INIT
loop if
loop for
loop while
str : 	 * safe for them anyway.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (period == 0)
loop INIT
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return div64_u64(runtime << 20, period);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : inline struct dl_bw *dl_bw_of(int i)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return &cpu_rq(i)->rd->dl_bw;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline int dl_bw_cpus(int i)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct root_domain *rd = cpu_rq(i)->rd;
loop INIT
loop if
loop for
loop while
str : 	int cpus = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_cpu_and(i, rd->span, cpu_active_mask)
loop if
loop for
loop while
str : 		cpus++;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return cpus;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #else
loop INIT
loop if
loop for
loop while
str : inline struct dl_bw *dl_bw_of(int i)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return &cpu_rq(i)->dl.dl_bw;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline int dl_bw_cpus(int i)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return 1;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline
loop if
loop for
loop while
str : void __dl_clear(struct dl_bw *dl_b, u64 tsk_bw)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	dl_b->total_bw -= tsk_bw;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline
loop if
loop for
loop while
str : void __dl_add(struct dl_bw *dl_b, u64 tsk_bw)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	dl_b->total_bw += tsk_bw;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline
loop if
loop for
loop while
str : bool __dl_overflow(struct dl_bw *dl_b, int cpus, u64 old_bw, u64 new_bw)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return dl_b->bw != -1 &&
loop INIT
loop if
loop for
loop while
str : 	       dl_b->bw * cpus < dl_b->total_bw - old_bw + new_bw;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * We must be sure that accepting a new task (or allowing changing the
loop INIT
loop if
loop for
loop while
str :  * parameters of an existing one) is consistent with the bandwidth
loop INIT
loop if
loop for
loop while
str :  * constraints. If yes, this function also accordingly updates the currently
loop INIT
loop if
loop for
loop while
str :  * allocated bandwidth to reflect the new situation.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * This function is called while holding p's rq->lock.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int dl_overflow(struct task_struct *p, int policy,
loop INIT
loop if
loop for
loop while
str : 		       const struct sched_attr *attr)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	struct dl_bw *dl_b = dl_bw_of(task_cpu(p));
loop if
loop for
loop while
str : 	u64 period = attr->sched_period ?: attr->sched_deadline;
loop INIT
loop if
loop for
loop while
str : 	u64 runtime = attr->sched_runtime;
loop INIT
loop if
loop for
loop while
str : 	u64 new_bw = dl_policy(policy) ? to_ratio(period, runtime) : 0;
loop INIT
loop if
loop for
loop while
str : 	int cpus, err = -1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (new_bw == p->dl.dl_bw)
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Either if a task, enters, leave, or stays -deadline but changes
loop INIT
loop if
loop for
loop while
str : 	 * its parameters, we may need to update accordingly the total
loop INIT
loop if
loop for
loop while
str : 	 * allocated bandwidth of the container.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	raw_spin_lock(&dl_b->lock);
loop INIT
loop if
loop for
loop while
str : 	cpus = dl_bw_cpus(task_cpu(p));
loop INIT
loop if
loop for
loop while
str : 	if (dl_policy(policy) && !task_has_dl_policy(p) &&
loop INIT
loop if
loop for
loop while
str : 	    !__dl_overflow(dl_b, cpus, 0, new_bw)) {
loop INIT
loop if
loop for
loop while
str : 		__dl_add(dl_b, new_bw);
loop INIT
loop if
loop for
loop while
str : 		err = 0;
loop INIT
loop if
loop for
loop while
str : 	} else if (dl_policy(policy) && task_has_dl_policy(p) &&
loop INIT
loop if
loop for
loop while
str : 		   !__dl_overflow(dl_b, cpus, p->dl.dl_bw, new_bw)) {
loop INIT
loop if
loop for
loop while
str : 		__dl_clear(dl_b, p->dl.dl_bw);
loop INIT
loop if
loop for
loop while
str : 		__dl_add(dl_b, new_bw);
loop INIT
loop if
loop for
loop while
str : 		err = 0;
loop INIT
loop if
loop for
loop while
str : 	} else if (!dl_policy(policy) && task_has_dl_policy(p)) {
loop INIT
loop if
loop for
loop while
str : 		__dl_clear(dl_b, p->dl.dl_bw);
loop INIT
loop if
loop for
loop while
str : 		err = 0;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock(&dl_b->lock);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return err;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : extern void init_dl_bw(struct dl_bw *dl_b);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * wake_up_new_task - wake up a newly created task for the first time.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * This function will do some initial scheduler statistics housekeeping
loop INIT
loop if
loop for
loop while
str :  * that must be done for every newly created context, then puts the task
loop INIT
loop if
loop for
loop while
str :  * on the runqueue and wakes it.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void wake_up_new_task(struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock_irqsave(&p->pi_lock, flags);
loop if
loop for
loop while
str : #ifdef CONFIG_SMP
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * Fork balancing, do it here and not earlier because:
loop INIT
loop if
loop for
loop while
str : 	 *  - cpus_allowed can change in the fork path
loop INIT
loop if
loop for
loop while
str : 	 *  - any previously selected cpu might disappear through hotplug
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	set_task_cpu(p, select_task_rq(p, task_cpu(p), SD_BALANCE_FORK, 0));
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Initialize new task's runnable average */
loop if
loop for
loop while
str : 	init_task_runnable_average(p);
loop INIT
loop if
loop for
loop while
str : 	rq = __task_rq_lock(p);
loop INIT
loop if
loop for
loop while
str : 	activate_task(rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 	p->on_rq = 1;
loop INIT
loop if
loop for
loop while
str : 	trace_sched_wakeup_new(p, true);
loop INIT
loop if
loop for
loop while
str : 	check_preempt_curr(rq, p, WF_FORK);
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SMP
loop INIT
loop if
loop for
loop while
str : 	if (p->sched_class->task_woken)
loop INIT
loop if
loop for
loop while
str : 		p->sched_class->task_woken(rq, p);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_PREEMPT_NOTIFIERS
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * preempt_notifier_register - tell me when current is being preempted & rescheduled
loop INIT
loop if
loop for
loop while
str :  * @notifier: notifier struct to register
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void preempt_notifier_register(struct preempt_notifier *notifier)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	hlist_add_head(&notifier->link, &current->preempt_notifiers);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL_GPL(preempt_notifier_register);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * preempt_notifier_unregister - no longer interested in preemption notifications
loop INIT
loop if
loop for
loop while
str :  * @notifier: notifier struct to unregister
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * This is safe to call from within a preemption notifier.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void preempt_notifier_unregister(struct preempt_notifier *notifier)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	hlist_del(&notifier->link);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL_GPL(preempt_notifier_unregister);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void fire_sched_in_preempt_notifiers(struct task_struct *curr)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct preempt_notifier *notifier;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	hlist_for_each_entry(notifier, &curr->preempt_notifiers, link)
loop if
loop for
loop while
str : 		notifier->ops->sched_in(notifier, raw_smp_processor_id());
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void
loop if
loop for
loop while
str : fire_sched_out_preempt_notifiers(struct task_struct *curr,
loop INIT
loop if
loop for
loop while
str : 				 struct task_struct *next)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct preempt_notifier *notifier;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	hlist_for_each_entry(notifier, &curr->preempt_notifiers, link)
loop if
loop for
loop while
str : 		notifier->ops->sched_out(notifier, next);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #else /* !CONFIG_PREEMPT_NOTIFIERS */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void fire_sched_in_preempt_notifiers(struct task_struct *curr)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void
loop if
loop for
loop while
str : fire_sched_out_preempt_notifiers(struct task_struct *curr,
loop INIT
loop if
loop for
loop while
str : 				 struct task_struct *next)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif /* CONFIG_PREEMPT_NOTIFIERS */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * prepare_task_switch - prepare to switch tasks
loop INIT
loop if
loop for
loop while
str :  * @rq: the runqueue preparing to switch
loop INIT
loop if
loop for
loop while
str :  * @prev: the current task that is being switched out
loop INIT
loop if
loop for
loop while
str :  * @next: the task we are going to switch to.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * This is called with the rq lock held and interrupts off. It must
loop INIT
loop if
loop for
loop while
str :  * be paired with a subsequent finish_task_switch after the context
loop INIT
loop if
loop for
loop while
str :  * switch.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * prepare_task_switch sets up locking and calls architecture specific
loop INIT
loop if
loop for
loop while
str :  * hooks.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static inline void
loop INIT
loop if
loop for
loop while
str : prepare_task_switch(struct rq *rq, struct task_struct *prev,
loop INIT
loop if
loop for
loop while
str : 		    struct task_struct *next)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	trace_sched_switch(prev, next);
loop INIT
loop if
loop for
loop while
str : 	sched_info_switch(rq, prev, next);
loop INIT
loop if
loop for
loop while
str : 	perf_event_task_sched_out(prev, next);
loop INIT
loop if
loop for
loop while
str : 	fire_sched_out_preempt_notifiers(prev, next);
loop INIT
loop if
loop for
loop while
str : 	prepare_lock_switch(rq, next);
loop INIT
loop if
loop for
loop while
str : 	prepare_arch_switch(next);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * finish_task_switch - clean up after a task-switch
loop INIT
loop if
loop for
loop while
str :  * @rq: runqueue associated with task-switch
loop INIT
loop if
loop for
loop while
str :  * @prev: the thread we just switched away from.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * finish_task_switch must be called after the context switch, paired
loop INIT
loop if
loop for
loop while
str :  * with a prepare_task_switch call before the context switch.
loop INIT
loop if
loop for
loop while
str :  * finish_task_switch will reconcile locking set up by prepare_task_switch,
loop INIT
loop if
loop for
loop while
str :  * and do any other architecture-specific cleanup actions.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Note that we may have delayed dropping an mm in context_switch(). If
loop INIT
loop if
loop for
loop while
str :  * so, we finish that here outside of the runqueue lock. (Doing it
loop INIT
loop if
loop for
loop while
str :  * with the lock held can cause deadlocks; see schedule() for
loop INIT
loop if
loop for
loop while
str :  * details.)
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void finish_task_switch(struct rq *rq, struct task_struct *prev)
loop INIT
loop if
loop for
loop while
str : 	__releases(rq->lock)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct mm_struct *mm = rq->prev_mm;
loop INIT
loop if
loop for
loop while
str : 	long prev_state;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq->prev_mm = NULL;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * A task struct has one reference for the use as "current".
loop INIT
loop if
loop for
loop while
str : 	 * If a task dies, then it sets TASK_DEAD in tsk->state and calls
loop INIT
loop if
loop for
loop while
str : 	 * schedule one last time. The schedule call will never return, and
loop INIT
loop if
loop for
loop while
str : 	 * the scheduled task must drop that reference.
loop INIT
loop if
loop for
loop while
str : 	 * The test for TASK_DEAD must occur while the runqueue locks are
loop INIT
loop if
loop for
loop while
str : 	 * still held, otherwise prev could be scheduled on another cpu, die
loop INIT
loop if
loop for
loop while
str : 	 * there before we look at prev->state, and then the reference would
loop INIT
loop if
loop for
loop while
str : 	 * be dropped twice.
loop INIT
loop if
loop for
loop while
str : 	 *		Manfred Spraul <manfred@colorfullife.com>
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	prev_state = prev->state;
loop INIT
loop if
loop for
loop while
str : 	vtime_task_switch(prev);
loop INIT
loop if
loop for
loop while
str : 	finish_arch_switch(prev);
loop INIT
loop if
loop for
loop while
str : 	perf_event_task_sched_in(prev, current);
loop INIT
loop if
loop for
loop while
str : 	finish_lock_switch(rq, prev);
loop INIT
loop if
loop for
loop while
str : 	finish_arch_post_lock_switch();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	fire_sched_in_preempt_notifiers(current);
loop if
loop for
loop while
str : 	if (mm)
loop INIT
loop if
loop for
loop while
str : 		mmdrop(mm);
loop INIT
loop if
loop for
loop while
str : 	if (unlikely(prev_state == TASK_DEAD)) {
loop INIT
loop if
loop for
loop while
str : 		task_numa_free(prev);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (prev->sched_class->task_dead)
loop if
loop for
loop while
str : 			prev->sched_class->task_dead(prev);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * Remove function-return probe instances associated with this
loop INIT
loop if
loop for
loop while
str : 		 * task and put them back on the free list.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		kprobe_flush_task(prev);
loop INIT
loop if
loop for
loop while
str : 		put_task_struct(prev);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	tick_nohz_task_switch(current);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /* assumes rq->lock is held */
loop if
loop for
loop while
str : static inline void pre_schedule(struct rq *rq, struct task_struct *prev)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (prev->sched_class->pre_schedule)
loop INIT
loop if
loop for
loop while
str : 		prev->sched_class->pre_schedule(rq, prev);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /* rq->lock is NOT held, but preemption is disabled */
loop if
loop for
loop while
str : static inline void post_schedule(struct rq *rq)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (rq->post_schedule) {
loop INIT
loop if
loop for
loop while
str : 		unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		raw_spin_lock_irqsave(&rq->lock, flags);
loop if
loop for
loop while
str : 		if (rq->curr->sched_class->post_schedule)
loop INIT
loop if
loop for
loop while
str : 			rq->curr->sched_class->post_schedule(rq);
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock_irqrestore(&rq->lock, flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		rq->post_schedule = 0;
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #else
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline void pre_schedule(struct rq *rq, struct task_struct *p)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline void post_schedule(struct rq *rq)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * schedule_tail - first thing a freshly forked thread must call.
loop INIT
loop if
loop for
loop while
str :  * @prev: the thread we just switched away from.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : asmlinkage void schedule_tail(struct task_struct *prev)
loop INIT
loop if
loop for
loop while
str : 	__releases(rq->lock)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = this_rq();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	finish_task_switch(rq, prev);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * FIXME: do we need to worry about rq being invalidated by the
loop INIT
loop if
loop for
loop while
str : 	 * task_switch?
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	post_schedule(rq);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef __ARCH_WANT_UNLOCKED_CTXSW
loop if
loop for
loop while
str : 	/* In this case, finish_task_switch does not reenable preemption */
loop INIT
loop if
loop for
loop while
str : 	preempt_enable();
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	if (current->set_child_tid)
loop INIT
loop if
loop for
loop while
str : 		put_user(task_pid_vnr(current), current->set_child_tid);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * context_switch - switch to the new MM and the new
loop INIT
loop if
loop for
loop while
str :  * thread's register state.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static inline void
loop INIT
loop if
loop for
loop while
str : context_switch(struct rq *rq, struct task_struct *prev,
loop INIT
loop if
loop for
loop while
str : 	       struct task_struct *next)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct mm_struct *mm, *oldmm;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	prepare_task_switch(rq, prev, next);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	mm = next->mm;
loop if
loop for
loop while
str : 	oldmm = prev->active_mm;
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * For paravirt, this is coupled with an exit in switch_to to
loop INIT
loop if
loop for
loop while
str : 	 * combine the page table reload and the switch backend into
loop INIT
loop if
loop for
loop while
str : 	 * one hypercall.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	arch_start_context_switch(prev);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!mm) {
loop if
loop for
loop while
str : 		next->active_mm = oldmm;
loop INIT
loop if
loop for
loop while
str : 		atomic_inc(&oldmm->mm_count);
loop INIT
loop if
loop for
loop while
str : 		enter_lazy_tlb(oldmm, next);
loop INIT
loop if
loop for
loop while
str : 	} else
loop INIT
loop if
loop for
loop while
str : 		switch_mm(oldmm, mm, next);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!prev->mm) {
loop if
loop for
loop while
str : 		prev->active_mm = NULL;
loop INIT
loop if
loop for
loop while
str : 		rq->prev_mm = oldmm;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * Since the runqueue lock will be released by the next
loop INIT
loop if
loop for
loop while
str : 	 * task (which is an invalid locking op but in the case
loop INIT
loop if
loop for
loop while
str : 	 * of the scheduler it's an obvious special-case), so we
loop INIT
loop if
loop for
loop while
str : 	 * do an early lockdep release here:
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : #ifndef __ARCH_WANT_UNLOCKED_CTXSW
loop INIT
loop if
loop for
loop while
str : 	spin_release(&rq->lock.dep_map, 1, _THIS_IP_);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	context_tracking_task_switch(prev, next);
loop if
loop for
loop while
str : 	/* Here we just switch the register state and the stack. */
loop INIT
loop if
loop for
loop while
str : 	switch_to(prev, next, prev);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	barrier();
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * this_rq must be evaluated again because prev may have moved
loop INIT
loop if
loop for
loop while
str : 	 * CPUs since it called schedule(), thus the 'rq' on its stack
loop INIT
loop if
loop for
loop while
str : 	 * frame will be invalid.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	finish_task_switch(this_rq(), prev);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * nr_running and nr_context_switches:
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * externally visible scheduler statistics: current number of runnable
loop INIT
loop if
loop for
loop while
str :  * threads, total number of context switches performed since bootup.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : unsigned long nr_running(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long i, sum = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_online_cpu(i)
loop if
loop for
loop while
str : 		sum += cpu_rq(i)->nr_running;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return sum;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : unsigned long long nr_context_switches(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i;
loop INIT
loop if
loop for
loop while
str : 	unsigned long long sum = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_possible_cpu(i)
loop if
loop for
loop while
str : 		sum += cpu_rq(i)->nr_switches;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return sum;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : unsigned long nr_iowait(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long i, sum = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_possible_cpu(i)
loop if
loop for
loop while
str : 		sum += atomic_read(&cpu_rq(i)->nr_iowait);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return sum;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : unsigned long nr_iowait_cpu(int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *this = cpu_rq(cpu);
loop INIT
loop if
loop for
loop while
str : 	return atomic_read(&this->nr_iowait);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * sched_exec - execve() is a valuable balancing opportunity, because at
loop INIT
loop if
loop for
loop while
str :  * this point the task has the smallest effective memory and cache footprint.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void sched_exec(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *p = current;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	int dest_cpu;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock_irqsave(&p->pi_lock, flags);
loop if
loop for
loop while
str : 	dest_cpu = p->sched_class->select_task_rq(p, task_cpu(p), SD_BALANCE_EXEC, 0);
loop INIT
loop if
loop for
loop while
str : 	if (dest_cpu == smp_processor_id())
loop INIT
loop if
loop for
loop while
str : 		goto unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (likely(cpu_active(dest_cpu))) {
loop if
loop for
loop while
str : 		struct migration_arg arg = { p, dest_cpu };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		raw_spin_unlock_irqrestore(&p->pi_lock, flags);
loop if
loop for
loop while
str : 		stop_one_cpu(task_cpu(p), migration_cpu_stop, &arg);
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : unlock:
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : DEFINE_PER_CPU(struct kernel_stat, kstat);
loop if
loop for
loop while
str : DEFINE_PER_CPU(struct kernel_cpustat, kernel_cpustat);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : EXPORT_PER_CPU_SYMBOL(kstat);
loop if
loop for
loop while
str : EXPORT_PER_CPU_SYMBOL(kernel_cpustat);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Return any ns on the sched_clock that have not yet been accounted in
loop INIT
loop if
loop for
loop while
str :  * @p in case that task is currently running.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Called with task_rq_lock() held on @rq.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static u64 do_task_delta_exec(struct task_struct *p, struct rq *rq)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u64 ns = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (task_current(rq, p)) {
loop if
loop for
loop while
str : 		update_rq_clock(rq);
loop INIT
loop if
loop for
loop while
str : 		ns = rq_clock_task(rq) - p->se.exec_start;
loop INIT
loop if
loop for
loop while
str : 		if ((s64)ns < 0)
loop INIT
loop if
loop for
loop while
str : 			ns = 0;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ns;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : unsigned long long task_delta_exec(struct task_struct *p)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 	u64 ns = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq = task_rq_lock(p, &flags);
loop if
loop for
loop while
str : 	ns = do_task_delta_exec(p, rq);
loop INIT
loop if
loop for
loop while
str : 	task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ns;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Return accounted runtime for the task.
loop INIT
loop if
loop for
loop while
str :  * In case the task is currently running, return the runtime plus current's
loop INIT
loop if
loop for
loop while
str :  * pending runtime that have not been accounted yet.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : unsigned long long task_sched_runtime(struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 	u64 ns = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #if defined(CONFIG_64BIT) && defined(CONFIG_SMP)
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * 64-bit doesn't need locks to atomically read a 64bit value.
loop INIT
loop if
loop for
loop while
str : 	 * So we have a optimization chance when the task's delta_exec is 0.
loop INIT
loop if
loop for
loop while
str : 	 * Reading ->on_cpu is racy, but this is ok.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * If we race with it leaving cpu, we'll take a lock. So we're correct.
loop INIT
loop if
loop for
loop while
str : 	 * If we race with it entering cpu, unaccounted time is 0. This is
loop INIT
loop if
loop for
loop while
str : 	 * indistinguishable from the read occurring a few cycles earlier.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (!p->on_cpu)
loop INIT
loop if
loop for
loop while
str : 		return p->se.sum_exec_runtime;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq = task_rq_lock(p, &flags);
loop if
loop for
loop while
str : 	ns = p->se.sum_exec_runtime + do_task_delta_exec(p, rq);
loop INIT
loop if
loop for
loop while
str : 	task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ns;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * This function gets called by the timer code, with HZ frequency.
loop INIT
loop if
loop for
loop while
str :  * We call it with interrupts disabled.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void scheduler_tick(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int cpu = smp_processor_id();
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = cpu_rq(cpu);
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *curr = rq->curr;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sched_clock_tick();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock(&rq->lock);
loop if
loop for
loop while
str : 	update_rq_clock(rq);
loop INIT
loop if
loop for
loop while
str : 	curr->sched_class->task_tick(rq, curr, 0);
loop INIT
loop if
loop for
loop while
str : 	update_cpu_load_active(rq);
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	perf_event_task_tick();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : 	rq->idle_balance = idle_cpu(cpu);
loop INIT
loop if
loop for
loop while
str : 	trigger_load_balance(rq);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	rq_last_tick_reset(rq);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_NO_HZ_FULL
loop if
loop for
loop while
str : /**
loop INIT
loop if
loop for
loop while
str :  * scheduler_tick_max_deferment
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Keep at least one tick per second when a single
loop INIT
loop if
loop for
loop while
str :  * active task is running because the scheduler doesn't
loop INIT
loop if
loop for
loop while
str :  * yet completely support full dynticks environment.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * This makes sure that uptime, CFS vruntime, load
loop INIT
loop if
loop for
loop while
str :  * balancing, etc... continue to move forward, even
loop INIT
loop if
loop for
loop while
str :  * with a very low granularity.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: Maximum deferment in nanoseconds.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : u64 scheduler_tick_max_deferment(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = this_rq();
loop INIT
loop if
loop for
loop while
str : 	unsigned long next, now = ACCESS_ONCE(jiffies);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	next = rq->last_sched_tick + HZ;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (time_before_eq(next, now))
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return jiffies_to_nsecs(next - now);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : notrace unsigned long get_parent_ip(unsigned long addr)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (in_lock_functions(addr)) {
loop INIT
loop if
loop for
loop while
str : 		addr = CALLER_ADDR2;
loop INIT
loop if
loop for
loop while
str : 		if (in_lock_functions(addr))
loop INIT
loop if
loop for
loop while
str : 			addr = CALLER_ADDR3;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	return addr;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #if defined(CONFIG_PREEMPT) && (defined(CONFIG_DEBUG_PREEMPT) || \
loop if
loop for
loop while
str : 				defined(CONFIG_PREEMPT_TRACER))
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void __kprobes preempt_count_add(int val)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_DEBUG_PREEMPT
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * Underflow?
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (DEBUG_LOCKS_WARN_ON((preempt_count() < 0)))
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	__preempt_count_add(val);
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_DEBUG_PREEMPT
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * Spinlock count overflowing soon?
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	DEBUG_LOCKS_WARN_ON((preempt_count() & PREEMPT_MASK) >=
loop INIT
loop if
loop for
loop while
str : 				PREEMPT_MASK - 10);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	if (preempt_count() == val)
loop INIT
loop if
loop for
loop while
str : 		trace_preempt_off(CALLER_ADDR0, get_parent_ip(CALLER_ADDR1));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(preempt_count_add);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void __kprobes preempt_count_sub(int val)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_DEBUG_PREEMPT
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * Underflow?
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (DEBUG_LOCKS_WARN_ON(val > preempt_count()))
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * Is the spinlock portion underflowing?
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (DEBUG_LOCKS_WARN_ON((val < PREEMPT_MASK) &&
loop INIT
loop if
loop for
loop while
str : 			!(preempt_count() & PREEMPT_MASK)))
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (preempt_count() == val)
loop if
loop for
loop while
str : 		trace_preempt_on(CALLER_ADDR0, get_parent_ip(CALLER_ADDR1));
loop INIT
loop if
loop for
loop while
str : 	__preempt_count_sub(val);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(preempt_count_sub);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Print scheduling while atomic bug:
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static noinline void __schedule_bug(struct task_struct *prev)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (oops_in_progress)
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	printk(KERN_ERR "BUG: scheduling while atomic: %s/%d/0x%08x\n",
loop if
loop for
loop while
str : 		prev->comm, prev->pid, preempt_count());
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	debug_show_held_locks(prev);
loop if
loop for
loop while
str : 	print_modules();
loop INIT
loop if
loop for
loop while
str : 	if (irqs_disabled())
loop INIT
loop if
loop for
loop while
str : 		print_irqtrace_events(prev);
loop INIT
loop if
loop for
loop while
str : 	dump_stack();
loop INIT
loop if
loop for
loop while
str : 	add_taint(TAINT_WARN, LOCKDEP_STILL_OK);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Various schedule()-time debugging checks and statistics:
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static inline void schedule_debug(struct task_struct *prev)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * Test if we are atomic. Since do_exit() needs to call into
loop INIT
loop if
loop for
loop while
str : 	 * schedule() atomically, we ignore that path. Otherwise whine
loop INIT
loop if
loop for
loop while
str : 	 * if we are scheduling when we should not.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (unlikely(in_atomic_preempt_off() && prev->state != TASK_DEAD))
loop INIT
loop if
loop for
loop while
str : 		__schedule_bug(prev);
loop INIT
loop if
loop for
loop while
str : 	rcu_sleep_check();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	profile_hit(SCHED_PROFILING, __builtin_return_address(0));
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	schedstat_inc(this_rq(), sched_count);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void put_prev_task(struct rq *rq, struct task_struct *prev)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (prev->on_rq || rq->skip_clock_update < 0)
loop INIT
loop if
loop for
loop while
str : 		update_rq_clock(rq);
loop INIT
loop if
loop for
loop while
str : 	prev->sched_class->put_prev_task(rq, prev);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Pick up the highest-prio task:
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static inline struct task_struct *
loop INIT
loop if
loop for
loop while
str : pick_next_task(struct rq *rq)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	const struct sched_class *class;
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *p;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Optimization: we know that if all tasks are in
loop INIT
loop if
loop for
loop while
str : 	 * the fair class we can call that function directly:
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (likely(rq->nr_running == rq->cfs.h_nr_running)) {
loop INIT
loop if
loop for
loop while
str : 		p = fair_sched_class.pick_next_task(rq);
loop INIT
loop if
loop for
loop while
str : 		if (likely(p))
loop INIT
loop if
loop for
loop while
str : 			return p;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_class(class) {
loop if
loop for
loop while
str : 		p = class->pick_next_task(rq);
loop INIT
loop if
loop for
loop while
str : 		if (p)
loop INIT
loop if
loop for
loop while
str : 			return p;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	BUG(); /* the idle class will always have a runnable task */
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * __schedule() is the main scheduler function.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * The main means of driving the scheduler and thus entering this function are:
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *   1. Explicit blocking: mutex, semaphore, waitqueue, etc.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *   2. TIF_NEED_RESCHED flag is checked on interrupt and userspace return
loop INIT
loop if
loop for
loop while
str :  *      paths. For example, see arch/x86/entry_64.S.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *      To drive preemption between tasks, the scheduler sets the flag in timer
loop INIT
loop if
loop for
loop while
str :  *      interrupt handler scheduler_tick().
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *   3. Wakeups don't really cause entry into schedule(). They add a
loop INIT
loop if
loop for
loop while
str :  *      task to the run-queue and that's it.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *      Now, if the new task added to the run-queue preempts the current
loop INIT
loop if
loop for
loop while
str :  *      task, then the wakeup sets TIF_NEED_RESCHED and schedule() gets
loop INIT
loop if
loop for
loop while
str :  *      called on the nearest possible occasion:
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *       - If the kernel is preemptible (CONFIG_PREEMPT=y):
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *         - in syscall or exception context, at the next outmost
loop INIT
loop if
loop for
loop while
str :  *           preempt_enable(). (this might be as soon as the wake_up()'s
loop INIT
loop if
loop for
loop while
str :  *           spin_unlock()!)
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *         - in IRQ context, return from interrupt-handler to
loop INIT
loop if
loop for
loop while
str :  *           preemptible context
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *       - If the kernel is not preemptible (CONFIG_PREEMPT is not set)
loop INIT
loop if
loop for
loop while
str :  *         then at the next:
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  *          - cond_resched() call
loop INIT
loop if
loop for
loop while
str :  *          - explicit schedule() call
loop INIT
loop if
loop for
loop while
str :  *          - return from syscall or exception to user-space
loop INIT
loop if
loop for
loop while
str :  *          - return from interrupt-handler to user-space
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void __sched __schedule(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *prev, *next;
loop INIT
loop if
loop for
loop while
str : 	unsigned long *switch_count;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 	int cpu;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : need_resched:
loop if
loop for
loop while
str : 	preempt_disable();
loop INIT
loop if
loop for
loop while
str : 	cpu = smp_processor_id();
loop INIT
loop if
loop for
loop while
str : 	rq = cpu_rq(cpu);
loop INIT
loop if
loop for
loop while
str : 	rcu_note_context_switch(cpu);
loop INIT
loop if
loop for
loop while
str : 	prev = rq->curr;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	schedule_debug(prev);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (sched_feat(HRTICK))
loop if
loop for
loop while
str : 		hrtick_clear(rq);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Make sure that signal_pending_state()->signal_pending() below
loop INIT
loop if
loop for
loop while
str : 	 * can't be reordered with __set_current_state(TASK_INTERRUPTIBLE)
loop INIT
loop if
loop for
loop while
str : 	 * done by the caller to avoid the race with signal_wake_up().
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	smp_mb__before_spinlock();
loop INIT
loop if
loop for
loop while
str : 	raw_spin_lock_irq(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	switch_count = &prev->nivcsw;
loop if
loop for
loop while
str : 	if (prev->state && !(preempt_count() & PREEMPT_ACTIVE)) {
loop INIT
loop if
loop for
loop while
str : 		if (unlikely(signal_pending_state(prev->state, prev))) {
loop INIT
loop if
loop for
loop while
str : 			prev->state = TASK_RUNNING;
loop INIT
loop if
loop for
loop while
str : 		} else {
loop INIT
loop if
loop for
loop while
str : 			deactivate_task(rq, prev, DEQUEUE_SLEEP);
loop INIT
loop if
loop for
loop while
str : 			prev->on_rq = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			/*
loop if
loop for
loop while
str : 			 * If a worker went to sleep, notify and ask workqueue
loop INIT
loop if
loop for
loop while
str : 			 * whether it wants to wake up a task to maintain
loop INIT
loop if
loop for
loop while
str : 			 * concurrency.
loop INIT
loop if
loop for
loop while
str : 			 */
loop INIT
loop if
loop for
loop while
str : 			if (prev->flags & PF_WQ_WORKER) {
loop INIT
loop if
loop for
loop while
str : 				struct task_struct *to_wakeup;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 				to_wakeup = wq_worker_sleeping(prev, cpu);
loop if
loop for
loop while
str : 				if (to_wakeup)
loop INIT
loop if
loop for
loop while
str : 					try_to_wake_up_local(to_wakeup);
loop INIT
loop if
loop for
loop while
str : 			}
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 		switch_count = &prev->nvcsw;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	pre_schedule(rq, prev);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (unlikely(!rq->nr_running))
loop if
loop for
loop while
str : 		idle_balance(cpu, rq);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	put_prev_task(rq, prev);
loop if
loop for
loop while
str : 	next = pick_next_task(rq);
loop INIT
loop if
loop for
loop while
str : 	clear_tsk_need_resched(prev);
loop INIT
loop if
loop for
loop while
str : 	clear_preempt_need_resched();
loop INIT
loop if
loop for
loop while
str : 	rq->skip_clock_update = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (likely(prev != next)) {
loop if
loop for
loop while
str : 		rq->nr_switches++;
loop INIT
loop if
loop for
loop while
str : 		rq->curr = next;
loop INIT
loop if
loop for
loop while
str : 		++*switch_count;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		context_switch(rq, prev, next); /* unlocks the rq */
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * The context switch have flipped the stack from under us
loop INIT
loop if
loop for
loop while
str : 		 * and restored the local variables which were saved when
loop INIT
loop if
loop for
loop while
str : 		 * this task called schedule() in the past. prev == current
loop INIT
loop if
loop for
loop while
str : 		 * is still correct, but it can be moved to another cpu/rq.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		cpu = smp_processor_id();
loop INIT
loop if
loop for
loop while
str : 		rq = cpu_rq(cpu);
loop INIT
loop if
loop for
loop while
str : 	} else
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock_irq(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	post_schedule(rq);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sched_preempt_enable_no_resched();
loop if
loop for
loop while
str : 	if (need_resched())
loop INIT
loop if
loop for
loop while
str : 		goto need_resched;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline void sched_submit_work(struct task_struct *tsk)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (!tsk->state || tsk_is_pi_blocked(tsk))
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * If we are going to sleep and we have plugged IO queued,
loop INIT
loop if
loop for
loop while
str : 	 * make sure to submit it to avoid deadlocks.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (blk_needs_flush_plug(tsk))
loop INIT
loop if
loop for
loop while
str : 		blk_schedule_flush_plug(tsk);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : asmlinkage void __sched schedule(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *tsk = current;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sched_submit_work(tsk);
loop if
loop for
loop while
str : 	__schedule();
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(schedule);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_CONTEXT_TRACKING
loop if
loop for
loop while
str : asmlinkage void __sched schedule_user(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * If we come here after a random call to set_need_resched(),
loop INIT
loop if
loop for
loop while
str : 	 * or we have been woken up remotely but the IPI has not yet arrived,
loop INIT
loop if
loop for
loop while
str : 	 * we haven't yet exited the RCU idle mode. Do it here manually until
loop INIT
loop if
loop for
loop while
str : 	 * we find a better solution.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	user_exit();
loop INIT
loop if
loop for
loop while
str : 	schedule();
loop INIT
loop if
loop for
loop while
str : 	user_enter();
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * schedule_preempt_disabled - called with preemption disabled
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Returns with preemption disabled. Note: preempt_count must be 1
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void __sched schedule_preempt_disabled(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	sched_preempt_enable_no_resched();
loop INIT
loop if
loop for
loop while
str : 	schedule();
loop INIT
loop if
loop for
loop while
str : 	preempt_disable();
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_PREEMPT
loop if
loop for
loop while
str : /*
loop INIT
loop if
loop for
loop while
str :  * this is the entry point to schedule() from in-kernel preemption
loop INIT
loop if
loop for
loop while
str :  * off of preempt_enable. Kernel preemptions off return from interrupt
loop INIT
loop if
loop for
loop while
str :  * occur there and call schedule directly.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : asmlinkage void __sched notrace preempt_schedule(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * If there is a non-zero preempt_count or interrupts are disabled,
loop INIT
loop if
loop for
loop while
str : 	 * we do not want to preempt the current task. Just return..
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (likely(!preemptible()))
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	do {
loop if
loop for
loop while
str : 		__preempt_count_add(PREEMPT_ACTIVE);
loop INIT
loop if
loop for
loop while
str : 		__schedule();
loop INIT
loop if
loop for
loop while
str : 		__preempt_count_sub(PREEMPT_ACTIVE);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * Check again in case we missed a preemption opportunity
loop INIT
loop if
loop for
loop while
str : 		 * between schedule and now.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		barrier();
loop INIT
loop if
loop for
loop while
str : 	} while (need_resched());
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(preempt_schedule);
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_PREEMPT */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * this is the entry point to schedule() from kernel preemption
loop INIT
loop if
loop for
loop while
str :  * off of irq context.
loop INIT
loop if
loop for
loop while
str :  * Note, that this is called and return with irqs disabled. This will
loop INIT
loop if
loop for
loop while
str :  * protect us against recursive calling from irq.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : asmlinkage void __sched preempt_schedule_irq(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	enum ctx_state prev_state;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Catch callers which need to be fixed */
loop if
loop for
loop while
str : 	BUG_ON(preempt_count() || !irqs_disabled());
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	prev_state = exception_enter();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	do {
loop if
loop for
loop while
str : 		__preempt_count_add(PREEMPT_ACTIVE);
loop INIT
loop if
loop for
loop while
str : 		local_irq_enable();
loop INIT
loop if
loop for
loop while
str : 		__schedule();
loop INIT
loop if
loop for
loop while
str : 		local_irq_disable();
loop INIT
loop if
loop for
loop while
str : 		__preempt_count_sub(PREEMPT_ACTIVE);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * Check again in case we missed a preemption opportunity
loop INIT
loop if
loop for
loop while
str : 		 * between schedule and now.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		barrier();
loop INIT
loop if
loop for
loop while
str : 	} while (need_resched());
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	exception_exit(prev_state);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : int default_wake_function(wait_queue_t *curr, unsigned mode, int wake_flags,
loop if
loop for
loop while
str : 			  void *key)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return try_to_wake_up(curr->private, mode, wake_flags);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(default_wake_function);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static long __sched
loop if
loop for
loop while
str : sleep_on_common(wait_queue_head_t *q, int state, long timeout)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	wait_queue_t wait;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	init_waitqueue_entry(&wait, current);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	__set_current_state(state);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	spin_lock_irqsave(&q->lock, flags);
loop if
loop for
loop while
str : 	__add_wait_queue(q, &wait);
loop INIT
loop if
loop for
loop while
str : 	spin_unlock(&q->lock);
loop INIT
loop if
loop for
loop while
str : 	timeout = schedule_timeout(timeout);
loop INIT
loop if
loop for
loop while
str : 	spin_lock_irq(&q->lock);
loop INIT
loop if
loop for
loop while
str : 	__remove_wait_queue(q, &wait);
loop INIT
loop if
loop for
loop while
str : 	spin_unlock_irqrestore(&q->lock, flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return timeout;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void __sched interruptible_sleep_on(wait_queue_head_t *q)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	sleep_on_common(q, TASK_INTERRUPTIBLE, MAX_SCHEDULE_TIMEOUT);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(interruptible_sleep_on);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : long __sched
loop if
loop for
loop while
str : interruptible_sleep_on_timeout(wait_queue_head_t *q, long timeout)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return sleep_on_common(q, TASK_INTERRUPTIBLE, timeout);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(interruptible_sleep_on_timeout);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void __sched sleep_on(wait_queue_head_t *q)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	sleep_on_common(q, TASK_UNINTERRUPTIBLE, MAX_SCHEDULE_TIMEOUT);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(sleep_on);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : long __sched sleep_on_timeout(wait_queue_head_t *q, long timeout)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return sleep_on_common(q, TASK_UNINTERRUPTIBLE, timeout);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(sleep_on_timeout);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_RT_MUTEXES
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * rt_mutex_setprio - set the current priority of a task
loop INIT
loop if
loop for
loop while
str :  * @p: task
loop INIT
loop if
loop for
loop while
str :  * @prio: prio value (kernel-internal form)
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * This function changes the 'effective' priority of a task. It does
loop INIT
loop if
loop for
loop while
str :  * not touch ->normal_prio like __setscheduler().
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Used by the rt_mutex code to implement priority inheritance logic.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void rt_mutex_setprio(struct task_struct *p, int prio)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int oldprio, on_rq, running, enqueue_flag = 0;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 	const struct sched_class *prev_class;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	BUG_ON(prio > MAX_PRIO);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq = __task_rq_lock(p);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Idle task boosting is a nono in general. There is one
loop INIT
loop if
loop for
loop while
str : 	 * exception, when PREEMPT_RT and NOHZ is active:
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * The idle task calls get_next_timer_interrupt() and holds
loop INIT
loop if
loop for
loop while
str : 	 * the timer wheel base->lock on the CPU and another CPU wants
loop INIT
loop if
loop for
loop while
str : 	 * to access the timer (probably to cancel it). We can safely
loop INIT
loop if
loop for
loop while
str : 	 * ignore the boosting request, as the idle CPU runs this code
loop INIT
loop if
loop for
loop while
str : 	 * with interrupts disabled and will complete the lock
loop INIT
loop if
loop for
loop while
str : 	 * protected section without being interrupted. So there is no
loop INIT
loop if
loop for
loop while
str : 	 * real need to boost.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (unlikely(p == rq->idle)) {
loop INIT
loop if
loop for
loop while
str : 		WARN_ON(p != rq->curr);
loop INIT
loop if
loop for
loop while
str : 		WARN_ON(p->pi_blocked_on);
loop INIT
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	trace_sched_pi_setprio(p, prio);
loop if
loop for
loop while
str : 	p->pi_top_task = rt_mutex_get_top_task(p);
loop INIT
loop if
loop for
loop while
str : 	oldprio = p->prio;
loop INIT
loop if
loop for
loop while
str : 	prev_class = p->sched_class;
loop INIT
loop if
loop for
loop while
str : 	on_rq = p->on_rq;
loop INIT
loop if
loop for
loop while
str : 	running = task_current(rq, p);
loop INIT
loop if
loop for
loop while
str : 	if (on_rq)
loop INIT
loop if
loop for
loop while
str : 		dequeue_task(rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 	if (running)
loop INIT
loop if
loop for
loop while
str : 		p->sched_class->put_prev_task(rq, p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Boosting condition are:
loop INIT
loop if
loop for
loop while
str : 	 * 1. -rt task is running and holds mutex A
loop INIT
loop if
loop for
loop while
str : 	 *      --> -dl task blocks on mutex A
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * 2. -dl task is running and holds mutex A
loop INIT
loop if
loop for
loop while
str : 	 *      --> -dl task blocks on mutex A and could preempt the
loop INIT
loop if
loop for
loop while
str : 	 *          running task
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (dl_prio(prio)) {
loop INIT
loop if
loop for
loop while
str : 		if (!dl_prio(p->normal_prio) || (p->pi_top_task &&
loop INIT
loop if
loop for
loop while
str : 			dl_entity_preempt(&p->pi_top_task->dl, &p->dl))) {
loop INIT
loop if
loop for
loop while
str : 			p->dl.dl_boosted = 1;
loop INIT
loop if
loop for
loop while
str : 			p->dl.dl_throttled = 0;
loop INIT
loop if
loop for
loop while
str : 			enqueue_flag = ENQUEUE_REPLENISH;
loop INIT
loop if
loop for
loop while
str : 		} else
loop INIT
loop if
loop for
loop while
str : 			p->dl.dl_boosted = 0;
loop INIT
loop if
loop for
loop while
str : 		p->sched_class = &dl_sched_class;
loop INIT
loop if
loop for
loop while
str : 	} else if (rt_prio(prio)) {
loop INIT
loop if
loop for
loop while
str : 		if (dl_prio(oldprio))
loop INIT
loop if
loop for
loop while
str : 			p->dl.dl_boosted = 0;
loop INIT
loop if
loop for
loop while
str : 		if (oldprio < prio)
loop INIT
loop if
loop for
loop while
str : 			enqueue_flag = ENQUEUE_HEAD;
loop INIT
loop if
loop for
loop while
str : 		p->sched_class = &rt_sched_class;
loop INIT
loop if
loop for
loop while
str : 	} else {
loop INIT
loop if
loop for
loop while
str : 		if (dl_prio(oldprio))
loop INIT
loop if
loop for
loop while
str : 			p->dl.dl_boosted = 0;
loop INIT
loop if
loop for
loop while
str : 		p->sched_class = &fair_sched_class;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	p->prio = prio;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (running)
loop if
loop for
loop while
str : 		p->sched_class->set_curr_task(rq);
loop INIT
loop if
loop for
loop while
str : 	if (on_rq)
loop INIT
loop if
loop for
loop while
str : 		enqueue_task(rq, p, enqueue_flag);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	check_class_changed(rq, p, prev_class, oldprio);
loop if
loop for
loop while
str : out_unlock:
loop INIT
loop if
loop for
loop while
str : 	__task_rq_unlock(rq);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void set_user_nice(struct task_struct *p, long nice)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int old_prio, delta, on_rq;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (TASK_NICE(p) == nice || nice < -20 || nice > 19)
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * We have to be careful, if called from sys_setpriority(),
loop INIT
loop if
loop for
loop while
str : 	 * the task might be in the middle of scheduling on another CPU.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	rq = task_rq_lock(p, &flags);
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * The RT priorities are set via sched_setscheduler(), but we still
loop INIT
loop if
loop for
loop while
str : 	 * allow the 'normal' nice value to be set - but as expected
loop INIT
loop if
loop for
loop while
str : 	 * it wont have any effect on scheduling until the task is
loop INIT
loop if
loop for
loop while
str : 	 * SCHED_DEADLINE, SCHED_FIFO or SCHED_RR:
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (task_has_dl_policy(p) || task_has_rt_policy(p)) {
loop INIT
loop if
loop for
loop while
str : 		p->static_prio = NICE_TO_PRIO(nice);
loop INIT
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	on_rq = p->on_rq;
loop INIT
loop if
loop for
loop while
str : 	if (on_rq)
loop INIT
loop if
loop for
loop while
str : 		dequeue_task(rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	p->static_prio = NICE_TO_PRIO(nice);
loop if
loop for
loop while
str : 	set_load_weight(p);
loop INIT
loop if
loop for
loop while
str : 	old_prio = p->prio;
loop INIT
loop if
loop for
loop while
str : 	p->prio = effective_prio(p);
loop INIT
loop if
loop for
loop while
str : 	delta = p->prio - old_prio;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (on_rq) {
loop if
loop for
loop while
str : 		enqueue_task(rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * If the task increased its priority or is running and
loop INIT
loop if
loop for
loop while
str : 		 * lowered its priority, then reschedule its CPU:
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (delta < 0 || (delta > 0 && task_running(rq, p)))
loop INIT
loop if
loop for
loop while
str : 			resched_task(rq->curr);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : out_unlock:
loop INIT
loop if
loop for
loop while
str : 	task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(set_user_nice);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * can_nice - check if a task can reduce its nice value
loop INIT
loop if
loop for
loop while
str :  * @p: task
loop INIT
loop if
loop for
loop while
str :  * @nice: nice value
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int can_nice(const struct task_struct *p, const int nice)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	/* convert nice value [19,-20] to rlimit style value [1,40] */
loop INIT
loop if
loop for
loop while
str : 	int nice_rlim = 20 - nice;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return (nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||
loop if
loop for
loop while
str : 		capable(CAP_SYS_NICE));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef __ARCH_WANT_SYS_NICE
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * sys_nice - change the priority of the current process.
loop INIT
loop if
loop for
loop while
str :  * @increment: priority increment
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * sys_setpriority is a more generic, but much slower function that
loop INIT
loop if
loop for
loop while
str :  * does similar things.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE1(nice, int, increment)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	long nice, retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Setpriority might change our priority at the same moment.
loop INIT
loop if
loop for
loop while
str : 	 * We don't have to worry. Conceptually one call occurs first
loop INIT
loop if
loop for
loop while
str : 	 * and we have a single winner.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (increment < -40)
loop INIT
loop if
loop for
loop while
str : 		increment = -40;
loop INIT
loop if
loop for
loop while
str : 	if (increment > 40)
loop INIT
loop if
loop for
loop while
str : 		increment = 40;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	nice = TASK_NICE(current) + increment;
loop if
loop for
loop while
str : 	if (nice < -20)
loop INIT
loop if
loop for
loop while
str : 		nice = -20;
loop INIT
loop if
loop for
loop while
str : 	if (nice > 19)
loop INIT
loop if
loop for
loop while
str : 		nice = 19;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (increment < 0 && !can_nice(current, nice))
loop if
loop for
loop while
str : 		return -EPERM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	retval = security_task_setnice(current, nice);
loop if
loop for
loop while
str : 	if (retval)
loop INIT
loop if
loop for
loop while
str : 		return retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	set_user_nice(current, nice);
loop if
loop for
loop while
str : 	return 0;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * task_prio - return the priority value of a given task.
loop INIT
loop if
loop for
loop while
str :  * @p: the task in question.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: The priority value as seen by users in /proc.
loop INIT
loop if
loop for
loop while
str :  * RT tasks are offset by -200. Normal tasks are centered
loop INIT
loop if
loop for
loop while
str :  * around 0, value goes from -16 to +15.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int task_prio(const struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return p->prio - MAX_RT_PRIO;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * task_nice - return the nice value of a given task.
loop INIT
loop if
loop for
loop while
str :  * @p: the task in question.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: The nice value [ -20 ... 0 ... 19 ].
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int task_nice(const struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return TASK_NICE(p);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(task_nice);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * idle_cpu - is a given cpu idle currently?
loop INIT
loop if
loop for
loop while
str :  * @cpu: the processor in question.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: 1 if the CPU is currently idle. 0 otherwise.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int idle_cpu(int cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = cpu_rq(cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (rq->curr != rq->idle)
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (rq->nr_running)
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : 	if (!llist_empty(&rq->wake_list))
loop INIT
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 1;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * idle_task - return the idle task for a given cpu.
loop INIT
loop if
loop for
loop while
str :  * @cpu: the processor in question.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: The idle task for the cpu @cpu.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : struct task_struct *idle_task(int cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return cpu_rq(cpu)->idle;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * find_process_by_pid - find a process with a matching PID value.
loop INIT
loop if
loop for
loop while
str :  * @pid: the pid in question.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * The task of @pid, if found. %NULL otherwise.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static struct task_struct *find_process_by_pid(pid_t pid)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return pid ? find_task_by_vpid(pid) : current;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * This function initializes the sched_dl_entity of a newly becoming
loop INIT
loop if
loop for
loop while
str :  * SCHED_DEADLINE task.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Only the static values are considered here, the actual runtime and the
loop INIT
loop if
loop for
loop while
str :  * absolute deadline will be properly calculated when the task is enqueued
loop INIT
loop if
loop for
loop while
str :  * for the first time with its new policy.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void
loop INIT
loop if
loop for
loop while
str : __setparam_dl(struct task_struct *p, const struct sched_attr *attr)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_dl_entity *dl_se = &p->dl;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	init_dl_task_timer(dl_se);
loop if
loop for
loop while
str : 	dl_se->dl_runtime = attr->sched_runtime;
loop INIT
loop if
loop for
loop while
str : 	dl_se->dl_deadline = attr->sched_deadline;
loop INIT
loop if
loop for
loop while
str : 	dl_se->dl_period = attr->sched_period ?: dl_se->dl_deadline;
loop INIT
loop if
loop for
loop while
str : 	dl_se->flags = attr->sched_flags;
loop INIT
loop if
loop for
loop while
str : 	dl_se->dl_bw = to_ratio(dl_se->dl_period, dl_se->dl_runtime);
loop INIT
loop if
loop for
loop while
str : 	dl_se->dl_throttled = 0;
loop INIT
loop if
loop for
loop while
str : 	dl_se->dl_new = 1;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /* Actually do priority change: must hold pi & rq lock. */
loop if
loop for
loop while
str : static void __setscheduler(struct rq *rq, struct task_struct *p,
loop INIT
loop if
loop for
loop while
str : 			   const struct sched_attr *attr)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int policy = attr->sched_policy;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (policy == -1) /* setparam */
loop if
loop for
loop while
str : 		policy = p->policy;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	p->policy = policy;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (dl_policy(policy))
loop if
loop for
loop while
str : 		__setparam_dl(p, attr);
loop INIT
loop if
loop for
loop while
str : 	else if (fair_policy(policy))
loop INIT
loop if
loop for
loop while
str : 		p->static_prio = NICE_TO_PRIO(attr->sched_nice);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * __sched_setscheduler() ensures attr->sched_priority == 0 when
loop INIT
loop if
loop for
loop while
str : 	 * !rt_policy. Always setting this ensures that things like
loop INIT
loop if
loop for
loop while
str : 	 * getparam()/getattr() don't report silly values for !rt tasks.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	p->rt_priority = attr->sched_priority;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	p->normal_prio = normal_prio(p);
loop if
loop for
loop while
str : 	p->prio = rt_mutex_getprio(p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (dl_prio(p->prio))
loop if
loop for
loop while
str : 		p->sched_class = &dl_sched_class;
loop INIT
loop if
loop for
loop while
str : 	else if (rt_prio(p->prio))
loop INIT
loop if
loop for
loop while
str : 		p->sched_class = &rt_sched_class;
loop INIT
loop if
loop for
loop while
str : 	else
loop INIT
loop if
loop for
loop while
str : 		p->sched_class = &fair_sched_class;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	set_load_weight(p);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void
loop if
loop for
loop while
str : __getparam_dl(struct task_struct *p, struct sched_attr *attr)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_dl_entity *dl_se = &p->dl;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	attr->sched_priority = p->rt_priority;
loop if
loop for
loop while
str : 	attr->sched_runtime = dl_se->dl_runtime;
loop INIT
loop if
loop for
loop while
str : 	attr->sched_deadline = dl_se->dl_deadline;
loop INIT
loop if
loop for
loop while
str : 	attr->sched_period = dl_se->dl_period;
loop INIT
loop if
loop for
loop while
str : 	attr->sched_flags = dl_se->flags;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * This function validates the new parameters of a -deadline task.
loop INIT
loop if
loop for
loop while
str :  * We ask for the deadline not being zero, and greater or equal
loop INIT
loop if
loop for
loop while
str :  * than the runtime, as well as the period of being zero or
loop INIT
loop if
loop for
loop while
str :  * greater than deadline. Furthermore, we have to be sure that
loop INIT
loop if
loop for
loop while
str :  * user parameters are above the internal resolution of 1us (we
loop INIT
loop if
loop for
loop while
str :  * check sched_runtime only since it is always the smaller one) and
loop INIT
loop if
loop for
loop while
str :  * below 2^63 ns (we have to check both sched_deadline and
loop INIT
loop if
loop for
loop while
str :  * sched_period, as the latter can be zero).
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static bool
loop INIT
loop if
loop for
loop while
str : __checkparam_dl(const struct sched_attr *attr)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	/* deadline != 0 */
loop INIT
loop if
loop for
loop while
str : 	if (attr->sched_deadline == 0)
loop INIT
loop if
loop for
loop while
str : 		return false;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Since we truncate DL_SCALE bits, make sure we're at least
loop INIT
loop if
loop for
loop while
str : 	 * that big.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (attr->sched_runtime < (1ULL << DL_SCALE))
loop INIT
loop if
loop for
loop while
str : 		return false;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Since we use the MSB for wrap-around and sign issues, make
loop INIT
loop if
loop for
loop while
str : 	 * sure it's not set (mind that period can be equal to zero).
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (attr->sched_deadline & (1ULL << 63) ||
loop INIT
loop if
loop for
loop while
str : 	    attr->sched_period & (1ULL << 63))
loop INIT
loop if
loop for
loop while
str : 		return false;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* runtime <= deadline <= period (if period != 0) */
loop if
loop for
loop while
str : 	if ((attr->sched_period != 0 &&
loop INIT
loop if
loop for
loop while
str : 	     attr->sched_period < attr->sched_deadline) ||
loop INIT
loop if
loop for
loop while
str : 	    attr->sched_deadline < attr->sched_runtime)
loop INIT
loop if
loop for
loop while
str : 		return false;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return true;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * check the target process has a UID that matches the current process's
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static bool check_same_owner(struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	const struct cred *cred = current_cred(), *pcred;
loop INIT
loop if
loop for
loop while
str : 	bool match;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_lock();
loop if
loop for
loop while
str : 	pcred = __task_cred(p);
loop INIT
loop if
loop for
loop while
str : 	match = (uid_eq(cred->euid, pcred->euid) ||
loop INIT
loop if
loop for
loop while
str : 		 uid_eq(cred->euid, pcred->uid));
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 	return match;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int __sched_setscheduler(struct task_struct *p,
loop if
loop for
loop while
str : 				const struct sched_attr *attr,
loop INIT
loop if
loop for
loop while
str : 				bool user)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int retval, oldprio, oldpolicy = -1, on_rq, running;
loop INIT
loop if
loop for
loop while
str : 	int policy = attr->sched_policy;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	const struct sched_class *prev_class;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 	int reset_on_fork;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* may grab non-irq protected spin_locks */
loop if
loop for
loop while
str : 	BUG_ON(in_interrupt());
loop INIT
loop if
loop for
loop while
str : recheck:
loop INIT
loop if
loop for
loop while
str : 	/* double check policy once rq lock held */
loop INIT
loop if
loop for
loop while
str : 	if (policy < 0) {
loop INIT
loop if
loop for
loop while
str : 		reset_on_fork = p->sched_reset_on_fork;
loop INIT
loop if
loop for
loop while
str : 		policy = oldpolicy = p->policy;
loop INIT
loop if
loop for
loop while
str : 	} else {
loop INIT
loop if
loop for
loop while
str : 		reset_on_fork = !!(attr->sched_flags & SCHED_FLAG_RESET_ON_FORK);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (policy != SCHED_DEADLINE &&
loop if
loop for
loop while
str : 				policy != SCHED_FIFO && policy != SCHED_RR &&
loop INIT
loop if
loop for
loop while
str : 				policy != SCHED_NORMAL && policy != SCHED_BATCH &&
loop INIT
loop if
loop for
loop while
str : 				policy != SCHED_IDLE)
loop INIT
loop if
loop for
loop while
str : 			return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (attr->sched_flags & ~(SCHED_FLAG_RESET_ON_FORK))
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Valid priorities for SCHED_FIFO and SCHED_RR are
loop INIT
loop if
loop for
loop while
str : 	 * 1..MAX_USER_RT_PRIO-1, valid priority for SCHED_NORMAL,
loop INIT
loop if
loop for
loop while
str : 	 * SCHED_BATCH and SCHED_IDLE is 0.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if ((p->mm && attr->sched_priority > MAX_USER_RT_PRIO-1) ||
loop INIT
loop if
loop for
loop while
str : 	    (!p->mm && attr->sched_priority > MAX_RT_PRIO-1))
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 	if ((dl_policy(policy) && !__checkparam_dl(attr)) ||
loop INIT
loop if
loop for
loop while
str : 	    (rt_policy(policy) != (attr->sched_priority != 0)))
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Allow unprivileged RT tasks to decrease priority:
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (user && !capable(CAP_SYS_NICE)) {
loop INIT
loop if
loop for
loop while
str : 		if (fair_policy(policy)) {
loop INIT
loop if
loop for
loop while
str : 			if (attr->sched_nice < TASK_NICE(p) &&
loop INIT
loop if
loop for
loop while
str : 			    !can_nice(p, attr->sched_nice))
loop INIT
loop if
loop for
loop while
str : 				return -EPERM;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (rt_policy(policy)) {
loop if
loop for
loop while
str : 			unsigned long rlim_rtprio =
loop INIT
loop if
loop for
loop while
str : 					task_rlimit(p, RLIMIT_RTPRIO);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			/* can't set/change the rt policy */
loop if
loop for
loop while
str : 			if (policy != p->policy && !rlim_rtprio)
loop INIT
loop if
loop for
loop while
str : 				return -EPERM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			/* can't increase priority */
loop if
loop for
loop while
str : 			if (attr->sched_priority > p->rt_priority &&
loop INIT
loop if
loop for
loop while
str : 			    attr->sched_priority > rlim_rtprio)
loop INIT
loop if
loop for
loop while
str : 				return -EPERM;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		 /*
loop if
loop for
loop while
str : 		  * Can't set/change SCHED_DEADLINE policy at all for now
loop INIT
loop if
loop for
loop while
str : 		  * (safest behavior); in the future we would like to allow
loop INIT
loop if
loop for
loop while
str : 		  * unprivileged DL tasks to increase their relative deadline
loop INIT
loop if
loop for
loop while
str : 		  * or reduce their runtime (both ways reducing utilization)
loop INIT
loop if
loop for
loop while
str : 		  */
loop INIT
loop if
loop for
loop while
str : 		if (dl_policy(policy))
loop INIT
loop if
loop for
loop while
str : 			return -EPERM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * Treat SCHED_IDLE as nice 20. Only allow a switch to
loop INIT
loop if
loop for
loop while
str : 		 * SCHED_NORMAL if the RLIMIT_NICE would normally permit it.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (p->policy == SCHED_IDLE && policy != SCHED_IDLE) {
loop INIT
loop if
loop for
loop while
str : 			if (!can_nice(p, TASK_NICE(p)))
loop INIT
loop if
loop for
loop while
str : 				return -EPERM;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/* can't change other user's priorities */
loop if
loop for
loop while
str : 		if (!check_same_owner(p))
loop INIT
loop if
loop for
loop while
str : 			return -EPERM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/* Normal users shall not reset the sched_reset_on_fork flag */
loop if
loop for
loop while
str : 		if (p->sched_reset_on_fork && !reset_on_fork)
loop INIT
loop if
loop for
loop while
str : 			return -EPERM;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (user) {
loop if
loop for
loop while
str : 		retval = security_task_setscheduler(p);
loop INIT
loop if
loop for
loop while
str : 		if (retval)
loop INIT
loop if
loop for
loop while
str : 			return retval;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * make sure no PI-waiters arrive (or leave) while we are
loop INIT
loop if
loop for
loop while
str : 	 * changing the priority of the task:
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * To be able to change p->policy safely, the appropriate
loop INIT
loop if
loop for
loop while
str : 	 * runqueue lock must be held.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	rq = task_rq_lock(p, &flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Changing the policy of the stop threads its a very bad idea
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (p == rq->stop) {
loop INIT
loop if
loop for
loop while
str : 		task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * If not changing anything there's no need to proceed further:
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (unlikely(policy == p->policy)) {
loop INIT
loop if
loop for
loop while
str : 		if (fair_policy(policy) && attr->sched_nice != TASK_NICE(p))
loop INIT
loop if
loop for
loop while
str : 			goto change;
loop INIT
loop if
loop for
loop while
str : 		if (rt_policy(policy) && attr->sched_priority != p->rt_priority)
loop INIT
loop if
loop for
loop while
str : 			goto change;
loop INIT
loop if
loop for
loop while
str : 		if (dl_policy(policy))
loop INIT
loop if
loop for
loop while
str : 			goto change;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		task_rq_unlock(rq, p, &flags);
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : change:
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (user) {
loop if
loop for
loop while
str : #ifdef CONFIG_RT_GROUP_SCHED
loop INIT
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * Do not allow realtime tasks into groups that have no runtime
loop INIT
loop if
loop for
loop while
str : 		 * assigned.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (rt_bandwidth_enabled() && rt_policy(policy) &&
loop INIT
loop if
loop for
loop while
str : 				task_group(p)->rt_bandwidth.rt_runtime == 0 &&
loop INIT
loop if
loop for
loop while
str : 				!task_group_is_autogroup(task_group(p))) {
loop INIT
loop if
loop for
loop while
str : 			task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : 			return -EPERM;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SMP
loop INIT
loop if
loop for
loop while
str : 		if (dl_bandwidth_enabled() && dl_policy(policy)) {
loop INIT
loop if
loop for
loop while
str : 			cpumask_t *span = rq->rd->span;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			/*
loop if
loop for
loop while
str : 			 * Don't allow tasks with an affinity mask smaller than
loop INIT
loop if
loop for
loop while
str : 			 * the entire root_domain to become SCHED_DEADLINE. We
loop INIT
loop if
loop for
loop while
str : 			 * will also fail if there's no bandwidth available.
loop INIT
loop if
loop for
loop while
str : 			 */
loop INIT
loop if
loop for
loop while
str : 			if (!cpumask_subset(span, &p->cpus_allowed) ||
loop INIT
loop if
loop for
loop while
str : 			    rq->rd->dl_bw.bw == 0) {
loop INIT
loop if
loop for
loop while
str : 				task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : 				return -EPERM;
loop INIT
loop if
loop for
loop while
str : 			}
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* recheck policy now with rq lock held */
loop if
loop for
loop while
str : 	if (unlikely(oldpolicy != -1 && oldpolicy != p->policy)) {
loop INIT
loop if
loop for
loop while
str : 		policy = oldpolicy = -1;
loop INIT
loop if
loop for
loop while
str : 		task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : 		goto recheck;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * If setscheduling to SCHED_DEADLINE (or changing the parameters
loop INIT
loop if
loop for
loop while
str : 	 * of a SCHED_DEADLINE task) we need to check if enough bandwidth
loop INIT
loop if
loop for
loop while
str : 	 * is available.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if ((dl_policy(policy) || dl_task(p)) && dl_overflow(p, policy, attr)) {
loop INIT
loop if
loop for
loop while
str : 		task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : 		return -EBUSY;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	on_rq = p->on_rq;
loop if
loop for
loop while
str : 	running = task_current(rq, p);
loop INIT
loop if
loop for
loop while
str : 	if (on_rq)
loop INIT
loop if
loop for
loop while
str : 		dequeue_task(rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 	if (running)
loop INIT
loop if
loop for
loop while
str : 		p->sched_class->put_prev_task(rq, p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	p->sched_reset_on_fork = reset_on_fork;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	oldprio = p->prio;
loop if
loop for
loop while
str : 	prev_class = p->sched_class;
loop INIT
loop if
loop for
loop while
str : 	__setscheduler(rq, p, attr);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (running)
loop if
loop for
loop while
str : 		p->sched_class->set_curr_task(rq);
loop INIT
loop if
loop for
loop while
str : 	if (on_rq)
loop INIT
loop if
loop for
loop while
str : 		enqueue_task(rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	check_class_changed(rq, p, prev_class, oldprio);
loop if
loop for
loop while
str : 	task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rt_mutex_adjust_pi(p);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int _sched_setscheduler(struct task_struct *p, int policy,
loop if
loop for
loop while
str : 			       const struct sched_param *param, bool check)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_attr attr = {
loop INIT
loop if
loop for
loop while
str : 		.sched_policy   = policy,
loop INIT
loop if
loop for
loop while
str : 		.sched_priority = param->sched_priority,
loop INIT
loop if
loop for
loop while
str : 		.sched_nice	= PRIO_TO_NICE(p->static_prio),
loop INIT
loop if
loop for
loop while
str : 	};
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Fixup the legacy SCHED_RESET_ON_FORK hack
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (policy & SCHED_RESET_ON_FORK) {
loop INIT
loop if
loop for
loop while
str : 		attr.sched_flags |= SCHED_FLAG_RESET_ON_FORK;
loop INIT
loop if
loop for
loop while
str : 		policy &= ~SCHED_RESET_ON_FORK;
loop INIT
loop if
loop for
loop while
str : 		attr.sched_policy = policy;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return __sched_setscheduler(p, &attr, check);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : /**
loop INIT
loop if
loop for
loop while
str :  * sched_setscheduler - change the scheduling policy and/or RT priority of a thread.
loop INIT
loop if
loop for
loop while
str :  * @p: the task in question.
loop INIT
loop if
loop for
loop while
str :  * @policy: new policy.
loop INIT
loop if
loop for
loop while
str :  * @param: structure containing the new RT priority.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: 0 on success. An error code otherwise.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * NOTE that the task may be already dead.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int sched_setscheduler(struct task_struct *p, int policy,
loop INIT
loop if
loop for
loop while
str : 		       const struct sched_param *param)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return _sched_setscheduler(p, policy, param, true);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL_GPL(sched_setscheduler);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : int sched_setattr(struct task_struct *p, const struct sched_attr *attr)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return __sched_setscheduler(p, attr, true);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL_GPL(sched_setattr);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sched_setscheduler_nocheck - change the scheduling policy and/or RT priority of a thread from kernelspace.
loop INIT
loop if
loop for
loop while
str :  * @p: the task in question.
loop INIT
loop if
loop for
loop while
str :  * @policy: new policy.
loop INIT
loop if
loop for
loop while
str :  * @param: structure containing the new RT priority.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Just like sched_setscheduler, only don't bother checking if the
loop INIT
loop if
loop for
loop while
str :  * current context has permission.  For example, this is needed in
loop INIT
loop if
loop for
loop while
str :  * stop_machine(): we create temporary high priority worker threads,
loop INIT
loop if
loop for
loop while
str :  * but our caller might not have that capability.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: 0 on success. An error code otherwise.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int sched_setscheduler_nocheck(struct task_struct *p, int policy,
loop INIT
loop if
loop for
loop while
str : 			       const struct sched_param *param)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return _sched_setscheduler(p, policy, param, false);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int
loop if
loop for
loop while
str : do_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_param lparam;
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *p;
loop INIT
loop if
loop for
loop while
str : 	int retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!param || pid < 0)
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 	if (copy_from_user(&lparam, param, sizeof(struct sched_param)))
loop INIT
loop if
loop for
loop while
str : 		return -EFAULT;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_lock();
loop if
loop for
loop while
str : 	retval = -ESRCH;
loop INIT
loop if
loop for
loop while
str : 	p = find_process_by_pid(pid);
loop INIT
loop if
loop for
loop while
str : 	if (p != NULL)
loop INIT
loop if
loop for
loop while
str : 		retval = sched_setscheduler(p, policy, &lparam);
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return retval;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Mimics kernel/events/core.c perf_copy_attr().
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int sched_copy_attr(struct sched_attr __user *uattr,
loop INIT
loop if
loop for
loop while
str : 			   struct sched_attr *attr)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u32 size;
loop INIT
loop if
loop for
loop while
str : 	int ret;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!access_ok(VERIFY_WRITE, uattr, SCHED_ATTR_SIZE_VER0))
loop if
loop for
loop while
str : 		return -EFAULT;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * zero the full structure, so that a short copy will be nice.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	memset(attr, 0, sizeof(*attr));
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	ret = get_user(size, &uattr->size);
loop if
loop for
loop while
str : 	if (ret)
loop INIT
loop if
loop for
loop while
str : 		return ret;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (size > PAGE_SIZE)	/* silly large */
loop if
loop for
loop while
str : 		goto err_size;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!size)		/* abi compat */
loop if
loop for
loop while
str : 		size = SCHED_ATTR_SIZE_VER0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (size < SCHED_ATTR_SIZE_VER0)
loop if
loop for
loop while
str : 		goto err_size;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * If we're handed a bigger struct than we know of,
loop INIT
loop if
loop for
loop while
str : 	 * ensure all the unknown bits are 0 - i.e. new
loop INIT
loop if
loop for
loop while
str : 	 * user-space does not rely on any kernel feature
loop INIT
loop if
loop for
loop while
str : 	 * extensions we dont know about yet.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (size > sizeof(*attr)) {
loop INIT
loop if
loop for
loop while
str : 		unsigned char __user *addr;
loop INIT
loop if
loop for
loop while
str : 		unsigned char __user *end;
loop INIT
loop if
loop for
loop while
str : 		unsigned char val;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		addr = (void __user *)uattr + sizeof(*attr);
loop if
loop for
loop while
str : 		end  = (void __user *)uattr + size;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		for (; addr < end; addr++) {
loop if
loop for
loop while
str : 			ret = get_user(val, addr);
loop INIT
loop if
loop for
loop while
str : 			if (ret)
loop INIT
loop if
loop for
loop while
str : 				return ret;
loop INIT
loop if
loop for
loop while
str : 			if (val)
loop INIT
loop if
loop for
loop while
str : 				goto err_size;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 		size = sizeof(*attr);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	ret = copy_from_user(attr, uattr, size);
loop if
loop for
loop while
str : 	if (ret)
loop INIT
loop if
loop for
loop while
str : 		return -EFAULT;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * XXX: do we want to be lenient like existing syscalls; or do we want
loop INIT
loop if
loop for
loop while
str : 	 * to be strict and return an error on out-of-bounds values?
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	attr->sched_nice = clamp(attr->sched_nice, -20, 19);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : out:
loop if
loop for
loop while
str : 	return ret;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : err_size:
loop if
loop for
loop while
str : 	put_user(sizeof(*attr), &uattr->size);
loop INIT
loop if
loop for
loop while
str : 	ret = -E2BIG;
loop INIT
loop if
loop for
loop while
str : 	goto out;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sys_sched_setscheduler - set/change the scheduler policy and RT priority
loop INIT
loop if
loop for
loop while
str :  * @pid: the pid in question.
loop INIT
loop if
loop for
loop while
str :  * @policy: new policy.
loop INIT
loop if
loop for
loop while
str :  * @param: structure containing the new RT priority.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: 0 on success. An error code otherwise.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE3(sched_setscheduler, pid_t, pid, int, policy,
loop INIT
loop if
loop for
loop while
str : 		struct sched_param __user *, param)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	/* negative values for policy are not valid */
loop INIT
loop if
loop for
loop while
str : 	if (policy < 0)
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return do_sched_setscheduler(pid, policy, param);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sys_sched_setparam - set/change the RT priority of a thread
loop INIT
loop if
loop for
loop while
str :  * @pid: the pid in question.
loop INIT
loop if
loop for
loop while
str :  * @param: structure containing the new RT priority.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: 0 on success. An error code otherwise.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE2(sched_setparam, pid_t, pid, struct sched_param __user *, param)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return do_sched_setscheduler(pid, -1, param);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sys_sched_setattr - same as above, but with extended sched_attr
loop INIT
loop if
loop for
loop while
str :  * @pid: the pid in question.
loop INIT
loop if
loop for
loop while
str :  * @uattr: structure containing the extended parameters.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE3(sched_setattr, pid_t, pid, struct sched_attr __user *, uattr,
loop INIT
loop if
loop for
loop while
str : 			       unsigned int, flags)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_attr attr;
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *p;
loop INIT
loop if
loop for
loop while
str : 	int retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!uattr || pid < 0 || flags)
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	retval = sched_copy_attr(uattr, &attr);
loop if
loop for
loop while
str : 	if (retval)
loop INIT
loop if
loop for
loop while
str : 		return retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if ((int)attr.sched_policy < 0)
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_lock();
loop if
loop for
loop while
str : 	retval = -ESRCH;
loop INIT
loop if
loop for
loop while
str : 	p = find_process_by_pid(pid);
loop INIT
loop if
loop for
loop while
str : 	if (p != NULL)
loop INIT
loop if
loop for
loop while
str : 		retval = sched_setattr(p, &attr);
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return retval;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sys_sched_getscheduler - get the policy (scheduling class) of a thread
loop INIT
loop if
loop for
loop while
str :  * @pid: the pid in question.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: On success, the policy of the thread. Otherwise, a negative error
loop INIT
loop if
loop for
loop while
str :  * code.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE1(sched_getscheduler, pid_t, pid)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *p;
loop INIT
loop if
loop for
loop while
str : 	int retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (pid < 0)
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	retval = -ESRCH;
loop if
loop for
loop while
str : 	rcu_read_lock();
loop INIT
loop if
loop for
loop while
str : 	p = find_process_by_pid(pid);
loop INIT
loop if
loop for
loop while
str : 	if (p) {
loop INIT
loop if
loop for
loop while
str : 		retval = security_task_getscheduler(p);
loop INIT
loop if
loop for
loop while
str : 		if (!retval)
loop INIT
loop if
loop for
loop while
str : 			retval = p->policy
loop INIT
loop if
loop for
loop while
str : 				| (p->sched_reset_on_fork ? SCHED_RESET_ON_FORK : 0);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 	return retval;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sys_sched_getparam - get the RT priority of a thread
loop INIT
loop if
loop for
loop while
str :  * @pid: the pid in question.
loop INIT
loop if
loop for
loop while
str :  * @param: structure containing the RT priority.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: On success, 0 and the RT priority is in @param. Otherwise, an error
loop INIT
loop if
loop for
loop while
str :  * code.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE2(sched_getparam, pid_t, pid, struct sched_param __user *, param)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_param lp = { .sched_priority = 0 };
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *p;
loop INIT
loop if
loop for
loop while
str : 	int retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!param || pid < 0)
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_lock();
loop if
loop for
loop while
str : 	p = find_process_by_pid(pid);
loop INIT
loop if
loop for
loop while
str : 	retval = -ESRCH;
loop INIT
loop if
loop for
loop while
str : 	if (!p)
loop INIT
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	retval = security_task_getscheduler(p);
loop if
loop for
loop while
str : 	if (retval)
loop INIT
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (task_has_rt_policy(p))
loop if
loop for
loop while
str : 		lp.sched_priority = p->rt_priority;
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * This one might sleep, we cannot do it with a spinlock held ...
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	retval = copy_to_user(param, &lp, sizeof(*param)) ? -EFAULT : 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return retval;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : out_unlock:
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 	return retval;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_read_attr(struct sched_attr __user *uattr,
loop if
loop for
loop while
str : 			   struct sched_attr *attr,
loop INIT
loop if
loop for
loop while
str : 			   unsigned int usize)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int ret;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!access_ok(VERIFY_WRITE, uattr, usize))
loop if
loop for
loop while
str : 		return -EFAULT;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * If we're handed a smaller struct than we know of,
loop INIT
loop if
loop for
loop while
str : 	 * ensure all the unknown bits are 0 - i.e. old
loop INIT
loop if
loop for
loop while
str : 	 * user-space does not get uncomplete information.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (usize < sizeof(*attr)) {
loop INIT
loop if
loop for
loop while
str : 		unsigned char *addr;
loop INIT
loop if
loop for
loop while
str : 		unsigned char *end;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		addr = (void *)attr + usize;
loop if
loop for
loop while
str : 		end  = (void *)attr + sizeof(*attr);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		for (; addr < end; addr++) {
loop if
loop for
loop while
str : 			if (*addr)
loop INIT
loop if
loop for
loop while
str : 				goto err_size;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		attr->size = usize;
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	ret = copy_to_user(uattr, attr, attr->size);
loop if
loop for
loop while
str : 	if (ret)
loop INIT
loop if
loop for
loop while
str : 		return -EFAULT;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : out:
loop if
loop for
loop while
str : 	return ret;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : err_size:
loop if
loop for
loop while
str : 	ret = -E2BIG;
loop INIT
loop if
loop for
loop while
str : 	goto out;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sys_sched_getattr - similar to sched_getparam, but with sched_attr
loop INIT
loop if
loop for
loop while
str :  * @pid: the pid in question.
loop INIT
loop if
loop for
loop while
str :  * @uattr: structure containing the extended parameters.
loop INIT
loop if
loop for
loop while
str :  * @size: sizeof(attr) for fwd/bwd comp.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE4(sched_getattr, pid_t, pid, struct sched_attr __user *, uattr,
loop INIT
loop if
loop for
loop while
str : 		unsigned int, size, unsigned int, flags)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_attr attr = {
loop INIT
loop if
loop for
loop while
str : 		.size = sizeof(struct sched_attr),
loop INIT
loop if
loop for
loop while
str : 	};
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *p;
loop INIT
loop if
loop for
loop while
str : 	int retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!uattr || pid < 0 || size > PAGE_SIZE ||
loop if
loop for
loop while
str : 	    size < SCHED_ATTR_SIZE_VER0 || flags)
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_lock();
loop if
loop for
loop while
str : 	p = find_process_by_pid(pid);
loop INIT
loop if
loop for
loop while
str : 	retval = -ESRCH;
loop INIT
loop if
loop for
loop while
str : 	if (!p)
loop INIT
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	retval = security_task_getscheduler(p);
loop if
loop for
loop while
str : 	if (retval)
loop INIT
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	attr.sched_policy = p->policy;
loop if
loop for
loop while
str : 	if (p->sched_reset_on_fork)
loop INIT
loop if
loop for
loop while
str : 		attr.sched_flags |= SCHED_FLAG_RESET_ON_FORK;
loop INIT
loop if
loop for
loop while
str : 	if (task_has_dl_policy(p))
loop INIT
loop if
loop for
loop while
str : 		__getparam_dl(p, &attr);
loop INIT
loop if
loop for
loop while
str : 	else if (task_has_rt_policy(p))
loop INIT
loop if
loop for
loop while
str : 		attr.sched_priority = p->rt_priority;
loop INIT
loop if
loop for
loop while
str : 	else
loop INIT
loop if
loop for
loop while
str : 		attr.sched_nice = TASK_NICE(p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_unlock();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	retval = sched_read_attr(uattr, &attr, size);
loop if
loop for
loop while
str : 	return retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : out_unlock:
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 	return retval;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : long sched_setaffinity(pid_t pid, const struct cpumask *in_mask)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	cpumask_var_t cpus_allowed, new_mask;
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *p;
loop INIT
loop if
loop for
loop while
str : 	int retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_lock();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	p = find_process_by_pid(pid);
loop if
loop for
loop while
str : 	if (!p) {
loop INIT
loop if
loop for
loop while
str : 		rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 		return -ESRCH;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Prevent p going away */
loop if
loop for
loop while
str : 	get_task_struct(p);
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (p->flags & PF_NO_SETAFFINITY) {
loop if
loop for
loop while
str : 		retval = -EINVAL;
loop INIT
loop if
loop for
loop while
str : 		goto out_put_task;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	if (!alloc_cpumask_var(&cpus_allowed, GFP_KERNEL)) {
loop INIT
loop if
loop for
loop while
str : 		retval = -ENOMEM;
loop INIT
loop if
loop for
loop while
str : 		goto out_put_task;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	if (!alloc_cpumask_var(&new_mask, GFP_KERNEL)) {
loop INIT
loop if
loop for
loop while
str : 		retval = -ENOMEM;
loop INIT
loop if
loop for
loop while
str : 		goto out_free_cpus_allowed;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	retval = -EPERM;
loop INIT
loop if
loop for
loop while
str : 	if (!check_same_owner(p)) {
loop INIT
loop if
loop for
loop while
str : 		rcu_read_lock();
loop INIT
loop if
loop for
loop while
str : 		if (!ns_capable(__task_cred(p)->user_ns, CAP_SYS_NICE)) {
loop INIT
loop if
loop for
loop while
str : 			rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 			goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 		rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	retval = security_task_setscheduler(p);
loop if
loop for
loop while
str : 	if (retval)
loop INIT
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 
list str ok : if :  
str : 	cpuset_cpus_allowed(p, cpus_allowed);
loop for
loop while
str : 	cpumask_and(new_mask, in_mask, cpus_allowed);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Since bandwidth control happens on root_domain basis,
loop INIT
loop if
loop for
loop while
str : 	 * if admission test is enabled, we only admit -deadline
loop INIT
loop if
loop for
loop while
str : 	 * tasks allowed to run on all the CPUs in the task's
loop INIT
loop if
loop for
loop while
str : 	 * root_domain.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SMP
loop INIT
loop if
loop for
loop while
str : 	if (task_has_dl_policy(p)) {
loop INIT
loop if
loop for
loop while
str : 		const struct cpumask *span = task_rq(p)->rd->span;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (dl_bandwidth_enabled() && !cpumask_subset(span, new_mask)) {
loop if
loop for
loop while
str : 			retval = -EBUSY;
loop INIT
loop if
loop for
loop while
str : 			goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : again:
loop INIT
loop if
loop for
loop while
str : 	retval = set_cpus_allowed_ptr(p, new_mask);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!retval) {
loop if
loop for
loop while
str : 		cpuset_cpus_allowed(p, cpus_allowed);
loop INIT
loop if
loop for
loop while
str : 		if (!cpumask_subset(new_mask, cpus_allowed)) {
loop INIT
loop if
loop for
loop while
str : 			/*
loop INIT
loop if
loop for
loop while
str : 			 * We must have raced with a concurrent cpuset
loop INIT
loop if
loop for
loop while
str : 			 * update. Just reset the cpus_allowed to the
loop INIT
loop if
loop for
loop while
str : 			 * cpuset's cpus_allowed
loop INIT
loop if
loop for
loop while
str : 			 */
loop INIT
loop if
loop for
loop while
str : 			cpumask_copy(new_mask, cpus_allowed);
loop INIT
loop if
loop for
loop while
str : 			goto again;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : out_unlock:
loop INIT
loop if
loop for
loop while
str : 	free_cpumask_var(new_mask);
loop INIT
loop if
loop for
loop while
str : out_free_cpus_allowed:
loop INIT
loop if
loop for
loop while
str : 	free_cpumask_var(cpus_allowed);
loop INIT
loop if
loop for
loop while
str : out_put_task:
loop INIT
loop if
loop for
loop while
str : 	put_task_struct(p);
loop INIT
loop if
loop for
loop while
str : 	return retval;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int get_user_cpu_mask(unsigned long __user *user_mask_ptr, unsigned len,
loop if
loop for
loop while
str : 			     struct cpumask *new_mask)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (len < cpumask_size())
loop INIT
loop if
loop for
loop while
str : 		cpumask_clear(new_mask);
loop INIT
loop if
loop for
loop while
str : 	else if (len > cpumask_size())
loop INIT
loop if
loop for
loop while
str : 		len = cpumask_size();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return copy_from_user(new_mask, user_mask_ptr, len) ? -EFAULT : 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sys_sched_setaffinity - set the cpu affinity of a process
loop INIT
loop if
loop for
loop while
str :  * @pid: pid of the process
loop INIT
loop if
loop for
loop while
str :  * @len: length in bytes of the bitmask pointed to by user_mask_ptr
loop INIT
loop if
loop for
loop while
str :  * @user_mask_ptr: user-space pointer to the new cpu mask
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: 0 on success. An error code otherwise.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE3(sched_setaffinity, pid_t, pid, unsigned int, len,
loop INIT
loop if
loop for
loop while
str : 		unsigned long __user *, user_mask_ptr)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	cpumask_var_t new_mask;
loop INIT
loop if
loop for
loop while
str : 	int retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!alloc_cpumask_var(&new_mask, GFP_KERNEL))
loop if
loop for
loop while
str : 		return -ENOMEM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	retval = get_user_cpu_mask(user_mask_ptr, len, new_mask);
loop if
loop for
loop while
str : 	if (retval == 0)
loop INIT
loop if
loop for
loop while
str : 		retval = sched_setaffinity(pid, new_mask);
loop INIT
loop if
loop for
loop while
str : 	free_cpumask_var(new_mask);
loop INIT
loop if
loop for
loop while
str : 	return retval;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : long sched_getaffinity(pid_t pid, struct cpumask *mask)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *p;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	int retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_lock();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	retval = -ESRCH;
loop if
loop for
loop while
str : 	p = find_process_by_pid(pid);
loop INIT
loop if
loop for
loop while
str : 	if (!p)
loop INIT
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	retval = security_task_getscheduler(p);
loop if
loop for
loop while
str : 	if (retval)
loop INIT
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock_irqsave(&p->pi_lock, flags);
loop if
loop for
loop while
str : 	cpumask_and(mask, &p->cpus_allowed, cpu_active_mask);
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : out_unlock:
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return retval;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sys_sched_getaffinity - get the cpu affinity of a process
loop INIT
loop if
loop for
loop while
str :  * @pid: pid of the process
loop INIT
loop if
loop for
loop while
str :  * @len: length in bytes of the bitmask pointed to by user_mask_ptr
loop INIT
loop if
loop for
loop while
str :  * @user_mask_ptr: user-space pointer to hold the current cpu mask
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: 0 on success. An error code otherwise.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE3(sched_getaffinity, pid_t, pid, unsigned int, len,
loop INIT
loop if
loop for
loop while
str : 		unsigned long __user *, user_mask_ptr)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int ret;
loop INIT
loop if
loop for
loop while
str : 	cpumask_var_t mask;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if ((len * BITS_PER_BYTE) < nr_cpu_ids)
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 	if (len & (sizeof(unsigned long)-1))
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!alloc_cpumask_var(&mask, GFP_KERNEL))
loop if
loop for
loop while
str : 		return -ENOMEM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	ret = sched_getaffinity(pid, mask);
loop if
loop for
loop while
str : 	if (ret == 0) {
loop INIT
loop if
loop for
loop while
str : 		size_t retlen = min_t(size_t, len, cpumask_size());
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (copy_to_user(user_mask_ptr, mask, retlen))
loop if
loop for
loop while
str : 			ret = -EFAULT;
loop INIT
loop if
loop for
loop while
str : 		else
loop INIT
loop if
loop for
loop while
str : 			ret = retlen;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	free_cpumask_var(mask);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ret;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sys_sched_yield - yield the current processor to other threads.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * This function yields the current CPU to other tasks. If there are no
loop INIT
loop if
loop for
loop while
str :  * other threads running on this CPU then this function will return.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: 0.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE0(sched_yield)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = this_rq_lock();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	schedstat_inc(rq, yld_count);
loop if
loop for
loop while
str : 	current->sched_class->yield_task(rq);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Since we are going to call schedule() anyway, there's
loop INIT
loop if
loop for
loop while
str : 	 * no need to preempt or enable interrupts:
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	__release(rq->lock);
loop INIT
loop if
loop for
loop while
str : 	spin_release(&rq->lock.dep_map, 1, _THIS_IP_);
loop INIT
loop if
loop for
loop while
str : 	do_raw_spin_unlock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 	sched_preempt_enable_no_resched();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	schedule();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void __cond_resched(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	__preempt_count_add(PREEMPT_ACTIVE);
loop INIT
loop if
loop for
loop while
str : 	__schedule();
loop INIT
loop if
loop for
loop while
str : 	__preempt_count_sub(PREEMPT_ACTIVE);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : int __sched _cond_resched(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (should_resched()) {
loop INIT
loop if
loop for
loop while
str : 		__cond_resched();
loop INIT
loop if
loop for
loop while
str : 		return 1;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	return 0;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(_cond_resched);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * __cond_resched_lock() - if a reschedule is pending, drop the given lock,
loop INIT
loop if
loop for
loop while
str :  * call schedule, and on return reacquire the lock.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * This works OK both with and without CONFIG_PREEMPT. We do strange low-level
loop INIT
loop if
loop for
loop while
str :  * operations here to prevent schedule() from being called twice (once via
loop INIT
loop if
loop for
loop while
str :  * spin_unlock(), once by hand).
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int __cond_resched_lock(spinlock_t *lock)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int resched = should_resched();
loop INIT
loop if
loop for
loop while
str : 	int ret = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	lockdep_assert_held(lock);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (spin_needbreak(lock) || resched) {
loop if
loop for
loop while
str : 		spin_unlock(lock);
loop INIT
loop if
loop for
loop while
str : 		if (resched)
loop INIT
loop if
loop for
loop while
str : 			__cond_resched();
loop INIT
loop if
loop for
loop while
str : 		else
loop INIT
loop if
loop for
loop while
str : 			cpu_relax();
loop INIT
loop if
loop for
loop while
str : 		ret = 1;
loop INIT
loop if
loop for
loop while
str : 		spin_lock(lock);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	return ret;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(__cond_resched_lock);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : int __sched __cond_resched_softirq(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	BUG_ON(!in_softirq());
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (should_resched()) {
loop if
loop for
loop while
str : 		local_bh_enable();
loop INIT
loop if
loop for
loop while
str : 		__cond_resched();
loop INIT
loop if
loop for
loop while
str : 		local_bh_disable();
loop INIT
loop if
loop for
loop while
str : 		return 1;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	return 0;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(__cond_resched_softirq);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * yield - yield the current processor to other threads.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Do not ever use this function, there's a 99% chance you're doing it wrong.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * The scheduler is at all times free to pick the calling task as the most
loop INIT
loop if
loop for
loop while
str :  * eligible task to run, if removing the yield() call from your code breaks
loop INIT
loop if
loop for
loop while
str :  * it, its already broken.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Typical broken usage is:
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * while (!event)
loop INIT
loop if
loop for
loop while
str :  * 	yield();
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * where one assumes that yield() will let 'the other' process run that will
loop INIT
loop if
loop for
loop while
str :  * make event true. If the current task is a SCHED_FIFO task that will never
loop INIT
loop if
loop for
loop while
str :  * happen. Never use yield() as a progress guarantee!!
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * If you want to use yield() to wait for something, use wait_event().
loop INIT
loop if
loop for
loop while
str :  * If you want to use yield() to be 'nice' for others, use cond_resched().
loop INIT
loop if
loop for
loop while
str :  * If you still want to use yield(), do not!
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void __sched yield(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	set_current_state(TASK_RUNNING);
loop INIT
loop if
loop for
loop while
str : 	sys_sched_yield();
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(yield);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * yield_to - yield the current processor to another thread in
loop INIT
loop if
loop for
loop while
str :  * your thread group, or accelerate that thread toward the
loop INIT
loop if
loop for
loop while
str :  * processor it's on.
loop INIT
loop if
loop for
loop while
str :  * @p: target task
loop INIT
loop if
loop for
loop while
str :  * @preempt: whether task preemption is allowed or not
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * It's the caller's job to ensure that the target task struct
loop INIT
loop if
loop for
loop while
str :  * can't go away on us before we can do any checks.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return:
loop INIT
loop if
loop for
loop while
str :  *	true (>0) if we indeed boosted the target task.
loop INIT
loop if
loop for
loop while
str :  *	false (0) if we failed to boost the target.
loop INIT
loop if
loop for
loop while
str :  *	-ESRCH if there's no task to yield to.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : bool __sched yield_to(struct task_struct *p, bool preempt)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *curr = current;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq, *p_rq;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	int yielded = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	local_irq_save(flags);
loop if
loop for
loop while
str : 	rq = this_rq();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : again:
loop if
loop for
loop while
str : 	p_rq = task_rq(p);
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * If we're the only runnable task on the rq and target rq also
loop INIT
loop if
loop for
loop while
str : 	 * has only one task, there's absolutely no point in yielding.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (rq->nr_running == 1 && p_rq->nr_running == 1) {
loop INIT
loop if
loop for
loop while
str : 		yielded = -ESRCH;
loop INIT
loop if
loop for
loop while
str : 		goto out_irq;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	double_rq_lock(rq, p_rq);
loop if
loop for
loop while
str : 	if (task_rq(p) != p_rq) {
loop INIT
loop if
loop for
loop while
str : 		double_rq_unlock(rq, p_rq);
loop INIT
loop if
loop for
loop while
str : 		goto again;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!curr->sched_class->yield_to_task)
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (curr->sched_class != p->sched_class)
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (task_running(p_rq, p) || p->state)
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	yielded = curr->sched_class->yield_to_task(rq, p, preempt);
loop if
loop for
loop while
str : 	if (yielded) {
loop INIT
loop if
loop for
loop while
str : 		schedstat_inc(rq, yld_count);
loop INIT
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * Make p's CPU reschedule; pick_next_entity takes care of
loop INIT
loop if
loop for
loop while
str : 		 * fairness.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (preempt && rq != p_rq)
loop INIT
loop if
loop for
loop while
str : 			resched_task(p_rq->curr);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : out_unlock:
loop if
loop for
loop while
str : 	double_rq_unlock(rq, p_rq);
loop INIT
loop if
loop for
loop while
str : out_irq:
loop INIT
loop if
loop for
loop while
str : 	local_irq_restore(flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (yielded > 0)
loop if
loop for
loop while
str : 		schedule();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return yielded;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL_GPL(yield_to);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * This task is about to go to sleep on IO. Increment rq->nr_iowait so
loop INIT
loop if
loop for
loop while
str :  * that process accounting knows that this is a task in IO wait state.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void __sched io_schedule(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = raw_rq();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	delayacct_blkio_start();
loop if
loop for
loop while
str : 	atomic_inc(&rq->nr_iowait);
loop INIT
loop if
loop for
loop while
str : 	blk_flush_plug(current);
loop INIT
loop if
loop for
loop while
str : 	current->in_iowait = 1;
loop INIT
loop if
loop for
loop while
str : 	schedule();
loop INIT
loop if
loop for
loop while
str : 	current->in_iowait = 0;
loop INIT
loop if
loop for
loop while
str : 	atomic_dec(&rq->nr_iowait);
loop INIT
loop if
loop for
loop while
str : 	delayacct_blkio_end();
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(io_schedule);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : long __sched io_schedule_timeout(long timeout)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = raw_rq();
loop INIT
loop if
loop for
loop while
str : 	long ret;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	delayacct_blkio_start();
loop if
loop for
loop while
str : 	atomic_inc(&rq->nr_iowait);
loop INIT
loop if
loop for
loop while
str : 	blk_flush_plug(current);
loop INIT
loop if
loop for
loop while
str : 	current->in_iowait = 1;
loop INIT
loop if
loop for
loop while
str : 	ret = schedule_timeout(timeout);
loop INIT
loop if
loop for
loop while
str : 	current->in_iowait = 0;
loop INIT
loop if
loop for
loop while
str : 	atomic_dec(&rq->nr_iowait);
loop INIT
loop if
loop for
loop while
str : 	delayacct_blkio_end();
loop INIT
loop if
loop for
loop while
str : 	return ret;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sys_sched_get_priority_max - return maximum RT priority.
loop INIT
loop if
loop for
loop while
str :  * @policy: scheduling class.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: On success, this syscall returns the maximum
loop INIT
loop if
loop for
loop while
str :  * rt_priority that can be used by a given scheduling class.
loop INIT
loop if
loop for
loop while
str :  * On failure, a negative error code is returned.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE1(sched_get_priority_max, int, policy)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int ret = -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	switch (policy) {
loop if
loop for
loop while
str : 	case SCHED_FIFO:
loop INIT
loop if
loop for
loop while
str : 	case SCHED_RR:
loop INIT
loop if
loop for
loop while
str : 		ret = MAX_USER_RT_PRIO-1;
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 	case SCHED_DEADLINE:
loop INIT
loop if
loop for
loop while
str : 	case SCHED_NORMAL:
loop INIT
loop if
loop for
loop while
str : 	case SCHED_BATCH:
loop INIT
loop if
loop for
loop while
str : 	case SCHED_IDLE:
loop INIT
loop if
loop for
loop while
str : 		ret = 0;
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	return ret;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sys_sched_get_priority_min - return minimum RT priority.
loop INIT
loop if
loop for
loop while
str :  * @policy: scheduling class.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: On success, this syscall returns the minimum
loop INIT
loop if
loop for
loop while
str :  * rt_priority that can be used by a given scheduling class.
loop INIT
loop if
loop for
loop while
str :  * On failure, a negative error code is returned.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE1(sched_get_priority_min, int, policy)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int ret = -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	switch (policy) {
loop if
loop for
loop while
str : 	case SCHED_FIFO:
loop INIT
loop if
loop for
loop while
str : 	case SCHED_RR:
loop INIT
loop if
loop for
loop while
str : 		ret = 1;
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 	case SCHED_DEADLINE:
loop INIT
loop if
loop for
loop while
str : 	case SCHED_NORMAL:
loop INIT
loop if
loop for
loop while
str : 	case SCHED_BATCH:
loop INIT
loop if
loop for
loop while
str : 	case SCHED_IDLE:
loop INIT
loop if
loop for
loop while
str : 		ret = 0;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	return ret;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * sys_sched_rr_get_interval - return the default timeslice of a process.
loop INIT
loop if
loop for
loop while
str :  * @pid: pid of the process.
loop INIT
loop if
loop for
loop while
str :  * @interval: userspace pointer to the timeslice value.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * this syscall writes the default timeslice value of a given process
loop INIT
loop if
loop for
loop while
str :  * into the user-space timespec buffer. A value of '0' means infinity.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: On success, 0 and the timeslice is in @interval. Otherwise,
loop INIT
loop if
loop for
loop while
str :  * an error code.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : SYSCALL_DEFINE2(sched_rr_get_interval, pid_t, pid,
loop INIT
loop if
loop for
loop while
str : 		struct timespec __user *, interval)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *p;
loop INIT
loop if
loop for
loop while
str : 	unsigned int time_slice;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 	int retval;
loop INIT
loop if
loop for
loop while
str : 	struct timespec t;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (pid < 0)
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	retval = -ESRCH;
loop if
loop for
loop while
str : 	rcu_read_lock();
loop INIT
loop if
loop for
loop while
str : 	p = find_process_by_pid(pid);
loop INIT
loop if
loop for
loop while
str : 	if (!p)
loop INIT
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	retval = security_task_getscheduler(p);
loop if
loop for
loop while
str : 	if (retval)
loop INIT
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq = task_rq_lock(p, &flags);
loop if
loop for
loop while
str : 	time_slice = 0;
loop INIT
loop if
loop for
loop while
str : 	if (p->sched_class->get_rr_interval)
loop INIT
loop if
loop for
loop while
str : 		time_slice = p->sched_class->get_rr_interval(rq, p);
loop INIT
loop if
loop for
loop while
str : 	task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_unlock();
loop if
loop for
loop while
str : 	jiffies_to_timespec(time_slice, &t);
loop INIT
loop if
loop for
loop while
str : 	retval = copy_to_user(interval, &t, sizeof(t)) ? -EFAULT : 0;
loop INIT
loop if
loop for
loop while
str : 	return retval;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : out_unlock:
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 	return retval;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static const char stat_nam[] = TASK_STATE_TO_CHAR_STR;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void sched_show_task(struct task_struct *p)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long free = 0;
loop INIT
loop if
loop for
loop while
str : 	int ppid;
loop INIT
loop if
loop for
loop while
str : 	unsigned state;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	state = p->state ? __ffs(p->state) + 1 : 0;
loop if
loop for
loop while
str : 	printk(KERN_INFO "%-15.15s %c", p->comm,
loop INIT
loop if
loop for
loop while
str : 		state < sizeof(stat_nam) - 1 ? stat_nam[state] : '?');
loop INIT
loop if
loop for
loop while
str : #if BITS_PER_LONG == 32
loop INIT
loop if
loop for
loop while
str : 	if (state == TASK_RUNNING)
loop INIT
loop if
loop for
loop while
str : 		printk(KERN_CONT " running  ");
loop INIT
loop if
loop for
loop while
str : 	else
loop INIT
loop if
loop for
loop while
str : 		printk(KERN_CONT " %08lx ", thread_saved_pc(p));
loop INIT
loop if
loop for
loop while
str : #else
loop INIT
loop if
loop for
loop while
str : 	if (state == TASK_RUNNING)
loop INIT
loop if
loop for
loop while
str : 		printk(KERN_CONT "  running task    ");
loop INIT
loop if
loop for
loop while
str : 	else
loop INIT
loop if
loop for
loop while
str : 		printk(KERN_CONT " %016lx ", thread_saved_pc(p));
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_DEBUG_STACK_USAGE
loop INIT
loop if
loop for
loop while
str : 	free = stack_not_used(p);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	rcu_read_lock();
loop INIT
loop if
loop for
loop while
str : 	ppid = task_pid_nr(rcu_dereference(p->real_parent));
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 	printk(KERN_CONT "%5lu %5d %6d 0x%08lx\n", free,
loop INIT
loop if
loop for
loop while
str : 		task_pid_nr(p), ppid,
loop INIT
loop if
loop for
loop while
str : 		(unsigned long)task_thread_info(p)->flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	print_worker_info(KERN_INFO, p);
loop if
loop for
loop while
str : 	show_stack(p, NULL);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void show_state_filter(unsigned long state_filter)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *g, *p;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #if BITS_PER_LONG == 32
loop if
loop for
loop while
str : 	printk(KERN_INFO
loop INIT
loop if
loop for
loop while
str : 		"  task                PC stack   pid father\n");
loop INIT
loop if
loop for
loop while
str : #else
loop INIT
loop if
loop for
loop while
str : 	printk(KERN_INFO
loop INIT
loop if
loop for
loop while
str : 		"  task                        PC stack   pid father\n");
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	rcu_read_lock();
loop INIT
loop if
loop for
loop while
str : 	do_each_thread(g, p) {
loop INIT
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * reset the NMI-timeout, listing all files on a slow
loop INIT
loop if
loop for
loop while
str : 		 * console might take a lot of time:
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		touch_nmi_watchdog();
loop INIT
loop if
loop for
loop while
str : 		if (!state_filter || (p->state & state_filter))
loop INIT
loop if
loop for
loop while
str : 			sched_show_task(p);
loop INIT
loop if
loop for
loop while
str : 	} while_each_thread(g, p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	touch_all_softlockup_watchdogs();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SCHED_DEBUG
loop if
loop for
loop while
str : 	sysrq_sched_debug_show();
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * Only show locks if all tasks are dumped:
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (!state_filter)
loop INIT
loop if
loop for
loop while
str : 		debug_show_all_locks();
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void init_idle_bootup_task(struct task_struct *idle)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	idle->sched_class = &idle_sched_class;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * init_idle - set up an idle thread for a given CPU
loop INIT
loop if
loop for
loop while
str :  * @idle: task in question
loop INIT
loop if
loop for
loop while
str :  * @cpu: cpu the idle task belongs to
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * NOTE: this function does not set the idle thread's NEED_RESCHED
loop INIT
loop if
loop for
loop while
str :  * flag, to make booting more robust.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void init_idle(struct task_struct *idle, int cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = cpu_rq(cpu);
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock_irqsave(&rq->lock, flags);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	__sched_fork(0, idle);
loop if
loop for
loop while
str : 	idle->state = TASK_RUNNING;
loop INIT
loop if
loop for
loop while
str : 	idle->se.exec_start = sched_clock();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	do_set_cpus_allowed(idle, cpumask_of(cpu));
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * We're having a chicken and egg problem, even though we are
loop INIT
loop if
loop for
loop while
str : 	 * holding rq->lock, the cpu isn't yet set to this cpu so the
loop INIT
loop if
loop for
loop while
str : 	 * lockdep check in task_group() will fail.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * Similar case to sched_fork(). / Alternatively we could
loop INIT
loop if
loop for
loop while
str : 	 * use task_rq_lock() here and obtain the other rq->lock.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * Silence PROVE_RCU
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	rcu_read_lock();
loop INIT
loop if
loop for
loop while
str : 	__set_task_cpu(idle, cpu);
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq->curr = rq->idle = idle;
loop if
loop for
loop while
str : #if defined(CONFIG_SMP)
loop INIT
loop if
loop for
loop while
str : 	idle->on_cpu = 1;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock_irqrestore(&rq->lock, flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Set the preempt count _outside_ the spinlocks! */
loop if
loop for
loop while
str : 	init_idle_preempt_count(idle, cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * The idle tasks have their own, simple scheduling class:
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	idle->sched_class = &idle_sched_class;
loop INIT
loop if
loop for
loop while
str : 	ftrace_graph_init_idle_task(idle, cpu);
loop INIT
loop if
loop for
loop while
str : 	vtime_init_idle(idle, cpu);
loop INIT
loop if
loop for
loop while
str : #if defined(CONFIG_SMP)
loop INIT
loop if
loop for
loop while
str : 	sprintf(idle->comm, "%s/%d", INIT_TASK_COMM, cpu);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (p->sched_class && p->sched_class->set_cpus_allowed)
loop INIT
loop if
loop for
loop while
str : 		p->sched_class->set_cpus_allowed(p, new_mask);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cpumask_copy(&p->cpus_allowed, new_mask);
loop if
loop for
loop while
str : 	p->nr_cpus_allowed = cpumask_weight(new_mask);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * This is how migration works:
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * 1) we invoke migration_cpu_stop() on the target CPU using
loop INIT
loop if
loop for
loop while
str :  *    stop_one_cpu().
loop INIT
loop if
loop for
loop while
str :  * 2) stopper starts to run (implicitly forcing the migrated thread
loop INIT
loop if
loop for
loop while
str :  *    off the CPU)
loop INIT
loop if
loop for
loop while
str :  * 3) it checks whether the migrated task is still in the wrong runqueue.
loop INIT
loop if
loop for
loop while
str :  * 4) if it's in the wrong runqueue then the migration thread removes
loop INIT
loop if
loop for
loop while
str :  *    it and puts it into the right queue.
loop INIT
loop if
loop for
loop while
str :  * 5) stopper completes and stop_one_cpu() returns and the migration
loop INIT
loop if
loop for
loop while
str :  *    is done.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Change a given task's CPU affinity. Migrate the thread to a
loop INIT
loop if
loop for
loop while
str :  * proper CPU and schedule it away if the CPU it's executing on
loop INIT
loop if
loop for
loop while
str :  * is removed from the allowed bitmask.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * NOTE: the caller must have a valid reference to the task, the
loop INIT
loop if
loop for
loop while
str :  * task must not exit() & deallocate itself prematurely. The
loop INIT
loop if
loop for
loop while
str :  * call is not atomic; no spinlocks may be held.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 	unsigned int dest_cpu;
loop INIT
loop if
loop for
loop while
str : 	int ret = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq = task_rq_lock(p, &flags);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (cpumask_equal(&p->cpus_allowed, new_mask))
loop if
loop for
loop while
str : 		goto out;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!cpumask_intersects(new_mask, cpu_active_mask)) {
loop if
loop for
loop while
str : 		ret = -EINVAL;
loop INIT
loop if
loop for
loop while
str : 		goto out;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	do_set_cpus_allowed(p, new_mask);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Can the task run on the task's current CPU? If so, we're done */
loop if
loop for
loop while
str : 	if (cpumask_test_cpu(task_cpu(p), new_mask))
loop INIT
loop if
loop for
loop while
str : 		goto out;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	dest_cpu = cpumask_any_and(cpu_active_mask, new_mask);
loop if
loop for
loop while
str : 	if (p->on_rq) {
loop INIT
loop if
loop for
loop while
str : 		struct migration_arg arg = { p, dest_cpu };
loop INIT
loop if
loop for
loop while
str : 		/* Need help from migration thread: drop lock and wait. */
loop INIT
loop if
loop for
loop while
str : 		task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : 		stop_one_cpu(cpu_of(rq), migration_cpu_stop, &arg);
loop INIT
loop if
loop for
loop while
str : 		tlb_migrate_finish(p->mm);
loop INIT
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : out:
loop INIT
loop if
loop for
loop while
str : 	task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ret;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL_GPL(set_cpus_allowed_ptr);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Move (not current) task off this cpu, onto dest cpu. We're doing
loop INIT
loop if
loop for
loop while
str :  * this because either it can't run here any more (set_cpus_allowed()
loop INIT
loop if
loop for
loop while
str :  * away from this CPU, or CPU going down), or because we're
loop INIT
loop if
loop for
loop while
str :  * attempting to rebalance this task on exec (sched_exec).
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * So we race with normal scheduler movements, but that's OK, as long
loop INIT
loop if
loop for
loop while
str :  * as the task is no longer on this CPU.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Returns non-zero if task was successfully migrated.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int __migrate_task(struct task_struct *p, int src_cpu, int dest_cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq_dest, *rq_src;
loop INIT
loop if
loop for
loop while
str : 	int ret = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (unlikely(!cpu_active(dest_cpu)))
loop if
loop for
loop while
str : 		return ret;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq_src = cpu_rq(src_cpu);
loop if
loop for
loop while
str : 	rq_dest = cpu_rq(dest_cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock(&p->pi_lock);
loop if
loop for
loop while
str : 	double_rq_lock(rq_src, rq_dest);
loop INIT
loop if
loop for
loop while
str : 	/* Already moved. */
loop INIT
loop if
loop for
loop while
str : 	if (task_cpu(p) != src_cpu)
loop INIT
loop if
loop for
loop while
str : 		goto done;
loop INIT
loop if
loop for
loop while
str : 	/* Affinity changed (again). */
loop INIT
loop if
loop for
loop while
str : 	if (!cpumask_test_cpu(dest_cpu, tsk_cpus_allowed(p)))
loop INIT
loop if
loop for
loop while
str : 		goto fail;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * If we're not on a rq, the next wake-up will ensure we're
loop INIT
loop if
loop for
loop while
str : 	 * placed properly.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (p->on_rq) {
loop INIT
loop if
loop for
loop while
str : 		dequeue_task(rq_src, p, 0);
loop INIT
loop if
loop for
loop while
str : 		set_task_cpu(p, dest_cpu);
loop INIT
loop if
loop for
loop while
str : 		enqueue_task(rq_dest, p, 0);
loop INIT
loop if
loop for
loop while
str : 		check_preempt_curr(rq_dest, p, 0);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : done:
loop INIT
loop if
loop for
loop while
str : 	ret = 1;
loop INIT
loop if
loop for
loop while
str : fail:
loop INIT
loop if
loop for
loop while
str : 	double_rq_unlock(rq_src, rq_dest);
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock(&p->pi_lock);
loop INIT
loop if
loop for
loop while
str : 	return ret;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_NUMA_BALANCING
loop if
loop for
loop while
str : /* Migrate current task p to target_cpu */
loop INIT
loop if
loop for
loop while
str : int migrate_task_to(struct task_struct *p, int target_cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct migration_arg arg = { p, target_cpu };
loop INIT
loop if
loop for
loop while
str : 	int curr_cpu = task_cpu(p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (curr_cpu == target_cpu)
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!cpumask_test_cpu(target_cpu, tsk_cpus_allowed(p)))
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* TODO: This is not properly updating schedstats */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	trace_sched_move_numa(p, curr_cpu, target_cpu);
loop if
loop for
loop while
str : 	return stop_one_cpu(curr_cpu, migration_cpu_stop, &arg);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Requeue a task on a given node and accurately track the number of NUMA
loop INIT
loop if
loop for
loop while
str :  * tasks on the runqueues
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void sched_setnuma(struct task_struct *p, int nid)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	bool on_rq, running;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq = task_rq_lock(p, &flags);
loop if
loop for
loop while
str : 	on_rq = p->on_rq;
loop INIT
loop if
loop for
loop while
str : 	running = task_current(rq, p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (on_rq)
loop if
loop for
loop while
str : 		dequeue_task(rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 	if (running)
loop INIT
loop if
loop for
loop while
str : 		p->sched_class->put_prev_task(rq, p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	p->numa_preferred_nid = nid;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (running)
loop if
loop for
loop while
str : 		p->sched_class->set_curr_task(rq);
loop INIT
loop if
loop for
loop while
str : 	if (on_rq)
loop INIT
loop if
loop for
loop while
str : 		enqueue_task(rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 	task_rq_unlock(rq, p, &flags);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * migration_cpu_stop - this will be executed by a highprio stopper thread
loop INIT
loop if
loop for
loop while
str :  * and performs thread migration by bumping thread off CPU then
loop INIT
loop if
loop for
loop while
str :  * 'pushing' onto another runqueue.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int migration_cpu_stop(void *data)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct migration_arg *arg = data;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * The original target cpu might have gone down and we might
loop INIT
loop if
loop for
loop while
str : 	 * be on another cpu but it doesn't matter.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	local_irq_disable();
loop INIT
loop if
loop for
loop while
str : 	__migrate_task(arg->task, raw_smp_processor_id(), arg->dest_cpu);
loop INIT
loop if
loop for
loop while
str : 	local_irq_enable();
loop INIT
loop if
loop for
loop while
str : 	return 0;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_HOTPLUG_CPU
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Ensures that the idle task is using init_mm right before its cpu goes
loop INIT
loop if
loop for
loop while
str :  * offline.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void idle_task_exit(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct mm_struct *mm = current->active_mm;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	BUG_ON(cpu_online(smp_processor_id()));
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (mm != &init_mm)
loop if
loop for
loop while
str : 		switch_mm(mm, &init_mm, current);
loop INIT
loop if
loop for
loop while
str : 	mmdrop(mm);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Since this CPU is going 'away' for a while, fold any nr_active delta
loop INIT
loop if
loop for
loop while
str :  * we might have. Assumes we're called after migrate_tasks() so that the
loop INIT
loop if
loop for
loop while
str :  * nr_active count is stable.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Also see the comment "Global load-average calculations".
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void calc_load_migrate(struct rq *rq)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	long delta = calc_load_fold_active(rq);
loop INIT
loop if
loop for
loop while
str : 	if (delta)
loop INIT
loop if
loop for
loop while
str : 		atomic_long_add(delta, &calc_load_tasks);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Migrate all tasks from the rq, sleeping tasks will be migrated by
loop INIT
loop if
loop for
loop while
str :  * try_to_wake_up()->select_task_rq().
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Called with rq->lock held even though we'er in stop_machine() and
loop INIT
loop if
loop for
loop while
str :  * there's no concurrency possible, we hold the required locks anyway
loop INIT
loop if
loop for
loop while
str :  * because of lock validation efforts.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void migrate_tasks(unsigned int dead_cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = cpu_rq(dead_cpu);
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *next, *stop = rq->stop;
loop INIT
loop if
loop for
loop while
str : 	int dest_cpu;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Fudge the rq selection such that the below task selection loop
loop INIT
loop if
loop for
loop while
str : 	 * doesn't get stuck on the currently eligible stop task.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * We're currently inside stop_machine() and the rq is either stuck
loop INIT
loop if
loop for
loop while
str : 	 * in the stop_machine_cpu_stop() loop, or we're executing this code,
loop INIT
loop if
loop for
loop while
str : 	 * either way we should never end up calling schedule() until we're
loop INIT
loop if
loop for
loop while
str : 	 * done here.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	rq->stop = NULL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * put_prev_task() and pick_next_task() sched
loop INIT
loop if
loop for
loop while
str : 	 * class method both need to have an up-to-date
loop INIT
loop if
loop for
loop while
str : 	 * value of rq->clock[_task]
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	update_rq_clock(rq);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for ( ; ; ) {
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * There's this thread running, bail when that's the only
loop INIT
loop if
loop for
loop while
str : 		 * remaining thread.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (rq->nr_running == 1)
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		next = pick_next_task(rq);
loop if
loop for
loop while
str : 		BUG_ON(!next);
loop INIT
loop if
loop for
loop while
str : 		next->sched_class->put_prev_task(rq, next);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/* Find suitable destination for @next, with force if needed. */
loop if
loop for
loop while
str : 		dest_cpu = select_fallback_rq(dead_cpu, next);
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		__migrate_task(next, dead_cpu, dest_cpu);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		raw_spin_lock(&rq->lock);
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq->stop = stop;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif /* CONFIG_HOTPLUG_CPU */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #if defined(CONFIG_SCHED_DEBUG) && defined(CONFIG_SYSCTL)
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static struct ctl_table sd_ctl_dir[] = {
loop if
loop for
loop while
str : 	{
loop INIT
loop if
loop for
loop while
str : 		.procname	= "sched_domain",
loop INIT
loop if
loop for
loop while
str : 		.mode		= 0555,
loop INIT
loop if
loop for
loop while
str : 	},
loop INIT
loop if
loop for
loop while
str : 	{}
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static struct ctl_table sd_ctl_root[] = {
loop if
loop for
loop while
str : 	{
loop INIT
loop if
loop for
loop while
str : 		.procname	= "kernel",
loop INIT
loop if
loop for
loop while
str : 		.mode		= 0555,
loop INIT
loop if
loop for
loop while
str : 		.child		= sd_ctl_dir,
loop INIT
loop if
loop for
loop while
str : 	},
loop INIT
loop if
loop for
loop while
str : 	{}
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static struct ctl_table *sd_alloc_ctl_entry(int n)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct ctl_table *entry =
loop INIT
loop if
loop for
loop while
str : 		kcalloc(n, sizeof(struct ctl_table), GFP_KERNEL);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return entry;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void sd_free_ctl_entry(struct ctl_table **tablep)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct ctl_table *entry;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * In the intermediate directories, both the child directory and
loop INIT
loop if
loop for
loop while
str : 	 * procname are dynamically allocated and could fail but the mode
loop INIT
loop if
loop for
loop while
str : 	 * will always be set. In the lowest directory the names are
loop INIT
loop if
loop for
loop while
str : 	 * static strings and all have proc handlers.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	for (entry = *tablep; entry->mode; entry++) {
loop INIT
loop if
loop for
loop while
str : 		if (entry->child)
loop INIT
loop if
loop for
loop while
str : 			sd_free_ctl_entry(&entry->child);
loop INIT
loop if
loop for
loop while
str : 		if (entry->proc_handler == NULL)
loop INIT
loop if
loop for
loop while
str : 			kfree(entry->procname);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	kfree(*tablep);
loop if
loop for
loop while
str : 	*tablep = NULL;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int min_load_idx = 0;
loop if
loop for
loop while
str : static int max_load_idx = CPU_LOAD_IDX_MAX-1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void
loop if
loop for
loop while
str : set_table_entry(struct ctl_table *entry,
loop INIT
loop if
loop for
loop while
str : 		const char *procname, void *data, int maxlen,
loop INIT
loop if
loop for
loop while
str : 		umode_t mode, proc_handler *proc_handler,
loop INIT
loop if
loop for
loop while
str : 		bool load_idx)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	entry->procname = procname;
loop INIT
loop if
loop for
loop while
str : 	entry->data = data;
loop INIT
loop if
loop for
loop while
str : 	entry->maxlen = maxlen;
loop INIT
loop if
loop for
loop while
str : 	entry->mode = mode;
loop INIT
loop if
loop for
loop while
str : 	entry->proc_handler = proc_handler;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (load_idx) {
loop if
loop for
loop while
str : 		entry->extra1 = &min_load_idx;
loop INIT
loop if
loop for
loop while
str : 		entry->extra2 = &max_load_idx;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static struct ctl_table *
loop if
loop for
loop while
str : sd_alloc_ctl_domain_table(struct sched_domain *sd)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct ctl_table *table = sd_alloc_ctl_entry(13);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (table == NULL)
loop if
loop for
loop while
str : 		return NULL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	set_table_entry(&table[0], "min_interval", &sd->min_interval,
loop if
loop for
loop while
str : 		sizeof(long), 0644, proc_doulongvec_minmax, false);
loop INIT
loop if
loop for
loop while
str : 	set_table_entry(&table[1], "max_interval", &sd->max_interval,
loop INIT
loop if
loop for
loop while
str : 		sizeof(long), 0644, proc_doulongvec_minmax, false);
loop INIT
loop if
loop for
loop while
str : 	set_table_entry(&table[2], "busy_idx", &sd->busy_idx,
loop INIT
loop if
loop for
loop while
str : 		sizeof(int), 0644, proc_dointvec_minmax, true);
loop INIT
loop if
loop for
loop while
str : 	set_table_entry(&table[3], "idle_idx", &sd->idle_idx,
loop INIT
loop if
loop for
loop while
str : 		sizeof(int), 0644, proc_dointvec_minmax, true);
loop INIT
loop if
loop for
loop while
str : 	set_table_entry(&table[4], "newidle_idx", &sd->newidle_idx,
loop INIT
loop if
loop for
loop while
str : 		sizeof(int), 0644, proc_dointvec_minmax, true);
loop INIT
loop if
loop for
loop while
str : 	set_table_entry(&table[5], "wake_idx", &sd->wake_idx,
loop INIT
loop if
loop for
loop while
str : 		sizeof(int), 0644, proc_dointvec_minmax, true);
loop INIT
loop if
loop for
loop while
str : 	set_table_entry(&table[6], "forkexec_idx", &sd->forkexec_idx,
loop INIT
loop if
loop for
loop while
str : 		sizeof(int), 0644, proc_dointvec_minmax, true);
loop INIT
loop if
loop for
loop while
str : 	set_table_entry(&table[7], "busy_factor", &sd->busy_factor,
loop INIT
loop if
loop for
loop while
str : 		sizeof(int), 0644, proc_dointvec_minmax, false);
loop INIT
loop if
loop for
loop while
str : 	set_table_entry(&table[8], "imbalance_pct", &sd->imbalance_pct,
loop INIT
loop if
loop for
loop while
str : 		sizeof(int), 0644, proc_dointvec_minmax, false);
loop INIT
loop if
loop for
loop while
str : 	set_table_entry(&table[9], "cache_nice_tries",
loop INIT
loop if
loop for
loop while
str : 		&sd->cache_nice_tries,
loop INIT
loop if
loop for
loop while
str : 		sizeof(int), 0644, proc_dointvec_minmax, false);
loop INIT
loop if
loop for
loop while
str : 	set_table_entry(&table[10], "flags", &sd->flags,
loop INIT
loop if
loop for
loop while
str : 		sizeof(int), 0644, proc_dointvec_minmax, false);
loop INIT
loop if
loop for
loop while
str : 	set_table_entry(&table[11], "name", sd->name,
loop INIT
loop if
loop for
loop while
str : 		CORENAME_MAX_SIZE, 0444, proc_dostring, false);
loop INIT
loop if
loop for
loop while
str : 	/* &table[12] is terminator */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return table;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static struct ctl_table *sd_alloc_ctl_cpu_table(int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct ctl_table *entry, *table;
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *sd;
loop INIT
loop if
loop for
loop while
str : 	int domain_num = 0, i;
loop INIT
loop if
loop for
loop while
str : 	char buf[32];
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_domain(cpu, sd)
loop if
loop for
loop while
str : 		domain_num++;
loop INIT
loop if
loop for
loop while
str : 	entry = table = sd_alloc_ctl_entry(domain_num + 1);
loop INIT
loop if
loop for
loop while
str : 	if (table == NULL)
loop INIT
loop if
loop for
loop while
str : 		return NULL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	i = 0;
loop if
loop for
loop while
str : 	for_each_domain(cpu, sd) {
loop INIT
loop if
loop for
loop while
str : 		snprintf(buf, 32, "domain%d", i);
loop INIT
loop if
loop for
loop while
str : 		entry->procname = kstrdup(buf, GFP_KERNEL);
loop INIT
loop if
loop for
loop while
str : 		entry->mode = 0555;
loop INIT
loop if
loop for
loop while
str : 		entry->child = sd_alloc_ctl_domain_table(sd);
loop INIT
loop if
loop for
loop while
str : 		entry++;
loop INIT
loop if
loop for
loop while
str : 		i++;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	return table;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static struct ctl_table_header *sd_sysctl_header;
loop if
loop for
loop while
str : static void register_sched_domain_sysctl(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i, cpu_num = num_possible_cpus();
loop INIT
loop if
loop for
loop while
str : 	struct ctl_table *entry = sd_alloc_ctl_entry(cpu_num + 1);
loop INIT
loop if
loop for
loop while
str : 	char buf[32];
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	WARN_ON(sd_ctl_dir[0].child);
loop if
loop for
loop while
str : 	sd_ctl_dir[0].child = entry;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (entry == NULL)
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_possible_cpu(i) {
loop if
loop for
loop while
str : 		snprintf(buf, 32, "cpu%d", i);
loop INIT
loop if
loop for
loop while
str : 		entry->procname = kstrdup(buf, GFP_KERNEL);
loop INIT
loop if
loop for
loop while
str : 		entry->mode = 0555;
loop INIT
loop if
loop for
loop while
str : 		entry->child = sd_alloc_ctl_cpu_table(i);
loop INIT
loop if
loop for
loop while
str : 		entry++;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	WARN_ON(sd_sysctl_header);
loop if
loop for
loop while
str : 	sd_sysctl_header = register_sysctl_table(sd_ctl_root);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /* may be called multiple times per register */
loop if
loop for
loop while
str : static void unregister_sched_domain_sysctl(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (sd_sysctl_header)
loop INIT
loop if
loop for
loop while
str : 		unregister_sysctl_table(sd_sysctl_header);
loop INIT
loop if
loop for
loop while
str : 	sd_sysctl_header = NULL;
loop INIT
loop if
loop for
loop while
str : 	if (sd_ctl_dir[0].child)
loop INIT
loop if
loop for
loop while
str : 		sd_free_ctl_entry(&sd_ctl_dir[0].child);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #else
loop INIT
loop if
loop for
loop while
str : static void register_sched_domain_sysctl(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : static void unregister_sched_domain_sysctl(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void set_rq_online(struct rq *rq)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (!rq->online) {
loop INIT
loop if
loop for
loop while
str : 		const struct sched_class *class;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		cpumask_set_cpu(rq->cpu, rq->rd->online);
loop if
loop for
loop while
str : 		rq->online = 1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		for_each_class(class) {
loop if
loop for
loop while
str : 			if (class->rq_online)
loop INIT
loop if
loop for
loop while
str : 				class->rq_online(rq);
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void set_rq_offline(struct rq *rq)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (rq->online) {
loop INIT
loop if
loop for
loop while
str : 		const struct sched_class *class;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		for_each_class(class) {
loop if
loop for
loop while
str : 			if (class->rq_offline)
loop INIT
loop if
loop for
loop while
str : 				class->rq_offline(rq);
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		cpumask_clear_cpu(rq->cpu, rq->rd->online);
loop if
loop for
loop while
str : 		rq->online = 0;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * migration_call - callback that gets triggered when a CPU is added.
loop INIT
loop if
loop for
loop while
str :  * Here we can start up the necessary migration thread for the new CPU.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int
loop INIT
loop if
loop for
loop while
str : migration_call(struct notifier_block *nfb, unsigned long action, void *hcpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int cpu = (long)hcpu;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = cpu_rq(cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	switch (action & ~CPU_TASKS_FROZEN) {
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	case CPU_UP_PREPARE:
loop if
loop for
loop while
str : 		rq->calc_load_update = calc_load_update;
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	case CPU_ONLINE:
loop if
loop for
loop while
str : 		/* Update our root-domain */
loop INIT
loop if
loop for
loop while
str : 		raw_spin_lock_irqsave(&rq->lock, flags);
loop INIT
loop if
loop for
loop while
str : 		if (rq->rd) {
loop INIT
loop if
loop for
loop while
str : 			BUG_ON(!cpumask_test_cpu(cpu, rq->rd->span));
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			set_rq_online(rq);
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock_irqrestore(&rq->lock, flags);
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_HOTPLUG_CPU
loop if
loop for
loop while
str : 	case CPU_DYING:
loop INIT
loop if
loop for
loop while
str : 		sched_ttwu_pending();
loop INIT
loop if
loop for
loop while
str : 		/* Update our root-domain */
loop INIT
loop if
loop for
loop while
str : 		raw_spin_lock_irqsave(&rq->lock, flags);
loop INIT
loop if
loop for
loop while
str : 		if (rq->rd) {
loop INIT
loop if
loop for
loop while
str : 			BUG_ON(!cpumask_test_cpu(cpu, rq->rd->span));
loop INIT
loop if
loop for
loop while
str : 			set_rq_offline(rq);
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 		migrate_tasks(cpu);
loop INIT
loop if
loop for
loop while
str : 		BUG_ON(rq->nr_running != 1); /* the migration thread */
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock_irqrestore(&rq->lock, flags);
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	case CPU_DEAD:
loop if
loop for
loop while
str : 		calc_load_migrate(rq);
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	update_max_interval();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return NOTIFY_OK;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Register at high priority so that task migration (migrate_all_tasks)
loop INIT
loop if
loop for
loop while
str :  * happens before everything else.  This has to be lower priority than
loop INIT
loop if
loop for
loop while
str :  * the notifier in the perf_event subsystem, though.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static struct notifier_block migration_notifier = {
loop INIT
loop if
loop for
loop while
str : 	.notifier_call = migration_call,
loop INIT
loop if
loop for
loop while
str : 	.priority = CPU_PRI_MIGRATION,
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_cpu_active(struct notifier_block *nfb,
loop if
loop for
loop while
str : 				      unsigned long action, void *hcpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	switch (action & ~CPU_TASKS_FROZEN) {
loop INIT
loop if
loop for
loop while
str : 	case CPU_DOWN_FAILED:
loop INIT
loop if
loop for
loop while
str : 		set_cpu_active((long)hcpu, true);
loop INIT
loop if
loop for
loop while
str : 		return NOTIFY_OK;
loop INIT
loop if
loop for
loop while
str : 	default:
loop INIT
loop if
loop for
loop while
str : 		return NOTIFY_DONE;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_cpu_inactive(struct notifier_block *nfb,
loop if
loop for
loop while
str : 					unsigned long action, void *hcpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	long cpu = (long)hcpu;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	switch (action & ~CPU_TASKS_FROZEN) {
loop if
loop for
loop while
str : 	case CPU_DOWN_PREPARE:
loop INIT
loop if
loop for
loop while
str : 		set_cpu_active(cpu, false);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/* explicitly allow suspend */
loop if
loop for
loop while
str : 		if (!(action & CPU_TASKS_FROZEN)) {
loop INIT
loop if
loop for
loop while
str : 			struct dl_bw *dl_b = dl_bw_of(cpu);
loop INIT
loop if
loop for
loop while
str : 			bool overflow;
loop INIT
loop if
loop for
loop while
str : 			int cpus;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			raw_spin_lock_irqsave(&dl_b->lock, flags);
loop if
loop for
loop while
str : 			cpus = dl_bw_cpus(cpu);
loop INIT
loop if
loop for
loop while
str : 			overflow = __dl_overflow(dl_b, cpus, 0, 0);
loop INIT
loop if
loop for
loop while
str : 			raw_spin_unlock_irqrestore(&dl_b->lock, flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			if (overflow)
loop if
loop for
loop while
str : 				return notifier_from_errno(-EBUSY);
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 		return NOTIFY_OK;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return NOTIFY_DONE;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int __init migration_init(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	void *cpu = (void *)(long)smp_processor_id();
loop INIT
loop if
loop for
loop while
str : 	int err;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Initialize migration for the boot CPU */
loop if
loop for
loop while
str : 	err = migration_call(&migration_notifier, CPU_UP_PREPARE, cpu);
loop INIT
loop if
loop for
loop while
str : 	BUG_ON(err == NOTIFY_BAD);
loop INIT
loop if
loop for
loop while
str : 	migration_call(&migration_notifier, CPU_ONLINE, cpu);
loop INIT
loop if
loop for
loop while
str : 	register_cpu_notifier(&migration_notifier);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Register cpu active notifiers */
loop if
loop for
loop while
str : 	cpu_notifier(sched_cpu_active, CPU_PRI_SCHED_ACTIVE);
loop INIT
loop if
loop for
loop while
str : 	cpu_notifier(sched_cpu_inactive, CPU_PRI_SCHED_INACTIVE);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : early_initcall(migration_init);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static cpumask_var_t sched_domains_tmpmask; /* sched_domains_mutex */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SCHED_DEBUG
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static __read_mostly int sched_debug_enabled;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int __init sched_debug_setup(char *str)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	sched_debug_enabled = 1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : early_param("sched_debug", sched_debug_setup);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline bool sched_debug(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return sched_debug_enabled;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_domain_debug_one(struct sched_domain *sd, int cpu, int level,
loop if
loop for
loop while
str : 				  struct cpumask *groupmask)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_group *group = sd->groups;
loop INIT
loop if
loop for
loop while
str : 	char str[256];
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cpulist_scnprintf(str, sizeof(str), sched_domain_span(sd));
loop if
loop for
loop while
str : 	cpumask_clear(groupmask);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	printk(KERN_DEBUG "%*s domain %d: ", level, "", level);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!(sd->flags & SD_LOAD_BALANCE)) {
loop if
loop for
loop while
str : 		printk("does not load-balance\n");
loop INIT
loop if
loop for
loop while
str : 		if (sd->parent)
loop INIT
loop if
loop for
loop while
str : 			printk(KERN_ERR "ERROR: !SD_LOAD_BALANCE domain"
loop INIT
loop if
loop for
loop while
str : 					" has parent");
loop INIT
loop if
loop for
loop while
str : 		return -1;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	printk(KERN_CONT "span %s level %s\n", str, sd->name);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!cpumask_test_cpu(cpu, sched_domain_span(sd))) {
loop if
loop for
loop while
str : 		printk(KERN_ERR "ERROR: domain->span does not contain "
loop INIT
loop if
loop for
loop while
str : 				"CPU%d\n", cpu);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	if (!cpumask_test_cpu(cpu, sched_group_cpus(group))) {
loop INIT
loop if
loop for
loop while
str : 		printk(KERN_ERR "ERROR: domain->groups does not contain"
loop INIT
loop if
loop for
loop while
str : 				" CPU%d\n", cpu);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	printk(KERN_DEBUG "%*s groups:", level + 1, "");
loop if
loop for
loop while
str : 	do {
loop INIT
loop if
loop for
loop while
str : 		if (!group) {
loop INIT
loop if
loop for
loop while
str : 			printk("\n");
loop INIT
loop if
loop for
loop while
str : 			printk(KERN_ERR "ERROR: group is NULL\n");
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * Even though we initialize ->power to something semi-sane,
loop INIT
loop if
loop for
loop while
str : 		 * we leave power_orig unset. This allows us to detect if
loop INIT
loop if
loop for
loop while
str : 		 * domain iteration is still funny without causing /0 traps.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (!group->sgp->power_orig) {
loop INIT
loop if
loop for
loop while
str : 			printk(KERN_CONT "\n");
loop INIT
loop if
loop for
loop while
str : 			printk(KERN_ERR "ERROR: domain->cpu_power not "
loop INIT
loop if
loop for
loop while
str : 					"set\n");
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (!cpumask_weight(sched_group_cpus(group))) {
loop if
loop for
loop while
str : 			printk(KERN_CONT "\n");
loop INIT
loop if
loop for
loop while
str : 			printk(KERN_ERR "ERROR: empty group\n");
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (!(sd->flags & SD_OVERLAP) &&
loop if
loop for
loop while
str : 		    cpumask_intersects(groupmask, sched_group_cpus(group))) {
loop INIT
loop if
loop for
loop while
str : 			printk(KERN_CONT "\n");
loop INIT
loop if
loop for
loop while
str : 			printk(KERN_ERR "ERROR: repeated CPUs\n");
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		cpumask_or(groupmask, groupmask, sched_group_cpus(group));
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		cpulist_scnprintf(str, sizeof(str), sched_group_cpus(group));
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		printk(KERN_CONT " %s", str);
loop if
loop for
loop while
str : 		if (group->sgp->power != SCHED_POWER_SCALE) {
loop INIT
loop if
loop for
loop while
str : 			printk(KERN_CONT " (cpu_power = %d)",
loop INIT
loop if
loop for
loop while
str : 				group->sgp->power);
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		group = group->next;
loop if
loop for
loop while
str : 	} while (group != sd->groups);
loop INIT
loop if
loop for
loop while
str : 	printk(KERN_CONT "\n");
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!cpumask_equal(sched_domain_span(sd), groupmask))
loop if
loop for
loop while
str : 		printk(KERN_ERR "ERROR: groups don't span domain->span\n");
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (sd->parent &&
loop if
loop for
loop while
str : 	    !cpumask_subset(groupmask, sched_domain_span(sd->parent)))
loop INIT
loop if
loop for
loop while
str : 		printk(KERN_ERR "ERROR: parent span is not a superset "
loop INIT
loop if
loop for
loop while
str : 			"of domain->span\n");
loop INIT
loop if
loop for
loop while
str : 	return 0;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void sched_domain_debug(struct sched_domain *sd, int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int level = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!sched_debug_enabled)
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!sd) {
loop if
loop for
loop while
str : 		printk(KERN_DEBUG "CPU%d attaching NULL sched-domain.\n", cpu);
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	printk(KERN_DEBUG "CPU%d attaching sched-domain:\n", cpu);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for (;;) {
loop if
loop for
loop while
str : 		if (sched_domain_debug_one(sd, cpu, level, sched_domains_tmpmask))
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 		level++;
loop INIT
loop if
loop for
loop while
str : 		sd = sd->parent;
loop INIT
loop if
loop for
loop while
str : 		if (!sd)
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #else /* !CONFIG_SCHED_DEBUG */
loop INIT
loop if
loop for
loop while
str : # define sched_domain_debug(sd, cpu) do { } while (0)
loop INIT
loop if
loop for
loop while
str : static inline bool sched_debug(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return false;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_SCHED_DEBUG */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sd_degenerate(struct sched_domain *sd)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (cpumask_weight(sched_domain_span(sd)) == 1)
loop INIT
loop if
loop for
loop while
str : 		return 1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Following flags need at least 2 groups */
loop if
loop for
loop while
str : 	if (sd->flags & (SD_LOAD_BALANCE |
loop INIT
loop if
loop for
loop while
str : 			 SD_BALANCE_NEWIDLE |
loop INIT
loop if
loop for
loop while
str : 			 SD_BALANCE_FORK |
loop INIT
loop if
loop for
loop while
str : 			 SD_BALANCE_EXEC |
loop INIT
loop if
loop for
loop while
str : 			 SD_SHARE_CPUPOWER |
loop INIT
loop if
loop for
loop while
str : 			 SD_SHARE_PKG_RESOURCES)) {
loop INIT
loop if
loop for
loop while
str : 		if (sd->groups != sd->groups->next)
loop INIT
loop if
loop for
loop while
str : 			return 0;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Following flags don't use groups */
loop if
loop for
loop while
str : 	if (sd->flags & (SD_WAKE_AFFINE))
loop INIT
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 1;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int
loop if
loop for
loop while
str : sd_parent_degenerate(struct sched_domain *sd, struct sched_domain *parent)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long cflags = sd->flags, pflags = parent->flags;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (sd_degenerate(parent))
loop if
loop for
loop while
str : 		return 1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!cpumask_equal(sched_domain_span(sd), sched_domain_span(parent)))
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Flags needing groups don't count if only 1 group in parent */
loop if
loop for
loop while
str : 	if (parent->groups == parent->groups->next) {
loop INIT
loop if
loop for
loop while
str : 		pflags &= ~(SD_LOAD_BALANCE |
loop INIT
loop if
loop for
loop while
str : 				SD_BALANCE_NEWIDLE |
loop INIT
loop if
loop for
loop while
str : 				SD_BALANCE_FORK |
loop INIT
loop if
loop for
loop while
str : 				SD_BALANCE_EXEC |
loop INIT
loop if
loop for
loop while
str : 				SD_SHARE_CPUPOWER |
loop INIT
loop if
loop for
loop while
str : 				SD_SHARE_PKG_RESOURCES |
loop INIT
loop if
loop for
loop while
str : 				SD_PREFER_SIBLING);
loop INIT
loop if
loop for
loop while
str : 		if (nr_node_ids == 1)
loop INIT
loop if
loop for
loop while
str : 			pflags &= ~SD_SERIALIZE;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	if (~cflags & pflags)
loop INIT
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 1;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void free_rootdomain(struct rcu_head *rcu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct root_domain *rd = container_of(rcu, struct root_domain, rcu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cpupri_cleanup(&rd->cpupri);
loop if
loop for
loop while
str : 	cpudl_cleanup(&rd->cpudl);
loop INIT
loop if
loop for
loop while
str : 	free_cpumask_var(rd->dlo_mask);
loop INIT
loop if
loop for
loop while
str : 	free_cpumask_var(rd->rto_mask);
loop INIT
loop if
loop for
loop while
str : 	free_cpumask_var(rd->online);
loop INIT
loop if
loop for
loop while
str : 	free_cpumask_var(rd->span);
loop INIT
loop if
loop for
loop while
str : 	kfree(rd);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void rq_attach_root(struct rq *rq, struct root_domain *rd)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct root_domain *old_rd = NULL;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock_irqsave(&rq->lock, flags);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (rq->rd) {
loop if
loop for
loop while
str : 		old_rd = rq->rd;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (cpumask_test_cpu(rq->cpu, old_rd->online))
loop if
loop for
loop while
str : 			set_rq_offline(rq);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		cpumask_clear_cpu(rq->cpu, old_rd->span);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * If we dont want to free the old_rd yet then
loop INIT
loop if
loop for
loop while
str : 		 * set old_rd to NULL to skip the freeing later
loop INIT
loop if
loop for
loop while
str : 		 * in this function:
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (!atomic_dec_and_test(&old_rd->refcount))
loop INIT
loop if
loop for
loop while
str : 			old_rd = NULL;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	atomic_inc(&rd->refcount);
loop if
loop for
loop while
str : 	rq->rd = rd;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cpumask_set_cpu(rq->cpu, rd->span);
loop if
loop for
loop while
str : 	if (cpumask_test_cpu(rq->cpu, cpu_active_mask))
loop INIT
loop if
loop for
loop while
str : 		set_rq_online(rq);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_unlock_irqrestore(&rq->lock, flags);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (old_rd)
loop if
loop for
loop while
str : 		call_rcu_sched(&old_rd->rcu, free_rootdomain);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int init_rootdomain(struct root_domain *rd)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	memset(rd, 0, sizeof(*rd));
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!alloc_cpumask_var(&rd->span, GFP_KERNEL))
loop if
loop for
loop while
str : 		goto out;
loop INIT
loop if
loop for
loop while
str : 	if (!alloc_cpumask_var(&rd->online, GFP_KERNEL))
loop INIT
loop if
loop for
loop while
str : 		goto free_span;
loop INIT
loop if
loop for
loop while
str : 	if (!alloc_cpumask_var(&rd->dlo_mask, GFP_KERNEL))
loop INIT
loop if
loop for
loop while
str : 		goto free_online;
loop INIT
loop if
loop for
loop while
str : 	if (!alloc_cpumask_var(&rd->rto_mask, GFP_KERNEL))
loop INIT
loop if
loop for
loop while
str : 		goto free_dlo_mask;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	init_dl_bw(&rd->dl_bw);
loop if
loop for
loop while
str : 	if (cpudl_init(&rd->cpudl) != 0)
loop INIT
loop if
loop for
loop while
str : 		goto free_dlo_mask;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (cpupri_init(&rd->cpupri) != 0)
loop if
loop for
loop while
str : 		goto free_rto_mask;
loop INIT
loop if
loop for
loop while
str : 	return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : free_rto_mask:
loop if
loop for
loop while
str : 	free_cpumask_var(rd->rto_mask);
loop INIT
loop if
loop for
loop while
str : free_dlo_mask:
loop INIT
loop if
loop for
loop while
str : 	free_cpumask_var(rd->dlo_mask);
loop INIT
loop if
loop for
loop while
str : free_online:
loop INIT
loop if
loop for
loop while
str : 	free_cpumask_var(rd->online);
loop INIT
loop if
loop for
loop while
str : free_span:
loop INIT
loop if
loop for
loop while
str : 	free_cpumask_var(rd->span);
loop INIT
loop if
loop for
loop while
str : out:
loop INIT
loop if
loop for
loop while
str : 	return -ENOMEM;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * By default the system creates a single root-domain with all cpus as
loop INIT
loop if
loop for
loop while
str :  * members (mimicking the global state we have today).
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : struct root_domain def_root_domain;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void init_defrootdomain(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	init_rootdomain(&def_root_domain);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	atomic_set(&def_root_domain.refcount, 1);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static struct root_domain *alloc_rootdomain(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct root_domain *rd;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rd = kmalloc(sizeof(*rd), GFP_KERNEL);
loop if
loop for
loop while
str : 	if (!rd)
loop INIT
loop if
loop for
loop while
str : 		return NULL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (init_rootdomain(rd) != 0) {
loop if
loop for
loop while
str : 		kfree(rd);
loop INIT
loop if
loop for
loop while
str : 		return NULL;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return rd;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void free_sched_groups(struct sched_group *sg, int free_sgp)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_group *tmp, *first;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!sg)
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	first = sg;
loop if
loop for
loop while
str : 	do {
loop INIT
loop if
loop for
loop while
str : 		tmp = sg->next;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (free_sgp && atomic_dec_and_test(&sg->sgp->ref))
loop if
loop for
loop while
str : 			kfree(sg->sgp);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		kfree(sg);
loop if
loop for
loop while
str : 		sg = tmp;
loop INIT
loop if
loop for
loop while
str : 	} while (sg != first);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void free_sched_domain(struct rcu_head *rcu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *sd = container_of(rcu, struct sched_domain, rcu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * If its an overlapping domain it has private groups, iterate and
loop INIT
loop if
loop for
loop while
str : 	 * nuke them all.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (sd->flags & SD_OVERLAP) {
loop INIT
loop if
loop for
loop while
str : 		free_sched_groups(sd->groups, 1);
loop INIT
loop if
loop for
loop while
str : 	} else if (atomic_dec_and_test(&sd->groups->ref)) {
loop INIT
loop if
loop for
loop while
str : 		kfree(sd->groups->sgp);
loop INIT
loop if
loop for
loop while
str : 		kfree(sd->groups);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	kfree(sd);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void destroy_sched_domain(struct sched_domain *sd, int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	call_rcu(&sd->rcu, free_sched_domain);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void destroy_sched_domains(struct sched_domain *sd, int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	for (; sd; sd = sd->parent)
loop INIT
loop if
loop for
loop while
str : 		destroy_sched_domain(sd, cpu);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Keep a special pointer to the highest sched_domain that has
loop INIT
loop if
loop for
loop while
str :  * SD_SHARE_PKG_RESOURCE set (Last Level Cache Domain) for this
loop INIT
loop if
loop for
loop while
str :  * allows us to avoid some pointer chasing select_idle_sibling().
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Also keep a unique ID per domain (we use the first cpu number in
loop INIT
loop if
loop for
loop while
str :  * the cpumask of the domain), this allows us to quickly tell if
loop INIT
loop if
loop for
loop while
str :  * two cpus are in the same cache domain, see cpus_share_cache().
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : DEFINE_PER_CPU(struct sched_domain *, sd_llc);
loop INIT
loop if
loop for
loop while
str : DEFINE_PER_CPU(int, sd_llc_size);
loop INIT
loop if
loop for
loop while
str : DEFINE_PER_CPU(int, sd_llc_id);
loop INIT
loop if
loop for
loop while
str : DEFINE_PER_CPU(struct sched_domain *, sd_numa);
loop INIT
loop if
loop for
loop while
str : DEFINE_PER_CPU(struct sched_domain *, sd_busy);
loop INIT
loop if
loop for
loop while
str : DEFINE_PER_CPU(struct sched_domain *, sd_asym);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void update_top_cache_domain(int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *sd;
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *busy_sd = NULL;
loop INIT
loop if
loop for
loop while
str : 	int id = cpu;
loop INIT
loop if
loop for
loop while
str : 	int size = 1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sd = highest_flag_domain(cpu, SD_SHARE_PKG_RESOURCES);
loop if
loop for
loop while
str : 	if (sd) {
loop INIT
loop if
loop for
loop while
str : 		id = cpumask_first(sched_domain_span(sd));
loop INIT
loop if
loop for
loop while
str : 		size = cpumask_weight(sched_domain_span(sd));
loop INIT
loop if
loop for
loop while
str : 		busy_sd = sd->parent; /* sd_busy */
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	rcu_assign_pointer(per_cpu(sd_busy, cpu), busy_sd);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_assign_pointer(per_cpu(sd_llc, cpu), sd);
loop if
loop for
loop while
str : 	per_cpu(sd_llc_size, cpu) = size;
loop INIT
loop if
loop for
loop while
str : 	per_cpu(sd_llc_id, cpu) = id;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sd = lowest_flag_domain(cpu, SD_NUMA);
loop if
loop for
loop while
str : 	rcu_assign_pointer(per_cpu(sd_numa, cpu), sd);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sd = highest_flag_domain(cpu, SD_ASYM_PACKING);
loop if
loop for
loop while
str : 	rcu_assign_pointer(per_cpu(sd_asym, cpu), sd);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Attach the domain 'sd' to 'cpu' as its base domain. Callers must
loop INIT
loop if
loop for
loop while
str :  * hold the hotplug lock.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void
loop INIT
loop if
loop for
loop while
str : cpu_attach_domain(struct sched_domain *sd, struct root_domain *rd, int cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq = cpu_rq(cpu);
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *tmp;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Remove the sched domains which do not contribute to scheduling. */
loop if
loop for
loop while
str : 	for (tmp = sd; tmp; ) {
loop INIT
loop if
loop for
loop while
str : 		struct sched_domain *parent = tmp->parent;
loop INIT
loop if
loop for
loop while
str : 		if (!parent)
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (sd_parent_degenerate(tmp, parent)) {
loop if
loop for
loop while
str : 			tmp->parent = parent->parent;
loop INIT
loop if
loop for
loop while
str : 			if (parent->parent)
loop INIT
loop if
loop for
loop while
str : 				parent->parent->child = tmp;
loop INIT
loop if
loop for
loop while
str : 			/*
loop INIT
loop if
loop for
loop while
str : 			 * Transfer SD_PREFER_SIBLING down in case of a
loop INIT
loop if
loop for
loop while
str : 			 * degenerate parent; the spans match for this
loop INIT
loop if
loop for
loop while
str : 			 * so the property transfers.
loop INIT
loop if
loop for
loop while
str : 			 */
loop INIT
loop if
loop for
loop while
str : 			if (parent->flags & SD_PREFER_SIBLING)
loop INIT
loop if
loop for
loop while
str : 				tmp->flags |= SD_PREFER_SIBLING;
loop INIT
loop if
loop for
loop while
str : 			destroy_sched_domain(parent, cpu);
loop INIT
loop if
loop for
loop while
str : 		} else
loop INIT
loop if
loop for
loop while
str : 			tmp = tmp->parent;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (sd && sd_degenerate(sd)) {
loop if
loop for
loop while
str : 		tmp = sd;
loop INIT
loop if
loop for
loop while
str : 		sd = sd->parent;
loop INIT
loop if
loop for
loop while
str : 		destroy_sched_domain(tmp, cpu);
loop INIT
loop if
loop for
loop while
str : 		if (sd)
loop INIT
loop if
loop for
loop while
str : 			sd->child = NULL;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sched_domain_debug(sd, cpu);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq_attach_root(rq, rd);
loop if
loop for
loop while
str : 	tmp = rq->sd;
loop INIT
loop if
loop for
loop while
str : 	rcu_assign_pointer(rq->sd, sd);
loop INIT
loop if
loop for
loop while
str : 	destroy_sched_domains(tmp, cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	update_top_cache_domain(cpu);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /* cpus with isolated domains */
loop if
loop for
loop while
str : static cpumask_var_t cpu_isolated_map;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /* Setup the mask of cpus configured for isolated domains */
loop if
loop for
loop while
str : static int __init isolated_cpu_setup(char *str)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	alloc_bootmem_cpumask_var(&cpu_isolated_map);
loop INIT
loop if
loop for
loop while
str : 	cpulist_parse(str, cpu_isolated_map);
loop INIT
loop if
loop for
loop while
str : 	return 1;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : __setup("isolcpus=", isolated_cpu_setup);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static const struct cpumask *cpu_cpu_mask(int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return cpumask_of_node(cpu_to_node(cpu));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : struct sd_data {
loop if
loop for
loop while
str : 	struct sched_domain **__percpu sd;
loop INIT
loop if
loop for
loop while
str : 	struct sched_group **__percpu sg;
loop INIT
loop if
loop for
loop while
str : 	struct sched_group_power **__percpu sgp;
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : struct s_data {
loop if
loop for
loop while
str : 	struct sched_domain ** __percpu sd;
loop INIT
loop if
loop for
loop while
str : 	struct root_domain	*rd;
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : enum s_alloc {
loop if
loop for
loop while
str : 	sa_rootdomain,
loop INIT
loop if
loop for
loop while
str : 	sa_sd,
loop INIT
loop if
loop for
loop while
str : 	sa_sd_storage,
loop INIT
loop if
loop for
loop while
str : 	sa_none,
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : struct sched_domain_topology_level;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : typedef struct sched_domain *(*sched_domain_init_f)(struct sched_domain_topology_level *tl, int cpu);
loop if
loop for
loop while
str : typedef const struct cpumask *(*sched_domain_mask_f)(int cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #define SDTL_OVERLAP	0x01
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : struct sched_domain_topology_level {
loop if
loop for
loop while
str : 	sched_domain_init_f init;
loop INIT
loop if
loop for
loop while
str : 	sched_domain_mask_f mask;
loop INIT
loop if
loop for
loop while
str : 	int		    flags;
loop INIT
loop if
loop for
loop while
str : 	int		    numa_level;
loop INIT
loop if
loop for
loop while
str : 	struct sd_data      data;
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Build an iteration mask that can exclude certain CPUs from the upwards
loop INIT
loop if
loop for
loop while
str :  * domain traversal.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Asymmetric node setups can result in situations where the domain tree is of
loop INIT
loop if
loop for
loop while
str :  * unequal depth, make sure to skip domains that already cover the entire
loop INIT
loop if
loop for
loop while
str :  * range.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * In that case build_sched_domains() will have terminated the iteration early
loop INIT
loop if
loop for
loop while
str :  * and our sibling sd spans will be empty. Domains should always include the
loop INIT
loop if
loop for
loop while
str :  * cpu they're built on, so check that.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void build_group_mask(struct sched_domain *sd, struct sched_group *sg)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	const struct cpumask *span = sched_domain_span(sd);
loop INIT
loop if
loop for
loop while
str : 	struct sd_data *sdd = sd->private;
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *sibling;
loop INIT
loop if
loop for
loop while
str : 	int i;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_cpu(i, span) {
loop if
loop for
loop while
str : 		sibling = *per_cpu_ptr(sdd->sd, i);
loop INIT
loop if
loop for
loop while
str : 		if (!cpumask_test_cpu(i, sched_domain_span(sibling)))
loop INIT
loop if
loop for
loop while
str : 			continue;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		cpumask_set_cpu(i, sched_group_mask(sg));
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Return the canonical balance cpu for this group, this is the first cpu
loop INIT
loop if
loop for
loop while
str :  * of this group that's also in the iteration mask.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int group_balance_cpu(struct sched_group *sg)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return cpumask_first_and(sched_group_cpus(sg), sched_group_mask(sg));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int
loop if
loop for
loop while
str : build_overlap_sched_groups(struct sched_domain *sd, int cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_group *first = NULL, *last = NULL, *groups = NULL, *sg;
loop INIT
loop if
loop for
loop while
str : 	const struct cpumask *span = sched_domain_span(sd);
loop INIT
loop if
loop for
loop while
str : 	struct cpumask *covered = sched_domains_tmpmask;
loop INIT
loop if
loop for
loop while
str : 	struct sd_data *sdd = sd->private;
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *child;
loop INIT
loop if
loop for
loop while
str : 	int i;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cpumask_clear(covered);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_cpu(i, span) {
loop if
loop for
loop while
str : 		struct cpumask *sg_span;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (cpumask_test_cpu(i, covered))
loop if
loop for
loop while
str : 			continue;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		child = *per_cpu_ptr(sdd->sd, i);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/* See the comment near build_group_mask(). */
loop if
loop for
loop while
str : 		if (!cpumask_test_cpu(i, sched_domain_span(child)))
loop INIT
loop if
loop for
loop while
str : 			continue;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		sg = kzalloc_node(sizeof(struct sched_group) + cpumask_size(),
loop if
loop for
loop while
str : 				GFP_KERNEL, cpu_to_node(cpu));
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (!sg)
loop if
loop for
loop while
str : 			goto fail;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		sg_span = sched_group_cpus(sg);
loop if
loop for
loop while
str : 		if (child->child) {
loop INIT
loop if
loop for
loop while
str : 			child = child->child;
loop INIT
loop if
loop for
loop while
str : 			cpumask_copy(sg_span, sched_domain_span(child));
loop INIT
loop if
loop for
loop while
str : 		} else
loop INIT
loop if
loop for
loop while
str : 			cpumask_set_cpu(i, sg_span);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		cpumask_or(covered, covered, sg_span);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		sg->sgp = *per_cpu_ptr(sdd->sgp, i);
loop if
loop for
loop while
str : 		if (atomic_inc_return(&sg->sgp->ref) == 1)
loop INIT
loop if
loop for
loop while
str : 			build_group_mask(sd, sg);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * Initialize sgp->power such that even if we mess up the
loop INIT
loop if
loop for
loop while
str : 		 * domains and no possible iteration will get us here, we won't
loop INIT
loop if
loop for
loop while
str : 		 * die on a /0 trap.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		sg->sgp->power = SCHED_POWER_SCALE * cpumask_weight(sg_span);
loop INIT
loop if
loop for
loop while
str : 		sg->sgp->power_orig = sg->sgp->power;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * Make sure the first group of this domain contains the
loop INIT
loop if
loop for
loop while
str : 		 * canonical balance cpu. Otherwise the sched_domain iteration
loop INIT
loop if
loop for
loop while
str : 		 * breaks. See update_sg_lb_stats().
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if ((!groups && cpumask_test_cpu(cpu, sg_span)) ||
loop INIT
loop if
loop for
loop while
str : 		    group_balance_cpu(sg) == cpu)
loop INIT
loop if
loop for
loop while
str : 			groups = sg;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (!first)
loop if
loop for
loop while
str : 			first = sg;
loop INIT
loop if
loop for
loop while
str : 		if (last)
loop INIT
loop if
loop for
loop while
str : 			last->next = sg;
loop INIT
loop if
loop for
loop while
str : 		last = sg;
loop INIT
loop if
loop for
loop while
str : 		last->next = first;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	sd->groups = groups;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : fail:
loop if
loop for
loop while
str : 	free_sched_groups(first, 0);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return -ENOMEM;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int get_group(int cpu, struct sd_data *sdd, struct sched_group **sg)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *sd = *per_cpu_ptr(sdd->sd, cpu);
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *child = sd->child;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (child)
loop if
loop for
loop while
str : 		cpu = cpumask_first(sched_domain_span(child));
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (sg) {
loop if
loop for
loop while
str : 		*sg = *per_cpu_ptr(sdd->sg, cpu);
loop INIT
loop if
loop for
loop while
str : 		(*sg)->sgp = *per_cpu_ptr(sdd->sgp, cpu);
loop INIT
loop if
loop for
loop while
str : 		atomic_set(&(*sg)->sgp->ref, 1); /* for claim_allocations */
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return cpu;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * build_sched_groups will build a circular linked list of the groups
loop INIT
loop if
loop for
loop while
str :  * covered by the given span, and will set each group's ->cpumask correctly,
loop INIT
loop if
loop for
loop while
str :  * and ->cpu_power to 0.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Assumes the sched_domain tree is fully constructed
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int
loop INIT
loop if
loop for
loop while
str : build_sched_groups(struct sched_domain *sd, int cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_group *first = NULL, *last = NULL;
loop INIT
loop if
loop for
loop while
str : 	struct sd_data *sdd = sd->private;
loop INIT
loop if
loop for
loop while
str : 	const struct cpumask *span = sched_domain_span(sd);
loop INIT
loop if
loop for
loop while
str : 	struct cpumask *covered;
loop INIT
loop if
loop for
loop while
str : 	int i;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	get_group(cpu, sdd, &sd->groups);
loop if
loop for
loop while
str : 	atomic_inc(&sd->groups->ref);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (cpu != cpumask_first(span))
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	lockdep_assert_held(&sched_domains_mutex);
loop if
loop for
loop while
str : 	covered = sched_domains_tmpmask;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cpumask_clear(covered);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_cpu(i, span) {
loop if
loop for
loop while
str : 		struct sched_group *sg;
loop INIT
loop if
loop for
loop while
str : 		int group, j;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (cpumask_test_cpu(i, covered))
loop if
loop for
loop while
str : 			continue;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		group = get_group(i, sdd, &sg);
loop if
loop for
loop while
str : 		cpumask_clear(sched_group_cpus(sg));
loop INIT
loop if
loop for
loop while
str : 		sg->sgp->power = 0;
loop INIT
loop if
loop for
loop while
str : 		cpumask_setall(sched_group_mask(sg));
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		for_each_cpu(j, span) {
loop if
loop for
loop while
str : 			if (get_group(j, sdd, NULL) != group)
loop INIT
loop if
loop for
loop while
str : 				continue;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			cpumask_set_cpu(j, covered);
loop if
loop for
loop while
str : 			cpumask_set_cpu(j, sched_group_cpus(sg));
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (!first)
loop if
loop for
loop while
str : 			first = sg;
loop INIT
loop if
loop for
loop while
str : 		if (last)
loop INIT
loop if
loop for
loop while
str : 			last->next = sg;
loop INIT
loop if
loop for
loop while
str : 		last = sg;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	last->next = first;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Initialize sched groups cpu_power.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * cpu_power indicates the capacity of sched group, which is used while
loop INIT
loop if
loop for
loop while
str :  * distributing the load between different sched groups in a sched domain.
loop INIT
loop if
loop for
loop while
str :  * Typically cpu_power for all the groups in a sched domain will be same unless
loop INIT
loop if
loop for
loop while
str :  * there are asymmetries in the topology. If there are asymmetries, group
loop INIT
loop if
loop for
loop while
str :  * having more cpu_power will pickup more load compared to the group having
loop INIT
loop if
loop for
loop while
str :  * less cpu_power.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void init_sched_groups_power(int cpu, struct sched_domain *sd)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_group *sg = sd->groups;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	WARN_ON(!sg);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	do {
loop if
loop for
loop while
str : 		sg->group_weight = cpumask_weight(sched_group_cpus(sg));
loop INIT
loop if
loop for
loop while
str : 		sg = sg->next;
loop INIT
loop if
loop for
loop while
str : 	} while (sg != sd->groups);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (cpu != group_balance_cpu(sg))
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	update_group_power(sd, cpu);
loop if
loop for
loop while
str : 	atomic_set(&sg->sgp->nr_busy_cpus, sg->group_weight);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : int __weak arch_sd_sibling_asym_packing(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str :        return 0*SD_ASYM_PACKING;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Initializers for schedule domains
loop INIT
loop if
loop for
loop while
str :  * Non-inlined to reduce accumulated stack pressure in build_sched_domains()
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SCHED_DEBUG
loop if
loop for
loop while
str : # define SD_INIT_NAME(sd, type)		sd->name = #type
loop INIT
loop if
loop for
loop while
str : #else
loop INIT
loop if
loop for
loop while
str : # define SD_INIT_NAME(sd, type)		do { } while (0)
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #define SD_INIT_FUNC(type)						\
loop if
loop for
loop while
str : static noinline struct sched_domain *					\
loop INIT
loop if
loop for
loop while
str : sd_init_##type(struct sched_domain_topology_level *tl, int cpu) 	\
loop INIT
loop if
loop for
loop while
str : {									\
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *sd = *per_cpu_ptr(tl->data.sd, cpu);	\
loop INIT
loop if
loop for
loop while
str : 	*sd = SD_##type##_INIT;						\
loop INIT
loop if
loop for
loop while
str : 	SD_INIT_NAME(sd, type);						\
loop INIT
loop if
loop for
loop while
str : 	sd->private = &tl->data;					\
loop INIT
loop if
loop for
loop while
str : 	return sd;							\
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : SD_INIT_FUNC(CPU)
loop if
loop for
loop while
str : #ifdef CONFIG_SCHED_SMT
loop INIT
loop if
loop for
loop while
str :  SD_INIT_FUNC(SIBLING)
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SCHED_MC
loop INIT
loop if
loop for
loop while
str :  SD_INIT_FUNC(MC)
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SCHED_BOOK
loop INIT
loop if
loop for
loop while
str :  SD_INIT_FUNC(BOOK)
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int default_relax_domain_level = -1;
loop if
loop for
loop while
str : int sched_domain_level_max;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int __init setup_relax_domain_level(char *str)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (kstrtoint(str, 0, &default_relax_domain_level))
loop INIT
loop if
loop for
loop while
str : 		pr_warn("Unable to set relax_domain_level\n");
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 1;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : __setup("relax_domain_level=", setup_relax_domain_level);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void set_domain_attribute(struct sched_domain *sd,
loop if
loop for
loop while
str : 				 struct sched_domain_attr *attr)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int request;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!attr || attr->relax_domain_level < 0) {
loop if
loop for
loop while
str : 		if (default_relax_domain_level < 0)
loop INIT
loop if
loop for
loop while
str : 			return;
loop INIT
loop if
loop for
loop while
str : 		else
loop INIT
loop if
loop for
loop while
str : 			request = default_relax_domain_level;
loop INIT
loop if
loop for
loop while
str : 	} else
loop INIT
loop if
loop for
loop while
str : 		request = attr->relax_domain_level;
loop INIT
loop if
loop for
loop while
str : 	if (request < sd->level) {
loop INIT
loop if
loop for
loop while
str : 		/* turn off idle balance on this domain */
loop INIT
loop if
loop for
loop while
str : 		sd->flags &= ~(SD_BALANCE_WAKE|SD_BALANCE_NEWIDLE);
loop INIT
loop if
loop for
loop while
str : 	} else {
loop INIT
loop if
loop for
loop while
str : 		/* turn on idle balance on this domain */
loop INIT
loop if
loop for
loop while
str : 		sd->flags |= (SD_BALANCE_WAKE|SD_BALANCE_NEWIDLE);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void __sdt_free(const struct cpumask *cpu_map);
loop if
loop for
loop while
str : static int __sdt_alloc(const struct cpumask *cpu_map);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void __free_domain_allocs(struct s_data *d, enum s_alloc what,
loop if
loop for
loop while
str : 				 const struct cpumask *cpu_map)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	switch (what) {
loop INIT
loop if
loop for
loop while
str : 	case sa_rootdomain:
loop INIT
loop if
loop for
loop while
str : 		if (!atomic_read(&d->rd->refcount))
loop INIT
loop if
loop for
loop while
str : 			free_rootdomain(&d->rd->rcu); /* fall through */
loop INIT
loop if
loop for
loop while
str : 	case sa_sd:
loop INIT
loop if
loop for
loop while
str : 		free_percpu(d->sd); /* fall through */
loop INIT
loop if
loop for
loop while
str : 	case sa_sd_storage:
loop INIT
loop if
loop for
loop while
str : 		__sdt_free(cpu_map); /* fall through */
loop INIT
loop if
loop for
loop while
str : 	case sa_none:
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static enum s_alloc __visit_domain_allocation_hell(struct s_data *d,
loop if
loop for
loop while
str : 						   const struct cpumask *cpu_map)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	memset(d, 0, sizeof(*d));
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (__sdt_alloc(cpu_map))
loop if
loop for
loop while
str : 		return sa_sd_storage;
loop INIT
loop if
loop for
loop while
str : 	d->sd = alloc_percpu(struct sched_domain *);
loop INIT
loop if
loop for
loop while
str : 	if (!d->sd)
loop INIT
loop if
loop for
loop while
str : 		return sa_sd_storage;
loop INIT
loop if
loop for
loop while
str : 	d->rd = alloc_rootdomain();
loop INIT
loop if
loop for
loop while
str : 	if (!d->rd)
loop INIT
loop if
loop for
loop while
str : 		return sa_sd;
loop INIT
loop if
loop for
loop while
str : 	return sa_rootdomain;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * NULL the sd_data elements we've used to build the sched_domain and
loop INIT
loop if
loop for
loop while
str :  * sched_group structure so that the subsequent __free_domain_allocs()
loop INIT
loop if
loop for
loop while
str :  * will not free the data we're using.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void claim_allocations(int cpu, struct sched_domain *sd)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sd_data *sdd = sd->private;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	WARN_ON_ONCE(*per_cpu_ptr(sdd->sd, cpu) != sd);
loop if
loop for
loop while
str : 	*per_cpu_ptr(sdd->sd, cpu) = NULL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (atomic_read(&(*per_cpu_ptr(sdd->sg, cpu))->ref))
loop if
loop for
loop while
str : 		*per_cpu_ptr(sdd->sg, cpu) = NULL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (atomic_read(&(*per_cpu_ptr(sdd->sgp, cpu))->ref))
loop if
loop for
loop while
str : 		*per_cpu_ptr(sdd->sgp, cpu) = NULL;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SCHED_SMT
loop if
loop for
loop while
str : static const struct cpumask *cpu_smt_mask(int cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return topology_thread_cpumask(cpu);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Topology list, bottom-up.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static struct sched_domain_topology_level default_topology[] = {
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SCHED_SMT
loop INIT
loop if
loop for
loop while
str : 	{ sd_init_SIBLING, cpu_smt_mask, },
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SCHED_MC
loop INIT
loop if
loop for
loop while
str : 	{ sd_init_MC, cpu_coregroup_mask, },
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_SCHED_BOOK
loop INIT
loop if
loop for
loop while
str : 	{ sd_init_BOOK, cpu_book_mask, },
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	{ sd_init_CPU, cpu_cpu_mask, },
loop INIT
loop if
loop for
loop while
str : 	{ NULL, },
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static struct sched_domain_topology_level *sched_domain_topology = default_topology;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #define for_each_sd_topology(tl)			\
loop if
loop for
loop while
str : 	for (tl = sched_domain_topology; tl->init; tl++)
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_NUMA
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_domains_numa_levels;
loop if
loop for
loop while
str : static int *sched_domains_numa_distance;
loop INIT
loop if
loop for
loop while
str : static struct cpumask ***sched_domains_numa_masks;
loop INIT
loop if
loop for
loop while
str : static int sched_domains_curr_level;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline int sd_local_flags(int level)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (sched_domains_numa_distance[level] > RECLAIM_DISTANCE)
loop INIT
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return SD_BALANCE_EXEC | SD_BALANCE_FORK | SD_WAKE_AFFINE;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static struct sched_domain *
loop if
loop for
loop while
str : sd_numa_init(struct sched_domain_topology_level *tl, int cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *sd = *per_cpu_ptr(tl->data.sd, cpu);
loop INIT
loop if
loop for
loop while
str : 	int level = tl->numa_level;
loop INIT
loop if
loop for
loop while
str : 	int sd_weight = cpumask_weight(
loop INIT
loop if
loop for
loop while
str : 			sched_domains_numa_masks[level][cpu_to_node(cpu)]);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	*sd = (struct sched_domain){
loop if
loop for
loop while
str : 		.min_interval		= sd_weight,
loop INIT
loop if
loop for
loop while
str : 		.max_interval		= 2*sd_weight,
loop INIT
loop if
loop for
loop while
str : 		.busy_factor		= 32,
loop INIT
loop if
loop for
loop while
str : 		.imbalance_pct		= 125,
loop INIT
loop if
loop for
loop while
str : 		.cache_nice_tries	= 2,
loop INIT
loop if
loop for
loop while
str : 		.busy_idx		= 3,
loop INIT
loop if
loop for
loop while
str : 		.idle_idx		= 2,
loop INIT
loop if
loop for
loop while
str : 		.newidle_idx		= 0,
loop INIT
loop if
loop for
loop while
str : 		.wake_idx		= 0,
loop INIT
loop if
loop for
loop while
str : 		.forkexec_idx		= 0,
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		.flags			= 1*SD_LOAD_BALANCE
loop if
loop for
loop while
str : 					| 1*SD_BALANCE_NEWIDLE
loop INIT
loop if
loop for
loop while
str : 					| 0*SD_BALANCE_EXEC
loop INIT
loop if
loop for
loop while
str : 					| 0*SD_BALANCE_FORK
loop INIT
loop if
loop for
loop while
str : 					| 0*SD_BALANCE_WAKE
loop INIT
loop if
loop for
loop while
str : 					| 0*SD_WAKE_AFFINE
loop INIT
loop if
loop for
loop while
str : 					| 0*SD_SHARE_CPUPOWER
loop INIT
loop if
loop for
loop while
str : 					| 0*SD_SHARE_PKG_RESOURCES
loop INIT
loop if
loop for
loop while
str : 					| 1*SD_SERIALIZE
loop INIT
loop if
loop for
loop while
str : 					| 0*SD_PREFER_SIBLING
loop INIT
loop if
loop for
loop while
str : 					| 1*SD_NUMA
loop INIT
loop if
loop for
loop while
str : 					| sd_local_flags(level)
loop INIT
loop if
loop for
loop while
str : 					,
loop INIT
loop if
loop for
loop while
str : 		.last_balance		= jiffies,
loop INIT
loop if
loop for
loop while
str : 		.balance_interval	= sd_weight,
loop INIT
loop if
loop for
loop while
str : 	};
loop INIT
loop if
loop for
loop while
str : 	SD_INIT_NAME(sd, NUMA);
loop INIT
loop if
loop for
loop while
str : 	sd->private = &tl->data;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Ugly hack to pass state to sd_numa_mask()...
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	sched_domains_curr_level = tl->numa_level;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return sd;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static const struct cpumask *sd_numa_mask(int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return sched_domains_numa_masks[sched_domains_curr_level][cpu_to_node(cpu)];
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void sched_numa_warn(const char *str)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	static int done = false;
loop INIT
loop if
loop for
loop while
str : 	int i,j;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (done)
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	done = true;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	printk(KERN_WARNING "ERROR: %s\n\n", str);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for (i = 0; i < nr_node_ids; i++) {
loop if
loop for
loop while
str : 		printk(KERN_WARNING "  ");
loop INIT
loop if
loop for
loop while
str : 		for (j = 0; j < nr_node_ids; j++)
loop INIT
loop if
loop for
loop while
str : 			printk(KERN_CONT "%02d ", node_distance(i,j));
loop INIT
loop if
loop for
loop while
str : 		printk(KERN_CONT "\n");
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	printk(KERN_WARNING "\n");
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static bool find_numa_distance(int distance)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (distance == node_distance(0, 0))
loop if
loop for
loop while
str : 		return true;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for (i = 0; i < sched_domains_numa_levels; i++) {
loop if
loop for
loop while
str : 		if (sched_domains_numa_distance[i] == distance)
loop INIT
loop if
loop for
loop while
str : 			return true;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return false;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void sched_init_numa(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int next_distance, curr_distance = node_distance(0, 0);
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain_topology_level *tl;
loop INIT
loop if
loop for
loop while
str : 	int level = 0;
loop INIT
loop if
loop for
loop while
str : 	int i, j, k;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sched_domains_numa_distance = kzalloc(sizeof(int) * nr_node_ids, GFP_KERNEL);
loop if
loop for
loop while
str : 	if (!sched_domains_numa_distance)
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * O(nr_nodes^2) deduplicating selection sort -- in order to find the
loop INIT
loop if
loop for
loop while
str : 	 * unique distances in the node_distance() table.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * Assumes node_distance(0,j) includes all distances in
loop INIT
loop if
loop for
loop while
str : 	 * node_distance(i,j) in order to avoid cubic time.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	next_distance = curr_distance;
loop INIT
loop if
loop for
loop while
str : 	for (i = 0; i < nr_node_ids; i++) {
loop INIT
loop if
loop for
loop while
str : 		for (j = 0; j < nr_node_ids; j++) {
loop INIT
loop if
loop for
loop while
str : 			for (k = 0; k < nr_node_ids; k++) {
loop INIT
loop if
loop for
loop while
str : 				int distance = node_distance(i, k);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 				if (distance > curr_distance &&
loop if
loop for
loop while
str : 				    (distance < next_distance ||
loop INIT
loop if
loop for
loop while
str : 				     next_distance == curr_distance))
loop INIT
loop if
loop for
loop while
str : 					next_distance = distance;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 				/*
loop if
loop for
loop while
str : 				 * While not a strong assumption it would be nice to know
loop INIT
loop if
loop for
loop while
str : 				 * about cases where if node A is connected to B, B is not
loop INIT
loop if
loop for
loop while
str : 				 * equally connected to A.
loop INIT
loop if
loop for
loop while
str : 				 */
loop INIT
loop if
loop for
loop while
str : 				if (sched_debug() && node_distance(k, i) != distance)
loop INIT
loop if
loop for
loop while
str : 					sched_numa_warn("Node-distance not symmetric");
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 				if (sched_debug() && i && !find_numa_distance(distance))
loop if
loop for
loop while
str : 					sched_numa_warn("Node-0 not representative");
loop INIT
loop if
loop for
loop while
str : 			}
loop INIT
loop if
loop for
loop while
str : 			if (next_distance != curr_distance) {
loop INIT
loop if
loop for
loop while
str : 				sched_domains_numa_distance[level++] = next_distance;
loop INIT
loop if
loop for
loop while
str : 				sched_domains_numa_levels = level;
loop INIT
loop if
loop for
loop while
str : 				curr_distance = next_distance;
loop INIT
loop if
loop for
loop while
str : 			} else break;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * In case of sched_debug() we verify the above assumption.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (!sched_debug())
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * 'level' contains the number of unique distances, excluding the
loop INIT
loop if
loop for
loop while
str : 	 * identity distance node_distance(i,i).
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * The sched_domains_numa_distance[] array includes the actual distance
loop INIT
loop if
loop for
loop while
str : 	 * numbers.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Here, we should temporarily reset sched_domains_numa_levels to 0.
loop INIT
loop if
loop for
loop while
str : 	 * If it fails to allocate memory for array sched_domains_numa_masks[][],
loop INIT
loop if
loop for
loop while
str : 	 * the array will contain less then 'level' members. This could be
loop INIT
loop if
loop for
loop while
str : 	 * dangerous when we use it to iterate array sched_domains_numa_masks[][]
loop INIT
loop if
loop for
loop while
str : 	 * in other functions.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * We reset it to 'level' at the end of this function.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	sched_domains_numa_levels = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sched_domains_numa_masks = kzalloc(sizeof(void *) * level, GFP_KERNEL);
loop if
loop for
loop while
str : 	if (!sched_domains_numa_masks)
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Now for each level, construct a mask per node which contains all
loop INIT
loop if
loop for
loop while
str : 	 * cpus of nodes that are that many hops away from us.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	for (i = 0; i < level; i++) {
loop INIT
loop if
loop for
loop while
str : 		sched_domains_numa_masks[i] =
loop INIT
loop if
loop for
loop while
str : 			kzalloc(nr_node_ids * sizeof(void *), GFP_KERNEL);
loop INIT
loop if
loop for
loop while
str : 		if (!sched_domains_numa_masks[i])
loop INIT
loop if
loop for
loop while
str : 			return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		for (j = 0; j < nr_node_ids; j++) {
loop if
loop for
loop while
str : 			struct cpumask *mask = kzalloc(cpumask_size(), GFP_KERNEL);
loop INIT
loop if
loop for
loop while
str : 			if (!mask)
loop INIT
loop if
loop for
loop while
str : 				return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			sched_domains_numa_masks[i][j] = mask;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			for (k = 0; k < nr_node_ids; k++) {
loop if
loop for
loop while
str : 				if (node_distance(j, k) > sched_domains_numa_distance[i])
loop INIT
loop if
loop for
loop while
str : 					continue;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 				cpumask_or(mask, mask, cpumask_of_node(k));
loop if
loop for
loop while
str : 			}
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	tl = kzalloc((ARRAY_SIZE(default_topology) + level) *
loop if
loop for
loop while
str : 			sizeof(struct sched_domain_topology_level), GFP_KERNEL);
loop INIT
loop if
loop for
loop while
str : 	if (!tl)
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Copy the default topology bits..
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	for (i = 0; default_topology[i].init; i++)
loop INIT
loop if
loop for
loop while
str : 		tl[i] = default_topology[i];
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * .. and append 'j' levels of NUMA goodness.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	for (j = 0; j < level; i++, j++) {
loop INIT
loop if
loop for
loop while
str : 		tl[i] = (struct sched_domain_topology_level){
loop INIT
loop if
loop for
loop while
str : 			.init = sd_numa_init,
loop INIT
loop if
loop for
loop while
str : 			.mask = sd_numa_mask,
loop INIT
loop if
loop for
loop while
str : 			.flags = SDTL_OVERLAP,
loop INIT
loop if
loop for
loop while
str : 			.numa_level = j,
loop INIT
loop if
loop for
loop while
str : 		};
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sched_domain_topology = tl;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sched_domains_numa_levels = level;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void sched_domains_numa_masks_set(int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i, j;
loop INIT
loop if
loop for
loop while
str : 	int node = cpu_to_node(cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for (i = 0; i < sched_domains_numa_levels; i++) {
loop if
loop for
loop while
str : 		for (j = 0; j < nr_node_ids; j++) {
loop INIT
loop if
loop for
loop while
str : 			if (node_distance(j, node) <= sched_domains_numa_distance[i])
loop INIT
loop if
loop for
loop while
str : 				cpumask_set_cpu(cpu, sched_domains_numa_masks[i][j]);
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void sched_domains_numa_masks_clear(int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i, j;
loop INIT
loop if
loop for
loop while
str : 	for (i = 0; i < sched_domains_numa_levels; i++) {
loop INIT
loop if
loop for
loop while
str : 		for (j = 0; j < nr_node_ids; j++)
loop INIT
loop if
loop for
loop while
str : 			cpumask_clear_cpu(cpu, sched_domains_numa_masks[i][j]);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Update sched_domains_numa_masks[level][node] array when new cpus
loop INIT
loop if
loop for
loop while
str :  * are onlined.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int sched_domains_numa_masks_update(struct notifier_block *nfb,
loop INIT
loop if
loop for
loop while
str : 					   unsigned long action,
loop INIT
loop if
loop for
loop while
str : 					   void *hcpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int cpu = (long)hcpu;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	switch (action & ~CPU_TASKS_FROZEN) {
loop if
loop for
loop while
str : 	case CPU_ONLINE:
loop INIT
loop if
loop for
loop while
str : 		sched_domains_numa_masks_set(cpu);
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	case CPU_DEAD:
loop if
loop for
loop while
str : 		sched_domains_numa_masks_clear(cpu);
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	default:
loop if
loop for
loop while
str : 		return NOTIFY_DONE;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return NOTIFY_OK;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #else
loop INIT
loop if
loop for
loop while
str : static inline void sched_init_numa(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_domains_numa_masks_update(struct notifier_block *nfb,
loop if
loop for
loop while
str : 					   unsigned long action,
loop INIT
loop if
loop for
loop while
str : 					   void *hcpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return 0;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_NUMA */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int __sdt_alloc(const struct cpumask *cpu_map)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain_topology_level *tl;
loop INIT
loop if
loop for
loop while
str : 	int j;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_sd_topology(tl) {
loop if
loop for
loop while
str : 		struct sd_data *sdd = &tl->data;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		sdd->sd = alloc_percpu(struct sched_domain *);
loop if
loop for
loop while
str : 		if (!sdd->sd)
loop INIT
loop if
loop for
loop while
str : 			return -ENOMEM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		sdd->sg = alloc_percpu(struct sched_group *);
loop if
loop for
loop while
str : 		if (!sdd->sg)
loop INIT
loop if
loop for
loop while
str : 			return -ENOMEM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		sdd->sgp = alloc_percpu(struct sched_group_power *);
loop if
loop for
loop while
str : 		if (!sdd->sgp)
loop INIT
loop if
loop for
loop while
str : 			return -ENOMEM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		for_each_cpu(j, cpu_map) {
loop if
loop for
loop while
str : 			struct sched_domain *sd;
loop INIT
loop if
loop for
loop while
str : 			struct sched_group *sg;
loop INIT
loop if
loop for
loop while
str : 			struct sched_group_power *sgp;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		       	sd = kzalloc_node(sizeof(struct sched_domain) + cpumask_size(),
loop if
loop for
loop while
str : 					GFP_KERNEL, cpu_to_node(j));
loop INIT
loop if
loop for
loop while
str : 			if (!sd)
loop INIT
loop if
loop for
loop while
str : 				return -ENOMEM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			*per_cpu_ptr(sdd->sd, j) = sd;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			sg = kzalloc_node(sizeof(struct sched_group) + cpumask_size(),
loop if
loop for
loop while
str : 					GFP_KERNEL, cpu_to_node(j));
loop INIT
loop if
loop for
loop while
str : 			if (!sg)
loop INIT
loop if
loop for
loop while
str : 				return -ENOMEM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			sg->next = sg;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			*per_cpu_ptr(sdd->sg, j) = sg;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			sgp = kzalloc_node(sizeof(struct sched_group_power) + cpumask_size(),
loop if
loop for
loop while
str : 					GFP_KERNEL, cpu_to_node(j));
loop INIT
loop if
loop for
loop while
str : 			if (!sgp)
loop INIT
loop if
loop for
loop while
str : 				return -ENOMEM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			*per_cpu_ptr(sdd->sgp, j) = sgp;
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void __sdt_free(const struct cpumask *cpu_map)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain_topology_level *tl;
loop INIT
loop if
loop for
loop while
str : 	int j;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_sd_topology(tl) {
loop if
loop for
loop while
str : 		struct sd_data *sdd = &tl->data;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		for_each_cpu(j, cpu_map) {
loop if
loop for
loop while
str : 			struct sched_domain *sd;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			if (sdd->sd) {
loop if
loop for
loop while
str : 				sd = *per_cpu_ptr(sdd->sd, j);
loop INIT
loop if
loop for
loop while
str : 				if (sd && (sd->flags & SD_OVERLAP))
loop INIT
loop if
loop for
loop while
str : 					free_sched_groups(sd->groups, 0);
loop INIT
loop if
loop for
loop while
str : 				kfree(*per_cpu_ptr(sdd->sd, j));
loop INIT
loop if
loop for
loop while
str : 			}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 			if (sdd->sg)
loop if
loop for
loop while
str : 				kfree(*per_cpu_ptr(sdd->sg, j));
loop INIT
loop if
loop for
loop while
str : 			if (sdd->sgp)
loop INIT
loop if
loop for
loop while
str : 				kfree(*per_cpu_ptr(sdd->sgp, j));
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 		free_percpu(sdd->sd);
loop INIT
loop if
loop for
loop while
str : 		sdd->sd = NULL;
loop INIT
loop if
loop for
loop while
str : 		free_percpu(sdd->sg);
loop INIT
loop if
loop for
loop while
str : 		sdd->sg = NULL;
loop INIT
loop if
loop for
loop while
str : 		free_percpu(sdd->sgp);
loop INIT
loop if
loop for
loop while
str : 		sdd->sgp = NULL;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : struct sched_domain *build_sched_domain(struct sched_domain_topology_level *tl,
loop if
loop for
loop while
str : 		const struct cpumask *cpu_map, struct sched_domain_attr *attr,
loop INIT
loop if
loop for
loop while
str : 		struct sched_domain *child, int cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *sd = tl->init(tl, cpu);
loop INIT
loop if
loop for
loop while
str : 	if (!sd)
loop INIT
loop if
loop for
loop while
str : 		return child;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cpumask_and(sched_domain_span(sd), cpu_map, tl->mask(cpu));
loop if
loop for
loop while
str : 	if (child) {
loop INIT
loop if
loop for
loop while
str : 		sd->level = child->level + 1;
loop INIT
loop if
loop for
loop while
str : 		sched_domain_level_max = max(sched_domain_level_max, sd->level);
loop INIT
loop if
loop for
loop while
str : 		child->parent = sd;
loop INIT
loop if
loop for
loop while
str : 		sd->child = child;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	set_domain_attribute(sd, attr);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return sd;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Build sched domains for a given set of cpus and attach the sched domains
loop INIT
loop if
loop for
loop while
str :  * to the individual cpus
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int build_sched_domains(const struct cpumask *cpu_map,
loop INIT
loop if
loop for
loop while
str : 			       struct sched_domain_attr *attr)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	enum s_alloc alloc_state;
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain *sd;
loop INIT
loop if
loop for
loop while
str : 	struct s_data d;
loop INIT
loop if
loop for
loop while
str : 	int i, ret = -ENOMEM;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	alloc_state = __visit_domain_allocation_hell(&d, cpu_map);
loop if
loop for
loop while
str : 	if (alloc_state != sa_rootdomain)
loop INIT
loop if
loop for
loop while
str : 		goto error;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Set up domains for cpus specified by the cpu_map. */
loop if
loop for
loop while
str : 	for_each_cpu(i, cpu_map) {
loop INIT
loop if
loop for
loop while
str : 		struct sched_domain_topology_level *tl;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		sd = NULL;
loop if
loop for
loop while
str : 		for_each_sd_topology(tl) {
loop INIT
loop if
loop for
loop while
str : 			sd = build_sched_domain(tl, cpu_map, attr, sd, i);
loop INIT
loop if
loop for
loop while
str : 			if (tl == sched_domain_topology)
loop INIT
loop if
loop for
loop while
str : 				*per_cpu_ptr(d.sd, i) = sd;
loop INIT
loop if
loop for
loop while
str : 			if (tl->flags & SDTL_OVERLAP || sched_feat(FORCE_SD_OVERLAP))
loop INIT
loop if
loop for
loop while
str : 				sd->flags |= SD_OVERLAP;
loop INIT
loop if
loop for
loop while
str : 			if (cpumask_equal(cpu_map, sched_domain_span(sd)))
loop INIT
loop if
loop for
loop while
str : 				break;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Build the groups for the domains */
loop if
loop for
loop while
str : 	for_each_cpu(i, cpu_map) {
loop INIT
loop if
loop for
loop while
str : 		for (sd = *per_cpu_ptr(d.sd, i); sd; sd = sd->parent) {
loop INIT
loop if
loop for
loop while
str : 			sd->span_weight = cpumask_weight(sched_domain_span(sd));
loop INIT
loop if
loop for
loop while
str : 			if (sd->flags & SD_OVERLAP) {
loop INIT
loop if
loop for
loop while
str : 				if (build_overlap_sched_groups(sd, i))
loop INIT
loop if
loop for
loop while
str : 					goto error;
loop INIT
loop if
loop for
loop while
str : 			} else {
loop INIT
loop if
loop for
loop while
str : 				if (build_sched_groups(sd, i))
loop INIT
loop if
loop for
loop while
str : 					goto error;
loop INIT
loop if
loop for
loop while
str : 			}
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Calculate CPU power for physical packages and nodes */
loop if
loop for
loop while
str : 	for (i = nr_cpumask_bits-1; i >= 0; i--) {
loop INIT
loop if
loop for
loop while
str : 		if (!cpumask_test_cpu(i, cpu_map))
loop INIT
loop if
loop for
loop while
str : 			continue;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		for (sd = *per_cpu_ptr(d.sd, i); sd; sd = sd->parent) {
loop if
loop for
loop while
str : 			claim_allocations(i, sd);
loop INIT
loop if
loop for
loop while
str : 			init_sched_groups_power(i, sd);
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Attach the domains */
loop if
loop for
loop while
str : 	rcu_read_lock();
loop INIT
loop if
loop for
loop while
str : 	for_each_cpu(i, cpu_map) {
loop INIT
loop if
loop for
loop while
str : 		sd = *per_cpu_ptr(d.sd, i);
loop INIT
loop if
loop for
loop while
str : 		cpu_attach_domain(sd, d.rd, i);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	ret = 0;
loop if
loop for
loop while
str : error:
loop INIT
loop if
loop for
loop while
str : 	__free_domain_allocs(&d, alloc_state, cpu_map);
loop INIT
loop if
loop for
loop while
str : 	return ret;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static cpumask_var_t *doms_cur;	/* current sched domains */
loop if
loop for
loop while
str : static int ndoms_cur;		/* number of sched domains in 'doms_cur' */
loop INIT
loop if
loop for
loop while
str : static struct sched_domain_attr *dattr_cur;
loop INIT
loop if
loop for
loop while
str : 				/* attribues of custom domains in 'doms_cur' */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Special case: If a kmalloc of a doms_cur partition (array of
loop INIT
loop if
loop for
loop while
str :  * cpumask) fails, then fallback to a single sched domain,
loop INIT
loop if
loop for
loop while
str :  * as determined by the single cpumask fallback_doms.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static cpumask_var_t fallback_doms;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * arch_update_cpu_topology lets virtualized architectures update the
loop INIT
loop if
loop for
loop while
str :  * cpu core maps. It is supposed to return 1 if the topology changed
loop INIT
loop if
loop for
loop while
str :  * or 0 if it stayed the same.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : int __attribute__((weak)) arch_update_cpu_topology(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return 0;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : cpumask_var_t *alloc_sched_domains(unsigned int ndoms)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i;
loop INIT
loop if
loop for
loop while
str : 	cpumask_var_t *doms;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	doms = kmalloc(sizeof(*doms) * ndoms, GFP_KERNEL);
loop if
loop for
loop while
str : 	if (!doms)
loop INIT
loop if
loop for
loop while
str : 		return NULL;
loop INIT
loop if
loop for
loop while
str : 	for (i = 0; i < ndoms; i++) {
loop INIT
loop if
loop for
loop while
str : 		if (!alloc_cpumask_var(&doms[i], GFP_KERNEL)) {
loop INIT
loop if
loop for
loop while
str : 			free_sched_domains(doms, i);
loop INIT
loop if
loop for
loop while
str : 			return NULL;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	return doms;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void free_sched_domains(cpumask_var_t doms[], unsigned int ndoms)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned int i;
loop INIT
loop if
loop for
loop while
str : 	for (i = 0; i < ndoms; i++)
loop INIT
loop if
loop for
loop while
str : 		free_cpumask_var(doms[i]);
loop INIT
loop if
loop for
loop while
str : 	kfree(doms);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Set up scheduler domains and groups. Callers must hold the hotplug lock.
loop INIT
loop if
loop for
loop while
str :  * For now this just excludes isolated cpus, but could be used to
loop INIT
loop if
loop for
loop while
str :  * exclude other special cases in the future.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int init_sched_domains(const struct cpumask *cpu_map)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int err;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	arch_update_cpu_topology();
loop if
loop for
loop while
str : 	ndoms_cur = 1;
loop INIT
loop if
loop for
loop while
str : 	doms_cur = alloc_sched_domains(ndoms_cur);
loop INIT
loop if
loop for
loop while
str : 	if (!doms_cur)
loop INIT
loop if
loop for
loop while
str : 		doms_cur = &fallback_doms;
loop INIT
loop if
loop for
loop while
str : 	cpumask_andnot(doms_cur[0], cpu_map, cpu_isolated_map);
loop INIT
loop if
loop for
loop while
str : 	err = build_sched_domains(doms_cur[0], NULL);
loop INIT
loop if
loop for
loop while
str : 	register_sched_domain_sysctl();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return err;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Detach sched domains from a group of cpus specified in cpu_map
loop INIT
loop if
loop for
loop while
str :  * These cpus will now be attached to the NULL domain
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static void detach_destroy_domains(const struct cpumask *cpu_map)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_lock();
loop if
loop for
loop while
str : 	for_each_cpu(i, cpu_map)
loop INIT
loop if
loop for
loop while
str : 		cpu_attach_domain(NULL, &def_root_domain, i);
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /* handle null as "default" */
loop if
loop for
loop while
str : static int dattrs_equal(struct sched_domain_attr *cur, int idx_cur,
loop INIT
loop if
loop for
loop while
str : 			struct sched_domain_attr *new, int idx_new)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct sched_domain_attr tmp;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* fast path */
loop if
loop for
loop while
str : 	if (!new && !cur)
loop INIT
loop if
loop for
loop while
str : 		return 1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	tmp = SD_ATTR_INIT;
loop if
loop for
loop while
str : 	return !memcmp(cur ? (cur + idx_cur) : &tmp,
loop INIT
loop if
loop for
loop while
str : 			new ? (new + idx_new) : &tmp,
loop INIT
loop if
loop for
loop while
str : 			sizeof(struct sched_domain_attr));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Partition sched domains as specified by the 'ndoms_new'
loop INIT
loop if
loop for
loop while
str :  * cpumasks in the array doms_new[] of cpumasks. This compares
loop INIT
loop if
loop for
loop while
str :  * doms_new[] to the current sched domain partitioning, doms_cur[].
loop INIT
loop if
loop for
loop while
str :  * It destroys each deleted domain and builds each new domain.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * 'doms_new' is an array of cpumask_var_t's of length 'ndoms_new'.
loop INIT
loop if
loop for
loop while
str :  * The masks don't intersect (don't overlap.) We should setup one
loop INIT
loop if
loop for
loop while
str :  * sched domain for each mask. CPUs not in any of the cpumasks will
loop INIT
loop if
loop for
loop while
str :  * not be load balanced. If the same cpumask appears both in the
loop INIT
loop if
loop for
loop while
str :  * current 'doms_cur' domains and in the new 'doms_new', we can leave
loop INIT
loop if
loop for
loop while
str :  * it as it is.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * The passed in 'doms_new' should be allocated using
loop INIT
loop if
loop for
loop while
str :  * alloc_sched_domains.  This routine takes ownership of it and will
loop INIT
loop if
loop for
loop while
str :  * free_sched_domains it when done with it. If the caller failed the
loop INIT
loop if
loop for
loop while
str :  * alloc call, then it can pass in doms_new == NULL && ndoms_new == 1,
loop INIT
loop if
loop for
loop while
str :  * and partition_sched_domains() will fallback to the single partition
loop INIT
loop if
loop for
loop while
str :  * 'fallback_doms', it also forces the domains to be rebuilt.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * If doms_new == NULL it will be replaced with cpu_online_mask.
loop INIT
loop if
loop for
loop while
str :  * ndoms_new == 0 is a special case for destroying existing domains,
loop INIT
loop if
loop for
loop while
str :  * and it will not create the default domain.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Call with hotplug lock held
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],
loop INIT
loop if
loop for
loop while
str : 			     struct sched_domain_attr *dattr_new)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i, j, n;
loop INIT
loop if
loop for
loop while
str : 	int new_topology;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	mutex_lock(&sched_domains_mutex);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* always unregister in case we don't destroy any domains */
loop if
loop for
loop while
str : 	unregister_sched_domain_sysctl();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Let architecture update cpu core mappings. */
loop if
loop for
loop while
str : 	new_topology = arch_update_cpu_topology();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	n = doms_new ? ndoms_new : 0;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Destroy deleted domains */
loop if
loop for
loop while
str : 	for (i = 0; i < ndoms_cur; i++) {
loop INIT
loop if
loop for
loop while
str : 		for (j = 0; j < n && !new_topology; j++) {
loop INIT
loop if
loop for
loop while
str : 			if (cpumask_equal(doms_cur[i], doms_new[j])
loop INIT
loop if
loop for
loop while
str : 			    && dattrs_equal(dattr_cur, i, dattr_new, j))
loop INIT
loop if
loop for
loop while
str : 				goto match1;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 		/* no match - a current sched domain not in new doms_new[] */
loop INIT
loop if
loop for
loop while
str : 		detach_destroy_domains(doms_cur[i]);
loop INIT
loop if
loop for
loop while
str : match1:
loop INIT
loop if
loop for
loop while
str : 		;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	n = ndoms_cur;
loop if
loop for
loop while
str : 	if (doms_new == NULL) {
loop INIT
loop if
loop for
loop while
str : 		n = 0;
loop INIT
loop if
loop for
loop while
str : 		doms_new = &fallback_doms;
loop INIT
loop if
loop for
loop while
str : 		cpumask_andnot(doms_new[0], cpu_active_mask, cpu_isolated_map);
loop INIT
loop if
loop for
loop while
str : 		WARN_ON_ONCE(dattr_new);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Build new domains */
loop if
loop for
loop while
str : 	for (i = 0; i < ndoms_new; i++) {
loop INIT
loop if
loop for
loop while
str : 		for (j = 0; j < n && !new_topology; j++) {
loop INIT
loop if
loop for
loop while
str : 			if (cpumask_equal(doms_new[i], doms_cur[j])
loop INIT
loop if
loop for
loop while
str : 			    && dattrs_equal(dattr_new, i, dattr_cur, j))
loop INIT
loop if
loop for
loop while
str : 				goto match2;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 		/* no match - add a new doms_new */
loop INIT
loop if
loop for
loop while
str : 		build_sched_domains(doms_new[i], dattr_new ? dattr_new + i : NULL);
loop INIT
loop if
loop for
loop while
str : match2:
loop INIT
loop if
loop for
loop while
str : 		;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Remember the new sched domains */
loop if
loop for
loop while
str : 	if (doms_cur != &fallback_doms)
loop INIT
loop if
loop for
loop while
str : 		free_sched_domains(doms_cur, ndoms_cur);
loop INIT
loop if
loop for
loop while
str : 	kfree(dattr_cur);	/* kfree(NULL) is safe */
loop INIT
loop if
loop for
loop while
str : 	doms_cur = doms_new;
loop INIT
loop if
loop for
loop while
str : 	dattr_cur = dattr_new;
loop INIT
loop if
loop for
loop while
str : 	ndoms_cur = ndoms_new;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	register_sched_domain_sysctl();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	mutex_unlock(&sched_domains_mutex);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int num_cpus_frozen;	/* used to mark begin/end of suspend/resume */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * Update cpusets according to cpu_active mask.  If cpusets are
loop INIT
loop if
loop for
loop while
str :  * disabled, cpuset_update_active_cpus() becomes a simple wrapper
loop INIT
loop if
loop for
loop while
str :  * around partition_sched_domains().
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * If we come here as part of a suspend/resume, don't touch cpusets because we
loop INIT
loop if
loop for
loop while
str :  * want to restore it back to its original state upon resume anyway.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static int cpuset_cpu_active(struct notifier_block *nfb, unsigned long action,
loop INIT
loop if
loop for
loop while
str : 			     void *hcpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	switch (action) {
loop INIT
loop if
loop for
loop while
str : 	case CPU_ONLINE_FROZEN:
loop INIT
loop if
loop for
loop while
str : 	case CPU_DOWN_FAILED_FROZEN:
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * num_cpus_frozen tracks how many CPUs are involved in suspend
loop INIT
loop if
loop for
loop while
str : 		 * resume sequence. As long as this is not the last online
loop INIT
loop if
loop for
loop while
str : 		 * operation in the resume sequence, just build a single sched
loop INIT
loop if
loop for
loop while
str : 		 * domain, ignoring cpusets.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		num_cpus_frozen--;
loop INIT
loop if
loop for
loop while
str : 		if (likely(num_cpus_frozen)) {
loop INIT
loop if
loop for
loop while
str : 			partition_sched_domains(1, NULL, NULL);
loop INIT
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * This is the last CPU online operation. So fall through and
loop INIT
loop if
loop for
loop while
str : 		 * restore the original sched domains by considering the
loop INIT
loop if
loop for
loop while
str : 		 * cpuset configurations.
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	case CPU_ONLINE:
loop if
loop for
loop while
str : 	case CPU_DOWN_FAILED:
loop INIT
loop if
loop for
loop while
str : 		cpuset_update_active_cpus(true);
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 	default:
loop INIT
loop if
loop for
loop while
str : 		return NOTIFY_DONE;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	return NOTIFY_OK;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int cpuset_cpu_inactive(struct notifier_block *nfb, unsigned long action,
loop if
loop for
loop while
str : 			       void *hcpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	switch (action) {
loop INIT
loop if
loop for
loop while
str : 	case CPU_DOWN_PREPARE:
loop INIT
loop if
loop for
loop while
str : 		cpuset_update_active_cpus(false);
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 	case CPU_DOWN_PREPARE_FROZEN:
loop INIT
loop if
loop for
loop while
str : 		num_cpus_frozen++;
loop INIT
loop if
loop for
loop while
str : 		partition_sched_domains(1, NULL, NULL);
loop INIT
loop if
loop for
loop while
str : 		break;
loop INIT
loop if
loop for
loop while
str : 	default:
loop INIT
loop if
loop for
loop while
str : 		return NOTIFY_DONE;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	return NOTIFY_OK;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void __init sched_init_smp(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	cpumask_var_t non_isolated_cpus;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	alloc_cpumask_var(&non_isolated_cpus, GFP_KERNEL);
loop if
loop for
loop while
str : 	alloc_cpumask_var(&fallback_doms, GFP_KERNEL);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sched_init_numa();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * There's no userspace yet to cause hotplug operations; hence all the
loop INIT
loop if
loop for
loop while
str : 	 * cpu masks are stable and all blatant races in the below code cannot
loop INIT
loop if
loop for
loop while
str : 	 * happen.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	mutex_lock(&sched_domains_mutex);
loop INIT
loop if
loop for
loop while
str : 	init_sched_domains(cpu_active_mask);
loop INIT
loop if
loop for
loop while
str : 	cpumask_andnot(non_isolated_cpus, cpu_possible_mask, cpu_isolated_map);
loop INIT
loop if
loop for
loop while
str : 	if (cpumask_empty(non_isolated_cpus))
loop INIT
loop if
loop for
loop while
str : 		cpumask_set_cpu(smp_processor_id(), non_isolated_cpus);
loop INIT
loop if
loop for
loop while
str : 	mutex_unlock(&sched_domains_mutex);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	hotcpu_notifier(sched_domains_numa_masks_update, CPU_PRI_SCHED_ACTIVE);
loop if
loop for
loop while
str : 	hotcpu_notifier(cpuset_cpu_active, CPU_PRI_CPUSET_ACTIVE);
loop INIT
loop if
loop for
loop while
str : 	hotcpu_notifier(cpuset_cpu_inactive, CPU_PRI_CPUSET_INACTIVE);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	init_hrtick();
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* Move init over to a non-isolated CPU */
loop if
loop for
loop while
str : 	if (set_cpus_allowed_ptr(current, non_isolated_cpus) < 0)
loop INIT
loop if
loop for
loop while
str : 		BUG();
loop INIT
loop if
loop for
loop while
str : 	sched_init_granularity();
loop INIT
loop if
loop for
loop while
str : 	free_cpumask_var(non_isolated_cpus);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	init_sched_rt_class();
loop if
loop for
loop while
str : 	init_sched_dl_class();
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #else
loop INIT
loop if
loop for
loop while
str : void __init sched_init_smp(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	sched_init_granularity();
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_SMP */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : const_debug unsigned int sysctl_timer_migration = 1;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : int in_sched_functions(unsigned long addr)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return in_lock_functions(addr) ||
loop INIT
loop if
loop for
loop while
str : 		(addr >= (unsigned long)__sched_text_start
loop INIT
loop if
loop for
loop while
str : 		&& addr < (unsigned long)__sched_text_end);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_CGROUP_SCHED
loop if
loop for
loop while
str : /*
loop INIT
loop if
loop for
loop while
str :  * Default task group.
loop INIT
loop if
loop for
loop while
str :  * Every task in system belongs to this group at bootup.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : struct task_group root_task_group;
loop INIT
loop if
loop for
loop while
str : LIST_HEAD(task_groups);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : DECLARE_PER_CPU(cpumask_var_t, load_balance_mask);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void __init sched_init(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i, j;
loop INIT
loop if
loop for
loop while
str : 	unsigned long alloc_size = 0, ptr;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_FAIR_GROUP_SCHED
loop if
loop for
loop while
str : 	alloc_size += 2 * nr_cpu_ids * sizeof(void **);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_RT_GROUP_SCHED
loop INIT
loop if
loop for
loop while
str : 	alloc_size += 2 * nr_cpu_ids * sizeof(void **);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_CPUMASK_OFFSTACK
loop INIT
loop if
loop for
loop while
str : 	alloc_size += num_possible_cpus() * cpumask_size();
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	if (alloc_size) {
loop INIT
loop if
loop for
loop while
str : 		ptr = (unsigned long)kzalloc(alloc_size, GFP_NOWAIT);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_FAIR_GROUP_SCHED
loop if
loop for
loop while
str : 		root_task_group.se = (struct sched_entity **)ptr;
loop INIT
loop if
loop for
loop while
str : 		ptr += nr_cpu_ids * sizeof(void **);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		root_task_group.cfs_rq = (struct cfs_rq **)ptr;
loop if
loop for
loop while
str : 		ptr += nr_cpu_ids * sizeof(void **);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif /* CONFIG_FAIR_GROUP_SCHED */
loop if
loop for
loop while
str : #ifdef CONFIG_RT_GROUP_SCHED
loop INIT
loop if
loop for
loop while
str : 		root_task_group.rt_se = (struct sched_rt_entity **)ptr;
loop INIT
loop if
loop for
loop while
str : 		ptr += nr_cpu_ids * sizeof(void **);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		root_task_group.rt_rq = (struct rt_rq **)ptr;
loop if
loop for
loop while
str : 		ptr += nr_cpu_ids * sizeof(void **);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif /* CONFIG_RT_GROUP_SCHED */
loop if
loop for
loop while
str : #ifdef CONFIG_CPUMASK_OFFSTACK
loop INIT
loop if
loop for
loop while
str : 		for_each_possible_cpu(i) {
loop INIT
loop if
loop for
loop while
str : 			per_cpu(load_balance_mask, i) = (void *)ptr;
loop INIT
loop if
loop for
loop while
str : 			ptr += cpumask_size();
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_CPUMASK_OFFSTACK */
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	init_rt_bandwidth(&def_rt_bandwidth,
loop if
loop for
loop while
str : 			global_rt_period(), global_rt_runtime());
loop INIT
loop if
loop for
loop while
str : 	init_dl_bandwidth(&def_dl_bandwidth,
loop INIT
loop if
loop for
loop while
str : 			global_rt_period(), global_rt_runtime());
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : 	init_defrootdomain();
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_RT_GROUP_SCHED
loop if
loop for
loop while
str : 	init_rt_bandwidth(&root_task_group.rt_bandwidth,
loop INIT
loop if
loop for
loop while
str : 			global_rt_period(), global_rt_runtime());
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_RT_GROUP_SCHED */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_CGROUP_SCHED
loop if
loop for
loop while
str : 	list_add(&root_task_group.list, &task_groups);
loop INIT
loop if
loop for
loop while
str : 	INIT_LIST_HEAD(&root_task_group.children);
loop INIT
loop if
loop for
loop while
str : 	INIT_LIST_HEAD(&root_task_group.siblings);
loop INIT
loop if
loop for
loop while
str : 	autogroup_init(&init_task);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif /* CONFIG_CGROUP_SCHED */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_possible_cpu(i) {
loop if
loop for
loop while
str : 		struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		rq = cpu_rq(i);
loop if
loop for
loop while
str : 		raw_spin_lock_init(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 		rq->nr_running = 0;
loop INIT
loop if
loop for
loop while
str : 		rq->calc_load_active = 0;
loop INIT
loop if
loop for
loop while
str : 		rq->calc_load_update = jiffies + LOAD_FREQ;
loop INIT
loop if
loop for
loop while
str : 		init_cfs_rq(&rq->cfs);
loop INIT
loop if
loop for
loop while
str : 		init_rt_rq(&rq->rt, rq);
loop INIT
loop if
loop for
loop while
str : 		init_dl_rq(&rq->dl, rq);
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_FAIR_GROUP_SCHED
loop INIT
loop if
loop for
loop while
str : 		root_task_group.shares = ROOT_TASK_GROUP_LOAD;
loop INIT
loop if
loop for
loop while
str : 		INIT_LIST_HEAD(&rq->leaf_cfs_rq_list);
loop INIT
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * How much cpu bandwidth does root_task_group get?
loop INIT
loop if
loop for
loop while
str : 		 *
loop INIT
loop if
loop for
loop while
str : 		 * In case of task-groups formed thr' the cgroup filesystem, it
loop INIT
loop if
loop for
loop while
str : 		 * gets 100% of the cpu resources in the system. This overall
loop INIT
loop if
loop for
loop while
str : 		 * system cpu resource is divided among the tasks of
loop INIT
loop if
loop for
loop while
str : 		 * root_task_group and its child task-groups in a fair manner,
loop INIT
loop if
loop for
loop while
str : 		 * based on each entity's (task or task-group's) weight
loop INIT
loop if
loop for
loop while
str : 		 * (se->load.weight).
loop INIT
loop if
loop for
loop while
str : 		 *
loop INIT
loop if
loop for
loop while
str : 		 * In other words, if root_task_group has 10 tasks of weight
loop INIT
loop if
loop for
loop while
str : 		 * 1024) and two child groups A0 and A1 (of weight 1024 each),
loop INIT
loop if
loop for
loop while
str : 		 * then A0's share of the cpu resource is:
loop INIT
loop if
loop for
loop while
str : 		 *
loop INIT
loop if
loop for
loop while
str : 		 *	A0's bandwidth = 1024 / (10*1024 + 1024 + 1024) = 8.33%
loop INIT
loop if
loop for
loop while
str : 		 *
loop INIT
loop if
loop for
loop while
str : 		 * We achieve this by letting root_task_group's tasks sit
loop INIT
loop if
loop for
loop while
str : 		 * directly in rq->cfs (i.e root_task_group->se[] = NULL).
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		init_cfs_bandwidth(&root_task_group.cfs_bandwidth);
loop INIT
loop if
loop for
loop while
str : 		init_tg_cfs_entry(&root_task_group, &rq->cfs, NULL, i, NULL);
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_FAIR_GROUP_SCHED */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		rq->rt.rt_runtime = def_rt_bandwidth.rt_runtime;
loop if
loop for
loop while
str : #ifdef CONFIG_RT_GROUP_SCHED
loop INIT
loop if
loop for
loop while
str : 		INIT_LIST_HEAD(&rq->leaf_rt_rq_list);
loop INIT
loop if
loop for
loop while
str : 		init_tg_rt_entry(&root_task_group, &rq->rt, NULL, i, NULL);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		for (j = 0; j < CPU_LOAD_IDX_MAX; j++)
loop if
loop for
loop while
str : 			rq->cpu_load[j] = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		rq->last_load_update_tick = jiffies;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : 		rq->sd = NULL;
loop INIT
loop if
loop for
loop while
str : 		rq->rd = NULL;
loop INIT
loop if
loop for
loop while
str : 		rq->cpu_power = SCHED_POWER_SCALE;
loop INIT
loop if
loop for
loop while
str : 		rq->post_schedule = 0;
loop INIT
loop if
loop for
loop while
str : 		rq->active_balance = 0;
loop INIT
loop if
loop for
loop while
str : 		rq->next_balance = jiffies;
loop INIT
loop if
loop for
loop while
str : 		rq->push_cpu = 0;
loop INIT
loop if
loop for
loop while
str : 		rq->cpu = i;
loop INIT
loop if
loop for
loop while
str : 		rq->online = 0;
loop INIT
loop if
loop for
loop while
str : 		rq->idle_stamp = 0;
loop INIT
loop if
loop for
loop while
str : 		rq->avg_idle = 2*sysctl_sched_migration_cost;
loop INIT
loop if
loop for
loop while
str : 		rq->max_idle_balance_cost = sysctl_sched_migration_cost;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		INIT_LIST_HEAD(&rq->cfs_tasks);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		rq_attach_root(rq, &def_root_domain);
loop if
loop for
loop while
str : #ifdef CONFIG_NO_HZ_COMMON
loop INIT
loop if
loop for
loop while
str : 		rq->nohz_flags = 0;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_NO_HZ_FULL
loop INIT
loop if
loop for
loop while
str : 		rq->last_sched_tick = 0;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 		init_rq_hrtick(rq);
loop INIT
loop if
loop for
loop while
str : 		atomic_set(&rq->nr_iowait, 0);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	set_load_weight(&init_task);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_PREEMPT_NOTIFIERS
loop if
loop for
loop while
str : 	INIT_HLIST_HEAD(&init_task.preempt_notifiers);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * The boot idle thread does lazy MMU switching as well:
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	atomic_inc(&init_mm.mm_count);
loop INIT
loop if
loop for
loop while
str : 	enter_lazy_tlb(&init_mm, current);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Make us the idle thread. Technically, schedule() should not be
loop INIT
loop if
loop for
loop while
str : 	 * called from this thread, however somewhere below it might be,
loop INIT
loop if
loop for
loop while
str : 	 * but because we are the idle thread, we just pick up running again
loop INIT
loop if
loop for
loop while
str : 	 * when this runqueue becomes "idle".
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	init_idle(current, smp_processor_id());
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	calc_load_update = jiffies + LOAD_FREQ;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * During early bootup we pretend to be a normal task:
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	current->sched_class = &fair_sched_class;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_SMP
loop if
loop for
loop while
str : 	zalloc_cpumask_var(&sched_domains_tmpmask, GFP_NOWAIT);
loop INIT
loop if
loop for
loop while
str : 	/* May be allocated at isolcpus cmdline parse time */
loop INIT
loop if
loop for
loop while
str : 	if (cpu_isolated_map == NULL)
loop INIT
loop if
loop for
loop while
str : 		zalloc_cpumask_var(&cpu_isolated_map, GFP_NOWAIT);
loop INIT
loop if
loop for
loop while
str : 	idle_thread_set_boot_cpu();
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	init_sched_fair_class();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	scheduler_running = 1;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_DEBUG_ATOMIC_SLEEP
loop if
loop for
loop while
str : static inline int preempt_count_equals(int preempt_offset)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int nested = (preempt_count() & ~PREEMPT_ACTIVE) + rcu_preempt_depth();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return (nested == preempt_offset);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void __might_sleep(const char *file, int line, int preempt_offset)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	static unsigned long prev_jiffy;	/* ratelimiting */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_sleep_check(); /* WARN_ON_ONCE() by default, no rate limit reqd. */
loop if
loop for
loop while
str : 	if ((preempt_count_equals(preempt_offset) && !irqs_disabled()) ||
loop INIT
loop if
loop for
loop while
str : 	    system_state != SYSTEM_RUNNING || oops_in_progress)
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 	if (time_before(jiffies, prev_jiffy + HZ) && prev_jiffy)
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 	prev_jiffy = jiffies;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	printk(KERN_ERR
loop if
loop for
loop while
str : 		"BUG: sleeping function called from invalid context at %s:%d\n",
loop INIT
loop if
loop for
loop while
str : 			file, line);
loop INIT
loop if
loop for
loop while
str : 	printk(KERN_ERR
loop INIT
loop if
loop for
loop while
str : 		"in_atomic(): %d, irqs_disabled(): %d, pid: %d, name: %s\n",
loop INIT
loop if
loop for
loop while
str : 			in_atomic(), irqs_disabled(),
loop INIT
loop if
loop for
loop while
str : 			current->pid, current->comm);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	debug_show_held_locks(current);
loop if
loop for
loop while
str : 	if (irqs_disabled())
loop INIT
loop if
loop for
loop while
str : 		print_irqtrace_events(current);
loop INIT
loop if
loop for
loop while
str : 	dump_stack();
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : EXPORT_SYMBOL(__might_sleep);
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_MAGIC_SYSRQ
loop if
loop for
loop while
str : static void normalize_task(struct rq *rq, struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	const struct sched_class *prev_class = p->sched_class;
loop INIT
loop if
loop for
loop while
str : 	struct sched_attr attr = {
loop INIT
loop if
loop for
loop while
str : 		.sched_policy = SCHED_NORMAL,
loop INIT
loop if
loop for
loop while
str : 	};
loop INIT
loop if
loop for
loop while
str : 	int old_prio = p->prio;
loop INIT
loop if
loop for
loop while
str : 	int on_rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	on_rq = p->on_rq;
loop if
loop for
loop while
str : 	if (on_rq)
loop INIT
loop if
loop for
loop while
str : 		dequeue_task(rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 	__setscheduler(rq, p, &attr);
loop INIT
loop if
loop for
loop while
str : 	if (on_rq) {
loop INIT
loop if
loop for
loop while
str : 		enqueue_task(rq, p, 0);
loop INIT
loop if
loop for
loop while
str : 		resched_task(rq->curr);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	check_class_changed(rq, p, prev_class, old_prio);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void normalize_rt_tasks(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *g, *p;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	read_lock_irqsave(&tasklist_lock, flags);
loop if
loop for
loop while
str : 	do_each_thread(g, p) {
loop INIT
loop if
loop for
loop while
str : 		/*
loop INIT
loop if
loop for
loop while
str : 		 * Only normalize user tasks:
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (!p->mm)
loop INIT
loop if
loop for
loop while
str : 			continue;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		p->se.exec_start		= 0;
loop if
loop for
loop while
str : #ifdef CONFIG_SCHEDSTATS
loop INIT
loop if
loop for
loop while
str : 		p->se.statistics.wait_start	= 0;
loop INIT
loop if
loop for
loop while
str : 		p->se.statistics.sleep_start	= 0;
loop INIT
loop if
loop for
loop while
str : 		p->se.statistics.block_start	= 0;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (!dl_task(p) && !rt_task(p)) {
loop if
loop for
loop while
str : 			/*
loop INIT
loop if
loop for
loop while
str : 			 * Renice negative nice level userspace
loop INIT
loop if
loop for
loop while
str : 			 * tasks back to 0:
loop INIT
loop if
loop for
loop while
str : 			 */
loop INIT
loop if
loop for
loop while
str : 			if (TASK_NICE(p) < 0 && p->mm)
loop INIT
loop if
loop for
loop while
str : 				set_user_nice(p, 0);
loop INIT
loop if
loop for
loop while
str : 			continue;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		raw_spin_lock(&p->pi_lock);
loop if
loop for
loop while
str : 		rq = __task_rq_lock(p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		normalize_task(rq, p);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		__task_rq_unlock(rq);
loop if
loop for
loop while
str : 		raw_spin_unlock(&p->pi_lock);
loop INIT
loop if
loop for
loop while
str : 	} while_each_thread(g, p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	read_unlock_irqrestore(&tasklist_lock, flags);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif /* CONFIG_MAGIC_SYSRQ */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #if defined(CONFIG_IA64) || defined(CONFIG_KGDB_KDB)
loop if
loop for
loop while
str : /*
loop INIT
loop if
loop for
loop while
str :  * These functions are only useful for the IA64 MCA handling, or kdb.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * They can only be called when the whole system has been
loop INIT
loop if
loop for
loop while
str :  * stopped - every CPU needs to be quiescent, and no scheduling
loop INIT
loop if
loop for
loop while
str :  * activity can take place. Using them for anything else would
loop INIT
loop if
loop for
loop while
str :  * be a serious bug, and as a result, they aren't even visible
loop INIT
loop if
loop for
loop while
str :  * under any other configuration.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /**
loop if
loop for
loop while
str :  * curr_task - return the current task for a given cpu.
loop INIT
loop if
loop for
loop while
str :  * @cpu: the processor in question.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * ONLY VALID WHEN THE WHOLE SYSTEM IS STOPPED!
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Return: The current task for @cpu.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : struct task_struct *curr_task(int cpu)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return cpu_curr(cpu);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif /* defined(CONFIG_IA64) || defined(CONFIG_KGDB_KDB) */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_IA64
loop if
loop for
loop while
str : /**
loop INIT
loop if
loop for
loop while
str :  * set_curr_task - set the current task for a given cpu.
loop INIT
loop if
loop for
loop while
str :  * @cpu: the processor in question.
loop INIT
loop if
loop for
loop while
str :  * @p: the task pointer to set.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * Description: This function must only be used when non-maskable interrupts
loop INIT
loop if
loop for
loop while
str :  * are serviced on a separate stack. It allows the architecture to switch the
loop INIT
loop if
loop for
loop while
str :  * notion of the current task on a cpu in a non-blocking manner. This function
loop INIT
loop if
loop for
loop while
str :  * must be called with all CPU's synchronized, and interrupts disabled, the
loop INIT
loop if
loop for
loop while
str :  * and caller must save the original value of the current task (see
loop INIT
loop if
loop for
loop while
str :  * curr_task() above) and restore that value before reenabling interrupts and
loop INIT
loop if
loop for
loop while
str :  * re-starting the system.
loop INIT
loop if
loop for
loop while
str :  *
loop INIT
loop if
loop for
loop while
str :  * ONLY VALID WHEN THE WHOLE SYSTEM IS STOPPED!
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void set_curr_task(int cpu, struct task_struct *p)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	cpu_curr(cpu) = p;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_CGROUP_SCHED
loop if
loop for
loop while
str : /* task_group_lock serializes the addition/removal of task groups */
loop INIT
loop if
loop for
loop while
str : static DEFINE_SPINLOCK(task_group_lock);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void free_sched_group(struct task_group *tg)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	free_fair_sched_group(tg);
loop INIT
loop if
loop for
loop while
str : 	free_rt_sched_group(tg);
loop INIT
loop if
loop for
loop while
str : 	autogroup_free(tg);
loop INIT
loop if
loop for
loop while
str : 	kfree(tg);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /* allocate runqueue etc for a new task group */
loop if
loop for
loop while
str : struct task_group *sched_create_group(struct task_group *parent)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_group *tg;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	tg = kzalloc(sizeof(*tg), GFP_KERNEL);
loop if
loop for
loop while
str : 	if (!tg)
loop INIT
loop if
loop for
loop while
str : 		return ERR_PTR(-ENOMEM);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!alloc_fair_sched_group(tg, parent))
loop if
loop for
loop while
str : 		goto err;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!alloc_rt_sched_group(tg, parent))
loop if
loop for
loop while
str : 		goto err;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return tg;
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : err:
loop if
loop for
loop while
str : 	free_sched_group(tg);
loop INIT
loop if
loop for
loop while
str : 	return ERR_PTR(-ENOMEM);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void sched_online_group(struct task_group *tg, struct task_group *parent)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	spin_lock_irqsave(&task_group_lock, flags);
loop if
loop for
loop while
str : 	list_add_rcu(&tg->list, &task_groups);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	WARN_ON(!parent); /* root should already exist */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	tg->parent = parent;
loop if
loop for
loop while
str : 	INIT_LIST_HEAD(&tg->children);
loop INIT
loop if
loop for
loop while
str : 	list_add_rcu(&tg->siblings, &parent->children);
loop INIT
loop if
loop for
loop while
str : 	spin_unlock_irqrestore(&task_group_lock, flags);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /* rcu callback to free various structures associated with a task group */
loop if
loop for
loop while
str : static void free_sched_group_rcu(struct rcu_head *rhp)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	/* now it should be safe to free those cfs_rqs */
loop INIT
loop if
loop for
loop while
str : 	free_sched_group(container_of(rhp, struct task_group, rcu));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /* Destroy runqueue etc associated with a task group */
loop if
loop for
loop while
str : void sched_destroy_group(struct task_group *tg)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	/* wait for possible concurrent references to cfs_rqs complete */
loop INIT
loop if
loop for
loop while
str : 	call_rcu(&tg->rcu, free_sched_group_rcu);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void sched_offline_group(struct task_group *tg)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	int i;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* end participation in shares distribution */
loop if
loop for
loop while
str : 	for_each_possible_cpu(i)
loop INIT
loop if
loop for
loop while
str : 		unregister_fair_sched_group(tg, i);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	spin_lock_irqsave(&task_group_lock, flags);
loop if
loop for
loop while
str : 	list_del_rcu(&tg->list);
loop INIT
loop if
loop for
loop while
str : 	list_del_rcu(&tg->siblings);
loop INIT
loop if
loop for
loop while
str : 	spin_unlock_irqrestore(&task_group_lock, flags);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /* change task's runqueue when it moves between groups.
loop if
loop for
loop while
str :  *	The caller of this function should have put the task in its new group
loop INIT
loop if
loop for
loop while
str :  *	by now. This function just updates tsk->se.cfs_rq and tsk->se.parent to
loop INIT
loop if
loop for
loop while
str :  *	reflect its new group.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : void sched_move_task(struct task_struct *tsk)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_group *tg;
loop INIT
loop if
loop for
loop while
str : 	int on_rq, running;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	struct rq *rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rq = task_rq_lock(tsk, &flags);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	running = task_current(rq, tsk);
loop if
loop for
loop while
str : 	on_rq = tsk->on_rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (on_rq)
loop if
loop for
loop while
str : 		dequeue_task(rq, tsk, 0);
loop INIT
loop if
loop for
loop while
str : 	if (unlikely(running))
loop INIT
loop if
loop for
loop while
str : 		tsk->sched_class->put_prev_task(rq, tsk);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	tg = container_of(task_css_check(tsk, cpu_cgroup_subsys_id,
loop if
loop for
loop while
str : 				lockdep_is_held(&tsk->sighand->siglock)),
loop INIT
loop if
loop for
loop while
str : 			  struct task_group, css);
loop INIT
loop if
loop for
loop while
str : 	tg = autogroup_task_group(tsk, tg);
loop INIT
loop if
loop for
loop while
str : 	tsk->sched_task_group = tg;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_FAIR_GROUP_SCHED
loop if
loop for
loop while
str : 	if (tsk->sched_class->task_move_group)
loop INIT
loop if
loop for
loop while
str : 		tsk->sched_class->task_move_group(tsk, on_rq);
loop INIT
loop if
loop for
loop while
str : 	else
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 		set_task_rq(tsk, task_cpu(tsk));
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (unlikely(running))
loop if
loop for
loop while
str : 		tsk->sched_class->set_curr_task(rq);
loop INIT
loop if
loop for
loop while
str : 	if (on_rq)
loop INIT
loop if
loop for
loop while
str : 		enqueue_task(rq, tsk, 0);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	task_rq_unlock(rq, tsk, &flags);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_CGROUP_SCHED */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_RT_GROUP_SCHED
loop if
loop for
loop while
str : /*
loop INIT
loop if
loop for
loop while
str :  * Ensure that the real time constraints are schedulable.
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static DEFINE_MUTEX(rt_constraints_mutex);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /* Must be called with tasklist_lock held */
loop if
loop for
loop while
str : static inline int tg_has_rt_tasks(struct task_group *tg)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *g, *p;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	do_each_thread(g, p) {
loop if
loop for
loop while
str : 		if (rt_task(p) && task_rq(p)->rt.tg == tg)
loop INIT
loop if
loop for
loop while
str : 			return 1;
loop INIT
loop if
loop for
loop while
str : 	} while_each_thread(g, p);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : struct rt_schedulable_data {
loop if
loop for
loop while
str : 	struct task_group *tg;
loop INIT
loop if
loop for
loop while
str : 	u64 rt_period;
loop INIT
loop if
loop for
loop while
str : 	u64 rt_runtime;
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int tg_rt_schedulable(struct task_group *tg, void *data)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct rt_schedulable_data *d = data;
loop INIT
loop if
loop for
loop while
str : 	struct task_group *child;
loop INIT
loop if
loop for
loop while
str : 	unsigned long total, sum = 0;
loop INIT
loop if
loop for
loop while
str : 	u64 period, runtime;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	period = ktime_to_ns(tg->rt_bandwidth.rt_period);
loop if
loop for
loop while
str : 	runtime = tg->rt_bandwidth.rt_runtime;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (tg == d->tg) {
loop if
loop for
loop while
str : 		period = d->rt_period;
loop INIT
loop if
loop for
loop while
str : 		runtime = d->rt_runtime;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Cannot have more runtime than the period.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (runtime > period && runtime != RUNTIME_INF)
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Ensure we don't starve existing RT tasks.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (rt_bandwidth_enabled() && !runtime && tg_has_rt_tasks(tg))
loop INIT
loop if
loop for
loop while
str : 		return -EBUSY;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	total = to_ratio(period, runtime);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Nobody can have more than the global setting allows.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (total > to_ratio(global_rt_period(), global_rt_runtime()))
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * The sum of our children's runtime should not exceed our own.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	list_for_each_entry_rcu(child, &tg->children, siblings) {
loop INIT
loop if
loop for
loop while
str : 		period = ktime_to_ns(child->rt_bandwidth.rt_period);
loop INIT
loop if
loop for
loop while
str : 		runtime = child->rt_bandwidth.rt_runtime;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (child == d->tg) {
loop if
loop for
loop while
str : 			period = d->rt_period;
loop INIT
loop if
loop for
loop while
str : 			runtime = d->rt_runtime;
loop INIT
loop if
loop for
loop while
str : 		}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		sum += to_ratio(period, runtime);
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (sum > total)
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int __rt_schedulable(struct task_group *tg, u64 period, u64 runtime)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int ret;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	struct rt_schedulable_data data = {
loop if
loop for
loop while
str : 		.tg = tg,
loop INIT
loop if
loop for
loop while
str : 		.rt_period = period,
loop INIT
loop if
loop for
loop while
str : 		.rt_runtime = runtime,
loop INIT
loop if
loop for
loop while
str : 	};
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_lock();
loop if
loop for
loop while
str : 	ret = walk_tg_tree(tg_rt_schedulable, tg_nop, &data);
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ret;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int tg_set_rt_bandwidth(struct task_group *tg,
loop if
loop for
loop while
str : 		u64 rt_period, u64 rt_runtime)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i, err = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	mutex_lock(&rt_constraints_mutex);
loop if
loop for
loop while
str : 	read_lock(&tasklist_lock);
loop INIT
loop if
loop for
loop while
str : 	err = __rt_schedulable(tg, rt_period, rt_runtime);
loop INIT
loop if
loop for
loop while
str : 	if (err)
loop INIT
loop if
loop for
loop while
str : 		goto unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock_irq(&tg->rt_bandwidth.rt_runtime_lock);
loop if
loop for
loop while
str : 	tg->rt_bandwidth.rt_period = ns_to_ktime(rt_period);
loop INIT
loop if
loop for
loop while
str : 	tg->rt_bandwidth.rt_runtime = rt_runtime;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_possible_cpu(i) {
loop if
loop for
loop while
str : 		struct rt_rq *rt_rq = tg->rt_rq[i];
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		raw_spin_lock(&rt_rq->rt_runtime_lock);
loop if
loop for
loop while
str : 		rt_rq->rt_runtime = rt_runtime;
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock(&rt_rq->rt_runtime_lock);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock_irq(&tg->rt_bandwidth.rt_runtime_lock);
loop INIT
loop if
loop for
loop while
str : unlock:
loop INIT
loop if
loop for
loop while
str : 	read_unlock(&tasklist_lock);
loop INIT
loop if
loop for
loop while
str : 	mutex_unlock(&rt_constraints_mutex);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return err;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_group_set_rt_runtime(struct task_group *tg, long rt_runtime_us)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u64 rt_runtime, rt_period;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rt_period = ktime_to_ns(tg->rt_bandwidth.rt_period);
loop if
loop for
loop while
str : 	rt_runtime = (u64)rt_runtime_us * NSEC_PER_USEC;
loop INIT
loop if
loop for
loop while
str : 	if (rt_runtime_us < 0)
loop INIT
loop if
loop for
loop while
str : 		rt_runtime = RUNTIME_INF;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return tg_set_rt_bandwidth(tg, rt_period, rt_runtime);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static long sched_group_rt_runtime(struct task_group *tg)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u64 rt_runtime_us;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (tg->rt_bandwidth.rt_runtime == RUNTIME_INF)
loop if
loop for
loop while
str : 		return -1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rt_runtime_us = tg->rt_bandwidth.rt_runtime;
loop if
loop for
loop while
str : 	do_div(rt_runtime_us, NSEC_PER_USEC);
loop INIT
loop if
loop for
loop while
str : 	return rt_runtime_us;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_group_set_rt_period(struct task_group *tg, long rt_period_us)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u64 rt_runtime, rt_period;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rt_period = (u64)rt_period_us * NSEC_PER_USEC;
loop if
loop for
loop while
str : 	rt_runtime = tg->rt_bandwidth.rt_runtime;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (rt_period == 0)
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return tg_set_rt_bandwidth(tg, rt_period, rt_runtime);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static long sched_group_rt_period(struct task_group *tg)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u64 rt_period_us;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rt_period_us = ktime_to_ns(tg->rt_bandwidth.rt_period);
loop if
loop for
loop while
str : 	do_div(rt_period_us, NSEC_PER_USEC);
loop INIT
loop if
loop for
loop while
str : 	return rt_period_us;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_RT_GROUP_SCHED */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_RT_GROUP_SCHED
loop if
loop for
loop while
str : static int sched_rt_global_constraints(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int ret = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	mutex_lock(&rt_constraints_mutex);
loop if
loop for
loop while
str : 	read_lock(&tasklist_lock);
loop INIT
loop if
loop for
loop while
str : 	ret = __rt_schedulable(NULL, 0, 0);
loop INIT
loop if
loop for
loop while
str : 	read_unlock(&tasklist_lock);
loop INIT
loop if
loop for
loop while
str : 	mutex_unlock(&rt_constraints_mutex);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ret;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_rt_can_attach(struct task_group *tg, struct task_struct *tsk)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	/* Don't accept realtime tasks when there is no way for them to run */
loop INIT
loop if
loop for
loop while
str : 	if (rt_task(tsk) && tg->rt_bandwidth.rt_runtime == 0)
loop INIT
loop if
loop for
loop while
str : 		return 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 1;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #else /* !CONFIG_RT_GROUP_SCHED */
loop if
loop for
loop while
str : static int sched_rt_global_constraints(void)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 	int i, ret = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	raw_spin_lock_irqsave(&def_rt_bandwidth.rt_runtime_lock, flags);
loop if
loop for
loop while
str : 	for_each_possible_cpu(i) {
loop INIT
loop if
loop for
loop while
str : 		struct rt_rq *rt_rq = &cpu_rq(i)->rt;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		raw_spin_lock(&rt_rq->rt_runtime_lock);
loop if
loop for
loop while
str : 		rt_rq->rt_runtime = global_rt_runtime();
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock(&rt_rq->rt_runtime_lock);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock_irqrestore(&def_rt_bandwidth.rt_runtime_lock, flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ret;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_RT_GROUP_SCHED */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_dl_global_constraints(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u64 runtime = global_rt_runtime();
loop INIT
loop if
loop for
loop while
str : 	u64 period = global_rt_period();
loop INIT
loop if
loop for
loop while
str : 	u64 new_bw = to_ratio(period, runtime);
loop INIT
loop if
loop for
loop while
str : 	int cpu, ret = 0;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Here we want to check the bandwidth not being set to some
loop INIT
loop if
loop for
loop while
str : 	 * value smaller than the currently allocated bandwidth in
loop INIT
loop if
loop for
loop while
str : 	 * any of the root_domains.
loop INIT
loop if
loop for
loop while
str : 	 *
loop INIT
loop if
loop for
loop while
str : 	 * FIXME: Cycling on all the CPUs is overdoing, but simpler than
loop INIT
loop if
loop for
loop while
str : 	 * cycling on root_domains... Discussion on different/better
loop INIT
loop if
loop for
loop while
str : 	 * solutions is welcome!
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	for_each_possible_cpu(cpu) {
loop INIT
loop if
loop for
loop while
str : 		struct dl_bw *dl_b = dl_bw_of(cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		raw_spin_lock_irqsave(&dl_b->lock, flags);
loop if
loop for
loop while
str : 		if (new_bw < dl_b->total_bw)
loop INIT
loop if
loop for
loop while
str : 			ret = -EBUSY;
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock_irqrestore(&dl_b->lock, flags);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (ret)
loop if
loop for
loop while
str : 			break;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ret;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void sched_dl_do_global(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u64 new_bw = -1;
loop INIT
loop if
loop for
loop while
str : 	int cpu;
loop INIT
loop if
loop for
loop while
str : 	unsigned long flags;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	def_dl_bandwidth.dl_period = global_rt_period();
loop if
loop for
loop while
str : 	def_dl_bandwidth.dl_runtime = global_rt_runtime();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (global_rt_runtime() != RUNTIME_INF)
loop if
loop for
loop while
str : 		new_bw = to_ratio(global_rt_period(), global_rt_runtime());
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * FIXME: As above...
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	for_each_possible_cpu(cpu) {
loop INIT
loop if
loop for
loop while
str : 		struct dl_bw *dl_b = dl_bw_of(cpu);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		raw_spin_lock_irqsave(&dl_b->lock, flags);
loop if
loop for
loop while
str : 		dl_b->bw = new_bw;
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock_irqrestore(&dl_b->lock, flags);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int sched_rt_global_validate(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	if (sysctl_sched_rt_period <= 0)
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if ((sysctl_sched_rt_runtime != RUNTIME_INF) &&
loop if
loop for
loop while
str : 		(sysctl_sched_rt_runtime > sysctl_sched_rt_period))
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void sched_rt_do_global(void)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	def_rt_bandwidth.rt_runtime = global_rt_runtime();
loop INIT
loop if
loop for
loop while
str : 	def_rt_bandwidth.rt_period = ns_to_ktime(global_rt_period());
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : int sched_rt_handler(struct ctl_table *table, int write,
loop if
loop for
loop while
str : 		void __user *buffer, size_t *lenp,
loop INIT
loop if
loop for
loop while
str : 		loff_t *ppos)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int old_period, old_runtime;
loop INIT
loop if
loop for
loop while
str : 	static DEFINE_MUTEX(mutex);
loop INIT
loop if
loop for
loop while
str : 	int ret;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	mutex_lock(&mutex);
loop if
loop for
loop while
str : 	old_period = sysctl_sched_rt_period;
loop INIT
loop if
loop for
loop while
str : 	old_runtime = sysctl_sched_rt_runtime;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	ret = proc_dointvec(table, write, buffer, lenp, ppos);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!ret && write) {
loop if
loop for
loop while
str : 		ret = sched_rt_global_validate();
loop INIT
loop if
loop for
loop while
str : 		if (ret)
loop INIT
loop if
loop for
loop while
str : 			goto undo;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		ret = sched_rt_global_constraints();
loop if
loop for
loop while
str : 		if (ret)
loop INIT
loop if
loop for
loop while
str : 			goto undo;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		ret = sched_dl_global_constraints();
loop if
loop for
loop while
str : 		if (ret)
loop INIT
loop if
loop for
loop while
str : 			goto undo;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		sched_rt_do_global();
loop if
loop for
loop while
str : 		sched_dl_do_global();
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	if (0) {
loop INIT
loop if
loop for
loop while
str : undo:
loop INIT
loop if
loop for
loop while
str : 		sysctl_sched_rt_period = old_period;
loop INIT
loop if
loop for
loop while
str : 		sysctl_sched_rt_runtime = old_runtime;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	mutex_unlock(&mutex);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ret;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : int sched_rr_handler(struct ctl_table *table, int write,
loop if
loop for
loop while
str : 		void __user *buffer, size_t *lenp,
loop INIT
loop if
loop for
loop while
str : 		loff_t *ppos)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int ret;
loop INIT
loop if
loop for
loop while
str : 	static DEFINE_MUTEX(mutex);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	mutex_lock(&mutex);
loop if
loop for
loop while
str : 	ret = proc_dointvec(table, write, buffer, lenp, ppos);
loop INIT
loop if
loop for
loop while
str : 	/* make sure that internally we keep jiffies */
loop INIT
loop if
loop for
loop while
str : 	/* also, writing zero resets timeslice to default */
loop INIT
loop if
loop for
loop while
str : 	if (!ret && write) {
loop INIT
loop if
loop for
loop while
str : 		sched_rr_timeslice = sched_rr_timeslice <= 0 ?
loop INIT
loop if
loop for
loop while
str : 			RR_TIMESLICE : msecs_to_jiffies(sched_rr_timeslice);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	mutex_unlock(&mutex);
loop INIT
loop if
loop for
loop while
str : 	return ret;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_CGROUP_SCHED
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static inline struct task_group *css_tg(struct cgroup_subsys_state *css)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return css ? container_of(css, struct task_group, css) : NULL;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static struct cgroup_subsys_state *
loop if
loop for
loop while
str : cpu_cgroup_css_alloc(struct cgroup_subsys_state *parent_css)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_group *parent = css_tg(parent_css);
loop INIT
loop if
loop for
loop while
str : 	struct task_group *tg;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!parent) {
loop if
loop for
loop while
str : 		/* This is early initialization for the top cgroup */
loop INIT
loop if
loop for
loop while
str : 		return &root_task_group.css;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	tg = sched_create_group(parent);
loop if
loop for
loop while
str : 	if (IS_ERR(tg))
loop INIT
loop if
loop for
loop while
str : 		return ERR_PTR(-ENOMEM);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return &tg->css;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int cpu_cgroup_css_online(struct cgroup_subsys_state *css)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_group *tg = css_tg(css);
loop INIT
loop if
loop for
loop while
str : 	struct task_group *parent = css_tg(css_parent(css));
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (parent)
loop if
loop for
loop while
str : 		sched_online_group(tg, parent);
loop INIT
loop if
loop for
loop while
str : 	return 0;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void cpu_cgroup_css_free(struct cgroup_subsys_state *css)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_group *tg = css_tg(css);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sched_destroy_group(tg);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void cpu_cgroup_css_offline(struct cgroup_subsys_state *css)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_group *tg = css_tg(css);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sched_offline_group(tg);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int cpu_cgroup_can_attach(struct cgroup_subsys_state *css,
loop if
loop for
loop while
str : 				 struct cgroup_taskset *tset)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *task;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cgroup_taskset_for_each(task, css, tset) {
loop if
loop for
loop while
str : #ifdef CONFIG_RT_GROUP_SCHED
loop INIT
loop if
loop for
loop while
str : 		if (!sched_rt_can_attach(css_tg(css), task))
loop INIT
loop if
loop for
loop while
str : 			return -EINVAL;
loop INIT
loop if
loop for
loop while
str : #else
loop INIT
loop if
loop for
loop while
str : 		/* We don't support RT-tasks being in separate groups */
loop INIT
loop if
loop for
loop while
str : 		if (task->sched_class != &fair_sched_class)
loop INIT
loop if
loop for
loop while
str : 			return -EINVAL;
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	return 0;
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void cpu_cgroup_attach(struct cgroup_subsys_state *css,
loop if
loop for
loop while
str : 			      struct cgroup_taskset *tset)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_struct *task;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cgroup_taskset_for_each(task, css, tset)
loop if
loop for
loop while
str : 		sched_move_task(task);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static void cpu_cgroup_exit(struct cgroup_subsys_state *css,
loop if
loop for
loop while
str : 			    struct cgroup_subsys_state *old_css,
loop INIT
loop if
loop for
loop while
str : 			    struct task_struct *task)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * cgroup_exit() is called in the copy_process() failure path.
loop INIT
loop if
loop for
loop while
str : 	 * Ignore this case since the task hasn't ran yet, this avoids
loop INIT
loop if
loop for
loop while
str : 	 * trying to poke a half freed task state from generic code.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (!(task->flags & PF_EXITING))
loop INIT
loop if
loop for
loop while
str : 		return;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	sched_move_task(task);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_FAIR_GROUP_SCHED
loop if
loop for
loop while
str : static int cpu_shares_write_u64(struct cgroup_subsys_state *css,
loop INIT
loop if
loop for
loop while
str : 				struct cftype *cftype, u64 shareval)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return sched_group_set_shares(css_tg(css), scale_load(shareval));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static u64 cpu_shares_read_u64(struct cgroup_subsys_state *css,
loop if
loop for
loop while
str : 			       struct cftype *cft)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_group *tg = css_tg(css);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return (u64) scale_load_down(tg->shares);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_CFS_BANDWIDTH
loop if
loop for
loop while
str : static DEFINE_MUTEX(cfs_constraints_mutex);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : const u64 max_cfs_quota_period = 1 * NSEC_PER_SEC; /* 1s */
loop if
loop for
loop while
str : const u64 min_cfs_quota_period = 1 * NSEC_PER_MSEC; /* 1ms */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int __cfs_schedulable(struct task_group *tg, u64 period, u64 runtime);
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int tg_set_cfs_bandwidth(struct task_group *tg, u64 period, u64 quota)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int i, ret = 0, runtime_enabled, runtime_was_enabled;
loop INIT
loop if
loop for
loop while
str : 	struct cfs_bandwidth *cfs_b = &tg->cfs_bandwidth;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (tg == &root_task_group)
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Ensure we have at some amount of bandwidth every period.  This is
loop INIT
loop if
loop for
loop while
str : 	 * to prevent reaching a state of large arrears when throttled via
loop INIT
loop if
loop for
loop while
str : 	 * entity_tick() resulting in prolonged exit starvation.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (quota < min_cfs_quota_period || period < min_cfs_quota_period)
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/*
loop if
loop for
loop while
str : 	 * Likewise, bound things on the otherside by preventing insane quota
loop INIT
loop if
loop for
loop while
str : 	 * periods.  This also allows us to normalize in computing quota
loop INIT
loop if
loop for
loop while
str : 	 * feasibility.
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (period > max_cfs_quota_period)
loop INIT
loop if
loop for
loop while
str : 		return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	mutex_lock(&cfs_constraints_mutex);
loop if
loop for
loop while
str : 	ret = __cfs_schedulable(tg, period, quota);
loop INIT
loop if
loop for
loop while
str : 	if (ret)
loop INIT
loop if
loop for
loop while
str : 		goto out_unlock;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	runtime_enabled = quota != RUNTIME_INF;
loop if
loop for
loop while
str : 	runtime_was_enabled = cfs_b->quota != RUNTIME_INF;
loop INIT
loop if
loop for
loop while
str : 	/*
loop INIT
loop if
loop for
loop while
str : 	 * If we need to toggle cfs_bandwidth_used, off->on must occur
loop INIT
loop if
loop for
loop while
str : 	 * before making related changes, and on->off must occur afterwards
loop INIT
loop if
loop for
loop while
str : 	 */
loop INIT
loop if
loop for
loop while
str : 	if (runtime_enabled && !runtime_was_enabled)
loop INIT
loop if
loop for
loop while
str : 		cfs_bandwidth_usage_inc();
loop INIT
loop if
loop for
loop while
str : 	raw_spin_lock_irq(&cfs_b->lock);
loop INIT
loop if
loop for
loop while
str : 	cfs_b->period = ns_to_ktime(period);
loop INIT
loop if
loop for
loop while
str : 	cfs_b->quota = quota;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	__refill_cfs_bandwidth_runtime(cfs_b);
loop if
loop for
loop while
str : 	/* restart the period timer (if active) to handle new period expiry */
loop INIT
loop if
loop for
loop while
str : 	if (runtime_enabled && cfs_b->timer_active) {
loop INIT
loop if
loop for
loop while
str : 		/* force a reprogram */
loop INIT
loop if
loop for
loop while
str : 		cfs_b->timer_active = 0;
loop INIT
loop if
loop for
loop while
str : 		__start_cfs_bandwidth(cfs_b);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	raw_spin_unlock_irq(&cfs_b->lock);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	for_each_possible_cpu(i) {
loop if
loop for
loop while
str : 		struct cfs_rq *cfs_rq = tg->cfs_rq[i];
loop INIT
loop if
loop for
loop while
str : 		struct rq *rq = cfs_rq->rq;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		raw_spin_lock_irq(&rq->lock);
loop if
loop for
loop while
str : 		cfs_rq->runtime_enabled = runtime_enabled;
loop INIT
loop if
loop for
loop while
str : 		cfs_rq->runtime_remaining = 0;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		if (cfs_rq->throttled)
loop if
loop for
loop while
str : 			unthrottle_cfs_rq(cfs_rq);
loop INIT
loop if
loop for
loop while
str : 		raw_spin_unlock_irq(&rq->lock);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	if (runtime_was_enabled && !runtime_enabled)
loop INIT
loop if
loop for
loop while
str : 		cfs_bandwidth_usage_dec();
loop INIT
loop if
loop for
loop while
str : out_unlock:
loop INIT
loop if
loop for
loop while
str : 	mutex_unlock(&cfs_constraints_mutex);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ret;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : int tg_set_cfs_quota(struct task_group *tg, long cfs_quota_us)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u64 quota, period;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	period = ktime_to_ns(tg->cfs_bandwidth.period);
loop if
loop for
loop while
str : 	if (cfs_quota_us < 0)
loop INIT
loop if
loop for
loop while
str : 		quota = RUNTIME_INF;
loop INIT
loop if
loop for
loop while
str : 	else
loop INIT
loop if
loop for
loop while
str : 		quota = (u64)cfs_quota_us * NSEC_PER_USEC;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return tg_set_cfs_bandwidth(tg, period, quota);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : long tg_get_cfs_quota(struct task_group *tg)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u64 quota_us;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (tg->cfs_bandwidth.quota == RUNTIME_INF)
loop if
loop for
loop while
str : 		return -1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	quota_us = tg->cfs_bandwidth.quota;
loop if
loop for
loop while
str : 	do_div(quota_us, NSEC_PER_USEC);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return quota_us;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : int tg_set_cfs_period(struct task_group *tg, long cfs_period_us)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u64 quota, period;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	period = (u64)cfs_period_us * NSEC_PER_USEC;
loop if
loop for
loop while
str : 	quota = tg->cfs_bandwidth.quota;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return tg_set_cfs_bandwidth(tg, period, quota);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : long tg_get_cfs_period(struct task_group *tg)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u64 cfs_period_us;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	cfs_period_us = ktime_to_ns(tg->cfs_bandwidth.period);
loop if
loop for
loop while
str : 	do_div(cfs_period_us, NSEC_PER_USEC);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return cfs_period_us;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static s64 cpu_cfs_quota_read_s64(struct cgroup_subsys_state *css,
loop if
loop for
loop while
str : 				  struct cftype *cft)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return tg_get_cfs_quota(css_tg(css));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int cpu_cfs_quota_write_s64(struct cgroup_subsys_state *css,
loop if
loop for
loop while
str : 				   struct cftype *cftype, s64 cfs_quota_us)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return tg_set_cfs_quota(css_tg(css), cfs_quota_us);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static u64 cpu_cfs_period_read_u64(struct cgroup_subsys_state *css,
loop if
loop for
loop while
str : 				   struct cftype *cft)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return tg_get_cfs_period(css_tg(css));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int cpu_cfs_period_write_u64(struct cgroup_subsys_state *css,
loop if
loop for
loop while
str : 				    struct cftype *cftype, u64 cfs_period_us)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return tg_set_cfs_period(css_tg(css), cfs_period_us);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : struct cfs_schedulable_data {
loop if
loop for
loop while
str : 	struct task_group *tg;
loop INIT
loop if
loop for
loop while
str : 	u64 period, quota;
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : /*
loop if
loop for
loop while
str :  * normalize group quota/period to be quota/max_period
loop INIT
loop if
loop for
loop while
str :  * note: units are usecs
loop INIT
loop if
loop for
loop while
str :  */
loop INIT
loop if
loop for
loop while
str : static u64 normalize_cfs_quota(struct task_group *tg,
loop INIT
loop if
loop for
loop while
str : 			       struct cfs_schedulable_data *d)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	u64 quota, period;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (tg == d->tg) {
loop if
loop for
loop while
str : 		period = d->period;
loop INIT
loop if
loop for
loop while
str : 		quota = d->quota;
loop INIT
loop if
loop for
loop while
str : 	} else {
loop INIT
loop if
loop for
loop while
str : 		period = tg_get_cfs_period(tg);
loop INIT
loop if
loop for
loop while
str : 		quota = tg_get_cfs_quota(tg);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	/* note: these should typically be equivalent */
loop if
loop for
loop while
str : 	if (quota == RUNTIME_INF || quota == -1)
loop INIT
loop if
loop for
loop while
str : 		return RUNTIME_INF;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return to_ratio(period, quota);
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int tg_cfs_schedulable_down(struct task_group *tg, void *data)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct cfs_schedulable_data *d = data;
loop INIT
loop if
loop for
loop while
str : 	struct cfs_bandwidth *cfs_b = &tg->cfs_bandwidth;
loop INIT
loop if
loop for
loop while
str : 	s64 quota = 0, parent_quota = -1;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (!tg->parent) {
loop if
loop for
loop while
str : 		quota = RUNTIME_INF;
loop INIT
loop if
loop for
loop while
str : 	} else {
loop INIT
loop if
loop for
loop while
str : 		struct cfs_bandwidth *parent_b = &tg->parent->cfs_bandwidth;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		quota = normalize_cfs_quota(tg, d);
loop if
loop for
loop while
str : 		parent_quota = parent_b->hierarchal_quota;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 		/*
loop if
loop for
loop while
str : 		 * ensure max(child_quota) <= parent_quota, inherit when no
loop INIT
loop if
loop for
loop while
str : 		 * limit is set
loop INIT
loop if
loop for
loop while
str : 		 */
loop INIT
loop if
loop for
loop while
str : 		if (quota == RUNTIME_INF)
loop INIT
loop if
loop for
loop while
str : 			quota = parent_quota;
loop INIT
loop if
loop for
loop while
str : 		else if (parent_quota != RUNTIME_INF && quota > parent_quota)
loop INIT
loop if
loop for
loop while
str : 			return -EINVAL;
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 	cfs_b->hierarchal_quota = quota;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int __cfs_schedulable(struct task_group *tg, u64 period, u64 quota)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	int ret;
loop INIT
loop if
loop for
loop while
str : 	struct cfs_schedulable_data data = {
loop INIT
loop if
loop for
loop while
str : 		.tg = tg,
loop INIT
loop if
loop for
loop while
str : 		.period = period,
loop INIT
loop if
loop for
loop while
str : 		.quota = quota,
loop INIT
loop if
loop for
loop while
str : 	};
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	if (quota != RUNTIME_INF) {
loop if
loop for
loop while
str : 		do_div(data.period, NSEC_PER_USEC);
loop INIT
loop if
loop for
loop while
str : 		do_div(data.quota, NSEC_PER_USEC);
loop INIT
loop if
loop for
loop while
str : 	}
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	rcu_read_lock();
loop if
loop for
loop while
str : 	ret = walk_tg_tree(tg_cfs_schedulable_down, tg_nop, &data);
loop INIT
loop if
loop for
loop while
str : 	rcu_read_unlock();
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return ret;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int cpu_stats_show(struct seq_file *sf, void *v)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	struct task_group *tg = css_tg(seq_css(sf));
loop INIT
loop if
loop for
loop while
str : 	struct cfs_bandwidth *cfs_b = &tg->cfs_bandwidth;
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	seq_printf(sf, "nr_periods %d\n", cfs_b->nr_periods);
loop if
loop for
loop while
str : 	seq_printf(sf, "nr_throttled %d\n", cfs_b->nr_throttled);
loop INIT
loop if
loop for
loop while
str : 	seq_printf(sf, "throttled_time %llu\n", cfs_b->throttled_time);
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : 	return 0;
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_CFS_BANDWIDTH */
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_FAIR_GROUP_SCHED */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #ifdef CONFIG_RT_GROUP_SCHED
loop if
loop for
loop while
str : static int cpu_rt_runtime_write(struct cgroup_subsys_state *css,
loop INIT
loop if
loop for
loop while
str : 				struct cftype *cft, s64 val)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return sched_group_set_rt_runtime(css_tg(css), val);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static s64 cpu_rt_runtime_read(struct cgroup_subsys_state *css,
loop if
loop for
loop while
str : 			       struct cftype *cft)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return sched_group_rt_runtime(css_tg(css));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static int cpu_rt_period_write_uint(struct cgroup_subsys_state *css,
loop if
loop for
loop while
str : 				    struct cftype *cftype, u64 rt_period_us)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return sched_group_set_rt_period(css_tg(css), rt_period_us);
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static u64 cpu_rt_period_read_uint(struct cgroup_subsys_state *css,
loop if
loop for
loop while
str : 				   struct cftype *cft)
loop INIT
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	return sched_group_rt_period(css_tg(css));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
str : #endif /* CONFIG_RT_GROUP_SCHED */
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : static struct cftype cpu_files[] = {
loop if
loop for
loop while
str : #ifdef CONFIG_FAIR_GROUP_SCHED
loop INIT
loop if
loop for
loop while
str : 	{
loop INIT
loop if
loop for
loop while
str : 		.name = "shares",
loop INIT
loop if
loop for
loop while
str : 		.read_u64 = cpu_shares_read_u64,
loop INIT
loop if
loop for
loop while
str : 		.write_u64 = cpu_shares_write_u64,
loop INIT
loop if
loop for
loop while
str : 	},
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_CFS_BANDWIDTH
loop INIT
loop if
loop for
loop while
str : 	{
loop INIT
loop if
loop for
loop while
str : 		.name = "cfs_quota_us",
loop INIT
loop if
loop for
loop while
str : 		.read_s64 = cpu_cfs_quota_read_s64,
loop INIT
loop if
loop for
loop while
str : 		.write_s64 = cpu_cfs_quota_write_s64,
loop INIT
loop if
loop for
loop while
str : 	},
loop INIT
loop if
loop for
loop while
str : 	{
loop INIT
loop if
loop for
loop while
str : 		.name = "cfs_period_us",
loop INIT
loop if
loop for
loop while
str : 		.read_u64 = cpu_cfs_period_read_u64,
loop INIT
loop if
loop for
loop while
str : 		.write_u64 = cpu_cfs_period_write_u64,
loop INIT
loop if
loop for
loop while
str : 	},
loop INIT
loop if
loop for
loop while
str : 	{
loop INIT
loop if
loop for
loop while
str : 		.name = "stat",
loop INIT
loop if
loop for
loop while
str : 		.seq_show = cpu_stats_show,
loop INIT
loop if
loop for
loop while
str : 	},
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : #ifdef CONFIG_RT_GROUP_SCHED
loop INIT
loop if
loop for
loop while
str : 	{
loop INIT
loop if
loop for
loop while
str : 		.name = "rt_runtime_us",
loop INIT
loop if
loop for
loop while
str : 		.read_s64 = cpu_rt_runtime_read,
loop INIT
loop if
loop for
loop while
str : 		.write_s64 = cpu_rt_runtime_write,
loop INIT
loop if
loop for
loop while
str : 	},
loop INIT
loop if
loop for
loop while
str : 	{
loop INIT
loop if
loop for
loop while
str : 		.name = "rt_period_us",
loop INIT
loop if
loop for
loop while
str : 		.read_u64 = cpu_rt_period_read_uint,
loop INIT
loop if
loop for
loop while
str : 		.write_u64 = cpu_rt_period_write_uint,
loop INIT
loop if
loop for
loop while
str : 	},
loop INIT
loop if
loop for
loop while
str : #endif
loop INIT
loop if
loop for
loop while
str : 	{ }	/* terminate */
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : struct cgroup_subsys cpu_cgroup_subsys = {
loop if
loop for
loop while
str : 	.name		= "cpu",
loop INIT
loop if
loop for
loop while
str : 	.css_alloc	= cpu_cgroup_css_alloc,
loop INIT
loop if
loop for
loop while
str : 	.css_free	= cpu_cgroup_css_free,
loop INIT
loop if
loop for
loop while
str : 	.css_online	= cpu_cgroup_css_online,
loop INIT
loop if
loop for
loop while
str : 	.css_offline	= cpu_cgroup_css_offline,
loop INIT
loop if
loop for
loop while
str : 	.can_attach	= cpu_cgroup_can_attach,
loop INIT
loop if
loop for
loop while
str : 	.attach		= cpu_cgroup_attach,
loop INIT
loop if
loop for
loop while
str : 	.exit		= cpu_cgroup_exit,
loop INIT
loop if
loop for
loop while
str : 	.subsys_id	= cpu_cgroup_subsys_id,
loop INIT
loop if
loop for
loop while
str : 	.base_cftypes	= cpu_files,
loop INIT
loop if
loop for
loop while
str : 	.early_init	= 1,
loop INIT
loop if
loop for
loop while
str : };
loop INIT
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : #endif	/* CONFIG_CGROUP_SCHED */
loop if
loop for
loop while
str : 
list str ok : INIT :  
str : void dump_cpu_task(int cpu)
loop if
loop for
loop while
str : {
loop INIT
loop if
loop for
loop while
str : 	pr_info("Task dump for CPU %d:\n", cpu);
loop INIT
loop if
loop for
loop while
str : 	sched_show_task(cpu_curr(cpu));
loop INIT
loop if
loop for
loop while
str : }
loop INIT
loop if
loop for
loop while
