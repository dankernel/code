list print :      (nil) ( 0x2105040       INIT)  0x2105060 
list print :  0x2105040 ( 0x2105060         if)  0x2105080 
list print :  0x2105060 ( 0x2105080        for)  0x21050a0 
list print :  0x2105080 ( 0x21050a0      while)      (nil) 
[ OK ] open : 3 ok... 
str : /*[2]
strstr : INIT : /* : 
strstr : if : /* : 
strstr : for : /* : 
strstr : while : /* : 
str :  *  kernel/sched/core.c[23]
strstr : INIT :  *  kernel/sched/core.c : 
strstr : if :  *  kernel/sched/core.c : 
strstr : for :  *  kernel/sched/core.c : 
strstr : while :  *  kernel/sched/core.c : 
str :  *[2]
strstr : INIT :  * : 
strstr : if :  * : 
strstr : for :  * : 
strstr : while :  * : 
str :  *  Kernel scheduler and related syscalls[41]
strstr : INIT :  *  Kernel scheduler and related syscalls : 
strstr : if :  *  Kernel scheduler and related syscalls : 
strstr : for :  *  Kernel scheduler and related syscalls : 
strstr : while :  *  Kernel scheduler and related syscalls : 
str :  *[2]
strstr : INIT :  * : 
strstr : if :  * : 
strstr : for :  * : 
strstr : while :  * : 
str :  *  Copyright (C) 1991-2002  Linus Torvalds[43]
strstr : INIT :  *  Copyright (C) 1991-2002  Linus Torvalds : 
strstr : if :  *  Copyright (C) 1991-2002  Linus Torvalds : 
strstr : for :  *  Copyright (C) 1991-2002  Linus Torvalds : 
strstr : while :  *  Copyright (C) 1991-2002  Linus Torvalds : 
str :  *[2]
strstr : INIT :  * : 
strstr : if :  * : 
strstr : for :  * : 
strstr : while :  * : 
str :  *  1996-12-23  Modified by Dave Grothe to fix bugs in semaphores and[69]
strstr : INIT :  *  1996-12-23  Modified by Dave Grothe to fix bugs in semaphores and : 
strstr : if :  *  1996-12-23  Modified by Dave Grothe to fix bugs in semaphores and : 
strstr : for :  *  1996-12-23  Modified by Dave Grothe to fix bugs in semaphores and : 
strstr : while :  *  1996-12-23  Modified by Dave Grothe to fix bugs in semaphores and : 
str :  *		make semaphores SMP safe[28]
strstr : INIT :  *		make semaphores SMP safe : 
strstr : if :  *		make semaphores SMP safe : 
strstr : for :  *		make semaphores SMP safe : 
strstr : while :  *		make semaphores SMP safe : 
str :  *  1998-11-19	Implemented schedule_timeout() and related stuff[63]
strstr : INIT :  *  1998-11-19	Implemented schedule_timeout() and related stuff : 
strstr : if :  *  1998-11-19	Implemented schedule_timeout() and related stuff : 
strstr : for :  *  1998-11-19	Implemented schedule_timeout() and related stuff : 
strstr : while :  *  1998-11-19	Implemented schedule_timeout() and related stuff : 
str :  *		by Andrea Arcangeli[23]
strstr : INIT :  *		by Andrea Arcangeli : 
strstr : if :  *		by Andrea Arcangeli : 
strstr : for :  *		by Andrea Arcangeli : 
strstr : while :  *		by Andrea Arcangeli : 
str :  *  2002-01-04	New ultra-scalable O(1) scheduler by Ingo Molnar:[64]
strstr : INIT :  *  2002-01-04	New ultra-scalable O(1) scheduler by Ingo Molnar: : 
strstr : if :  *  2002-01-04	New ultra-scalable O(1) scheduler by Ingo Molnar: : 
strstr : for :  *  2002-01-04	New ultra-scalable O(1) scheduler by Ingo Molnar: : 
strstr : while :  *  2002-01-04	New ultra-scalable O(1) scheduler by Ingo Molnar: : 
str :  *		hybrid priority-list and round-robin design with[52]
strstr : INIT :  *		hybrid priority-list and round-robin design with : 
strstr : if :  *		hybrid priority-list and round-robin design with : 
strstr : for :  *		hybrid priority-list and round-robin design with : 
strstr : while :  *		hybrid priority-list and round-robin design with : 
str :  *		an array-switch method of distributing timeslices[53]
strstr : INIT :  *		an array-switch method of distributing timeslices : 
strstr : if :  *		an array-switch method of distributing timeslices : 
strstr : for :  *		an array-switch method of distributing timeslices : 
strstr : while :  *		an array-switch method of distributing timeslices : 
str :  *		and per-CPU runqueues.  Cleanups and useful suggestions[59]
strstr : INIT :  *		and per-CPU runqueues.  Cleanups and useful suggestions : 
strstr : if :  *		and per-CPU runqueues.  Cleanups and useful suggestions : 
strstr : for :  *		and per-CPU runqueues.  Cleanups and useful suggestions : 
strstr : while :  *		and per-CPU runqueues.  Cleanups and useful suggestions : 
str :  *		by Davide Libenzi, preemptible kernel bits by Robert Love.[62]
strstr : INIT :  *		by Davide Libenzi, preemptible kernel bits by Robert Love. : 
strstr : if :  *		by Davide Libenzi, preemptible kernel bits by Robert Love. : 
strstr : for :  *		by Davide Libenzi, preemptible kernel bits by Robert Love. : 
strstr : while :  *		by Davide Libenzi, preemptible kernel bits by Robert Love. : 
str :  *  2003-09-03	Interactivity tuning by Con Kolivas.[51]
strstr : INIT :  *  2003-09-03	Interactivity tuning by Con Kolivas. : 
strstr : if :  *  2003-09-03	Interactivity tuning by Con Kolivas. : 
strstr : for :  *  2003-09-03	Interactivity tuning by Con Kolivas. : 
strstr : while :  *  2003-09-03	Interactivity tuning by Con Kolivas. : 
str :  *  2004-04-02	Scheduler domains code by Nick Piggin[52]
strstr : INIT :  *  2004-04-02	Scheduler domains code by Nick Piggin : 
strstr : if :  *  2004-04-02	Scheduler domains code by Nick Piggin : 
strstr : for :  *  2004-04-02	Scheduler domains code by Nick Piggin : 
strstr : while :  *  2004-04-02	Scheduler domains code by Nick Piggin : 
str :  *  2007-04-15  Work begun on replacing all interactivity tuning with a[71]
strstr : INIT :  *  2007-04-15  Work begun on replacing all interactivity tuning with a : 
strstr : if :  *  2007-04-15  Work begun on replacing all interactivity tuning with a : 
strstr : for :  *  2007-04-15  Work begun on replacing all interactivity tuning with a : 
strstr : while :  *  2007-04-15  Work begun on replacing all interactivity tuning with a : 
str :  *              fair scheduling design by Con Kolivas.[54]
strstr : INIT :  *              fair scheduling design by Con Kolivas. : 
strstr : if :  *              fair scheduling design by Con Kolivas. : 
strstr : for :  *              fair scheduling design by Con Kolivas. : 
strstr : while :  *              fair scheduling design by Con Kolivas. : 
str :  *  2007-05-05  Load balancing (smp-nice) and other improvements[64]
strstr : INIT :  *  2007-05-05  Load balancing (smp-nice) and other improvements : 
strstr : if :  *  2007-05-05  Load balancing (smp-nice) and other improvements : 
strstr : for :  *  2007-05-05  Load balancing (smp-nice) and other improvements : 
strstr : while :  *  2007-05-05  Load balancing (smp-nice) and other improvements : 
str :  *              by Peter Williams[33]
strstr : INIT :  *              by Peter Williams : 
strstr : if :  *              by Peter Williams : 
strstr : for :  *              by Peter Williams : 
strstr : while :  *              by Peter Williams : 
str :  *  2007-05-06  Interactivity improvements to CFS by Mike Galbraith[67]
strstr : INIT :  *  2007-05-06  Interactivity improvements to CFS by Mike Galbraith : 
strstr : if :  *  2007-05-06  Interactivity improvements to CFS by Mike Galbraith : 
strstr : for :  *  2007-05-06  Interactivity improvements to CFS by Mike Galbraith : 
strstr : while :  *  2007-05-06  Interactivity improvements to CFS by Mike Galbraith : 
str :  *  2007-07-01  Group scheduling enhancements by Srivatsa Vaddagiri[67]
strstr : INIT :  *  2007-07-01  Group scheduling enhancements by Srivatsa Vaddagiri : 
strstr : if :  *  2007-07-01  Group scheduling enhancements by Srivatsa Vaddagiri : 
strstr : for :  *  2007-07-01  Group scheduling enhancements by Srivatsa Vaddagiri : 
strstr : while :  *  2007-07-01  Group scheduling enhancements by Srivatsa Vaddagiri : 
str :  *  2007-11-29  RT balancing improvements by Steven Rostedt, Gregory Haskins,[77]
strstr : INIT :  *  2007-11-29  RT balancing improvements by Steven Rostedt, Gregory Haskins, : 
strstr : if :  *  2007-11-29  RT balancing improvements by Steven Rostedt, Gregory Haskins, : 
strstr : for :  *  2007-11-29  RT balancing improvements by Steven Rostedt, Gregory Haskins, : 
strstr : while :  *  2007-11-29  RT balancing improvements by Steven Rostedt, Gregory Haskins, : 
str :  *              Thomas Gleixner, Mike Kravetz[45]
strstr : INIT :  *              