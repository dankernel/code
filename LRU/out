while(more); 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(*name == ' '); 

while(*args == ' '); 

while(remaining > 0); 

while(d_mountpoint(root.dentry) && follow_down_one(&root)) 

while(d_mountpoint(root.dentry) && follow_down_one(&root)) 

while(0) 

while(hash < EXPORT_HASHMAX && export_table[hash]==NULL); 

while(raparm) { 

while(1) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(bytes_left > 0) { 

while(le16_to_cpu(el->l_tree_depth) > 1) { 

while(run_max && !list_empty(&dlm->purge_list)) { 

while(*p) { 

while(head) { 

while(wait_bh > wait) { 

while(num--) { 

while(cs < max_slots) { 

while(current_slot < max_slots) { 

while((offset = ocfs2_find_next_zero_bit(bitmap, total_bits, start)) != -1) { 

while(num_bits--) 

while((i = find_next_bit(configured_nodes, 

while(tmp--) { 

while(status < 0); 

while() loop in posix_locks_deadlock() eventually completes. 

while(0) 

while(0) 

while(0) 

while(0) 

while(more); 

while(partial > p) { 

while(--n); 

while(0) 

while(0) 

while(0) 

while((tmp >>= 1UL) != 0UL) 

while(wait_bh > wait) { 

while(partial > p) 

while(0) 

while(0) 

while(--n);						\ 

while(0) 

while( 0 ) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0); (void)(c), 0; }) 

while(0) 

while(ofs < max_ofs && *(uint32_t *)(&buf[ofs]) == 0xFFFFFFFF) 

while(ofs < jeb->offset + c->sector_size) { 

while(count--) { 

while(offset < end) { 

while(ret == -EAGAIN) { 

while(fds) { 

while(0) 

while(raw->next_in_ino) 

while(0) 

while((ret = zlib_inflate(&inf_strm, Z_FINISH)) == Z_OK) 

while(this) { 

while(next) { 

while(ref_obsolete(raw)) { 

while(this) { 

while(--retlen); 

while(ic->scan_dents) { 

while(ic->scan_dents) { 

while(ic->scan_dents) { 

while((frag = frag_prev(frag)) && frag->ofs >= min) { 

while((frag = frag_next(frag)) && frag->ofs+frag->size <= max) { 

while(offset < orig_end) { 

while(repeat) { 

while(writelen) { 

while(val) { 

while(free_blocks <= wanted); 

while(size > 0); 

while(atomic_read(&sdp->sd_log_in_flight)); 

while(bh && size); 

while(t && !gfs2_ail_flush_reqd(sdp) && 

while(total) { 

while(1); 

while(!error); 

while(tmp == 0 && ptr < end) { 

while(lfn); 

while(lfn); 

while(1); 

while(1) { 

while(be64_to_cpu(*ptr) == d); 

while(diff) { 

while(!list_empty(&jd->extent_list)) { 

while(1) { 

while(size > 0); 

while(size > 0); 

while(atomic_read(&sdp->sd_log_freeze)); 

while(copied < size); 

while(!list_empty(list)) { 

while(bh != head); 

while(0) 

while(1) { 

while(src_cnt > 0) { 

while(0) 

while(1) { 

while(desc->state & IRQS_INPROGRESS) 

while(1) { 

while(0) 

while(0) 

while(1) loop here. 

while(1) loop here. 

while(cont); 

while(1); 

while(!isspace(*ptr)) { 

while(0) 

while(*p) { 

while(num--) 

while(0) 

while(0) 

while(count > 0 && pc < len); 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(pnfs_osd_xdr_decode_layout_comp(&comp, &iter, xdr, &status)) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(count && *victim == '\0') 

while(1); 

while(timeout-- > 0) 

while(timeout-- > 0) 

while(c) 

while(ad1848_isapnp_list[i].card_vendor != 0) { 

while(bal<0) { 

while(0);	/* do only once (so we can use break instead of goto) */ 

while(wCount--) { 

while(n<top) 

while(*list) 

while(s && s->unit_minor <= unit) 

while(0) 

while( env && *env ) { 

while(YY_CURRENT_BUFFER){ 

while(0) 

while(i--) { 

while(0) 

while(0) 

while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=8;}} 

while(pattern[x--] == pattern[y--]) { 

while(0) 

while(1) { 

while(*paa && ! --((**paa)->count)){ 

while(*fmt) */ 

while(count < len){ 

while(*string) { 

while(1) { 

while(1) { 

while(0) 

while(0) 

while(1); 

while(0) 

while(0) 

while(time_before(jiffies, atux_trhfa_timeout)) 

while(0) 

while(0) 

while(0) 

while(0) 

while(__raw_readl(SDGENCNTA)) ; 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(len--) { 

while(1) { 

while(0) 

while(0); 

while(0) 

while(1);	/* Halt */ 

while((!(cmd.resp[0] & OCR_BUSY)) && --timeout); 

while((!(cmd.resp[0] & OCR_BUSY)) && --timeout); 

while(0) 

while(per_cpu(cpu_state, cpu) != CPU_ONLINE) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(1); }); 

while(1); }); 

while(0) 

while(0) 

while(0) 

while(0); 

while(0); 

while(0) 

while(0) 

while(0) 

while(0) 

while(start < end) { 

while(start < end) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(start < end) 

while(0) 

while(0) 

while( 0 ) 

while( 0 ) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while( tt_microwire.mask != 0x7ff) 

while(vaddr < end3); 

while(vaddr < end); 

while(0) 

while( RTC_READ(RTC_FREQ_SELECT) & RTC_UIP ) { 

while((id != CISTPL_END) && (pos < 0x10000)) { 

while((ch = *(bptr++)) != 0) { 

while(new < CONTEXTS_NUM) { 

while((character = prom_nbgetchar()) == -1) ; 

while(prom_nbputchar(c) == -1) ; 

while(*p) p++; p -= 2; 

while(*p) p++; p -= 2; 

while(vaddr < end) { 

while(1) 

while(pages) { 

while(pages) { 

while(!(sio01.srb_csrb & 1)) 

while(count--) { 

while(events & (irq_bit - 1)); 

while(events >= irq_bit); 

while(1); 

while(1); 

while(0) 

while(0); 

while(0); 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(kexec_all_irq_disabled == 0) 

while(node) { 

while(0) 

while(0) 

while(0) 

while(error == 0); 

while(0) 

while(n && !IO_CHECK_ALIGN(p, 4)) { 

while(n >= 4) { 

while(n) { 

while(n && (!IO_CHECK_ALIGN(vsrc, 4) || !IO_CHECK_ALIGN(dest, 4))) { 

while(n >= 4) { 

while(n) { 

while(n && (!IO_CHECK_ALIGN(vdest, 4) || !IO_CHECK_ALIGN(src, 4))) { 

while(n >= 4) { 

while(n) { 

while(0) 

while(0) 

while(np) { 

while(0) 

while(in_le32(&((regs)->status)) & (ACTIVE|FLUSH))	\ 

while(0) 

while(in_le32(&((regs)->status)) & (RUN)) \ 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0); } } while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(mpic_irq_read(src, MPIC_INFO(IRQ_VECTOR_PRI)) & MPIC_VECPRI_MASK); 

while(!(mpic_irq_read(src, MPIC_INFO(IRQ_VECTOR_PRI)) & MPIC_VECPRI_MASK)); 

while( mpic_read(mpic->gregs, MPIC_INFO(GREG_GLOBAL_CONF_0)) 

while(np) { 

while(timeout_ms--) { 

while(in_le32(mpsc_base + MPSC_0_CR2_OFFSET) & MPSC_CHR_2_TCS) 

while(0) 

while(0) 

while( c == ' ' || c == '\t' ) 

while( c != '\n' ) 

while( c != ' ' && c != '\t' && c != '\n' ); 

while(test_bit(HPTE_LOCK_BIT, word)) 

while(0) 

while(size > 0) { 

while(0) 

while(0) 

while(old_pte != __cmpxchg_u64((unsigned long *)ptep, 

while(0) 

while(per_cpu(split_state, i).step < step) 

while(per_cpu(split_state, cpu).step < SYNC_STEP_FINISHED) 

while(test_and_set_bit(pe, phb->ioda.pe_alloc)); 

while(c--) 

while(c--) 

while(c--) 

while(c--) 

while(c--) 

while(c--) 

while(total_len > 0 && (rc == OPAL_BUSY || 

while(rc == OPAL_SUCCESS && 

while(1) 

while(0) 

while(0) 

while(0) 

while(0) 

while(bytes--) { 

while(0) \ 

while(offset < NVRAM_SIZE); 

while(count-- && cmd.cmdptr < cmd.cmdend) { 

while(!list_empty(&dev->functions)) { 

while((in_le32(&pmac_irq_hw[i]->enable) & bit) 

while((in_le32(&pmac_irq_hw[i]->enable) & bit) 

while(0) 

while(0) 

while(*ppp) { 

while(0) 

while(*cpp) { 

while(!tb_req) 

while(*cpp) { 

while(0) 

while(0) 

while(0) 

while(child) { 

while(!tb_req) 

while(host->state != state_idle) { 

while(p) { 

while(size-->0) 

while(np) { 

while(np) { 

while(np) { 

while(np) { 

while(np) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(1);				/* Nuke warning.  */ 

while(1);				/* Nuke warning.  */ 

while(p) { 

while(1) 

while(p) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(1);				/* Silence gcc.	 */ 

while(1); 

while(1); 

while(start < end) { 

while(1) { 

while(1) { 

while(addr != end); 

while(addr != end); 

while(1) { 

while(1); 

while(1) ; 

while(1) ; 

while(0) 

while(stall--) barrier(); 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0); 

while(timeout-- > 0) { 

while(counts[cpu] == (local_tlb_flush_counts[cpu].count & 0xffff)) 

while(1); 

while(*p) { 

while(0) 

while(0) 

while(1) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(!FLOWCTL_QUERY(LINE)) 

while(0) 

while(0) 

while(0) 

while(!FLOWCTL_QUERY(LINE)) 

while(0) 

while(0); 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(1) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(!devices_found && hpa < io_io_high); 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(1) 

while(0) 

while(Sgl_iszero_hiddenhigh7mantissa(result)) 

while(Dbl_iszero_hiddenhigh7mantissa(resultp1)) 

while(Dbl_iszero_hiddenhigh7mantissa(dbl_opndA)) {		\ 

while(Dbl_iszero_hidden(dbl_opndA)) {				\ 

while(Dbl_iszero_hiddenhigh7mantissa(resultp1)) 

while(Sgl_iszero_hiddenhigh7mantissa(result)) 

while(Sgl_iszero_hiddenhigh7mantissa(opnd2)) { 

while(Sgl_iszero_hidden(opnd2)) { 

while(0) 

while(0) 

while(0) 

while(*(vulp)PYXIS_RT_COUNT - pyxis_cc < 4096); 

while((result.bits.status & 1) && (++loops < 10)); 

while((ret2 >> 61) == 1); 

while(*str); 

while(0); 

while(0) 

while(0) 

while(0) 

while(0) 

while(1);	/* Halt */ 

while(0) 

while(0) 

while(1);	/* Halt */ 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(i < slip->more){ 

while(*str && *str!=',') { 

while(1){ 

while(1) { 

while(1){ 

while(dev->start_sg < dev->end_sg){ 

while((end < nsectors) && 

while((n < len) && (n != 0)); 

while(start < nsectors); 

while(1){ 

while(0) 

while(0) 

while(1); 

while(1); 

while(1) /* nothing */; 

while((ch = getDebugChar ()) != '$') 

while(kgdb_started && (getDebugChar() != '+')); 

while(0) 

while(0) 

while(error && cntr--); 

while(error && cntr--); 

while(0); 

while( (*R_DMA_CH##n##_CMD & IO_MASK( R_DMA_CH0_CMD, cmd )) != \ 

while(0) 

while( 0 ) 

while( 0 ) 

while( 0 ) 

while( 0 ) 

while( 0 ) 

while( 0 ) 

while( 0 ) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(1);	/* Halt */ 

while(1); 

while(*s >= '0' && *s <= '9') 

while(length > 0) { 

while(kgdb_started && (getDebugChar() != '+')); 

while(0) 

while(error && cntr--); 

while(error && cntr--); 

while( (written < count) && (p < eeprom.size)) 

while( written < count && ( p % eeprom.sequential_write_pagesize )); 

while( (read < count)) 

while(0) 

while(1);	/* Halt */ 

while(node) { 

while(rw					&& 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while((lp)->lock) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(count >= 2) { 

while(count >= 2) { 

while(n--) { 

while(0) 

while(0) 

while(addr < end) { 

while(start < end) { 

while(start < end) { 

while(start < end) { 

while(page < ((unsigned long)(vaddr + len))) { 

while(sz != 0) { 

while(sz != 0) { 

while(addr < end) { 

while(0) 

while(0) 

while(0) 

while((status & mask) != mask) 

while(0) 

while(0) 

while(0) 

while(0) 

while(cmd->status == 1) 

while(0) 

while(!list_empty(&sat->sensors)) { 

while(0); 

while(--i >= 0) 

while(*label == ' ') 

while(*val && (*val != '=')) { 

while(*val == ' ') 

while(0) 

while(0) 

while((pmu_state != idle && pmu_state != locked) || !req->complete) 

while(0) 

while(!req.complete) 

while(!kthread_should_stop()) { 

while(!kthread_should_stop()) { 

while(0) 

while(0) 

while(0) 

while(adb_handler[index].busy) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while((bay->state != mb_empty) && 

while(0) 

while(0)". 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0); 

while(retries-- > 0); 

while(n++ < 10) { 

while(cb->device) { 

while(++count < limit); 

while(len2 < idlen && retval > 0) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(1) { 

while(ret==1) 

while(index != 0xFFFF); 

while(delay--) { 

while(sisbios_mode[i++].mode_no[0] != 0) { 

while(delay--) { 

while(sisbios_mode[i].mode_no[0] != 0) { 

while(sis_crt2type[i].type_no != -1) { 

while((SiS_GetRegByte(SiS_Pr->SiS_P3da) & 0x08) && --watchdog); 

while((!(SiS_GetRegByte(SiS_Pr->SiS_P3da) & 0x08)) && --watchdog); 

while((SiS_GetReg(SiS_Pr->SiS_Part1Port,reg) & 0x02) && --watchdog); 

while((!(SiS_GetReg(SiS_Pr->SiS_Part1Port,reg) & 0x02)) && --watchdog); 

while(sis_tvtype[i].type_no != -1) { 

while(mycustomttable[i].chipID != 0) { 

while(mycustomttable[i].chipID != 0) { 

while(mycustomttable[i].chipID); 

while((temp) && i--); 

while((sisfb_vrate[i].idx != 0) && (sisfb_vrate[i].xres <= xres)) { 

while(nonscalingmodes[i] != 0xff) { 

while( (sisbios_mode[ivideo->sisfb_mode_idx].mode_no[0] != 0) && 

while( (sisbios_mode[search_idx].mode_no[0] != 0) && 

while(sisbios_mode[search_idx].mode_no[0] != 0) { 

while(count--); 

while(((temp == 0) || (temp == 0xffff)) && i--); 

while((temp) && i--); 

while(pohThis != &memheap->oh_free) { 

while(poh_freed != &memheap->oh_used) { 

while(pohThis != &memheap->oh_free) { 

while(0); 

while(SiS_Pr->SiS_EModeIDTable[j].Ext_ModeID != 0xff) { 

while(queuedata[i] != 0xFF); 

while((p2_01 <= 0) || (p2_02 <= 0)) { 

while((this_opt = strsep(&options, ",")) != NULL) { 

while((!(ivideo->video_vbase = ioremap(ivideo->video_base, (*mapsize))))) { 

while((pdev = pci_get_class(PCI_CLASS_BRIDGE_HOST, pdev))) { 

while((ranksize >>= 1)) reg += 0x10; 

while((MMIO_IN16(ivideo->mmio_vbase, BR(16)+2) & 0xE000) != 0xE000){}; \ 

while((MMIO_IN16(ivideo->mmio_vbase, BR(16)+2) & 0xE000) != 0xE000){}; \ 

while( (MMIO_IN16(ivideo->mmio_vbase, Q_STATUS+2) & 0x8000) != 0x8000){}; \ 

while( (MMIO_IN16(ivideo->mmio_vbase, Q_STATUS+2) & 0x8000) != 0x8000){}; \ 

while(0) 

while((countvideo = countvideo->next) != NULL) 

while(mychswtable[i].subsysVendor != 0); 

while((tableptr[p] | tableptr[p+1] << 8) != 0xffff); 

while(0) 

while((i810_readw(INSTDONE, mmio) & 0x7B) != 0x7B && --count);  

while((i810_readw(DISP_SL, mmio) & 0xFFF) && count--); 

while(!((1000000 * p_divisor)/(16 * 24 * target_freq)) &&  

while(0); 

while(*dataptr) { 

while((!(temp & SiS_Pr->SiS_DDC_Clk)) && --watchdog); 

while(0) 

while(0) 

while(burst_size >>= 1) (*burst)++; 

while(v&HD64461_LCDCCR_STBACK); 

while(0) 

while(1); 

while(pll->freq); 

while(timeout > 0) { 

while(0) 

while(0) 

while(0) 

while(read_reg_le32(par->dc_regs, SSTATUS) & 0x80); 

while(read_reg_le32(par->dc_regs, SSTATUS) & 0x80); 

while(read_reg_le32(par->dc_regs, SSTATUS) & 0x80); 

while(read_reg_le32(par->dc_regs, SSTATUS) & 0x80); 

while(read_reg_le32(par->dc_regs, SSTATUS) & 0x80); 

while(read_reg_le32(par->dc_regs, SSTATUS) & 0x80); 

while(!second); 

while(0); 

while(found != 1) { 

while(default_cmode > CMODE_8 && 

while(i != stop); 

while(*prev && (*prev)->img->flash_base < new_fl->img->flash_base) 

while(!this->dev_ready(mtd)); 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while((map_top - 1) < 0xffffffffUL) { 

while((map_top - 1) < 0xffffffffUL) { 

while((map_top - 1) < 0xffffffffUL) { 

while(len && (offset < MAX_TIG_FLASH_SIZE)) { 

while(len && (offset < MAX_TIG_FLASH_SIZE)) { 

while(len) { 

while(len) { 

while(len) { 

while(len) { 

while(mtd->size & (mtd->erasesize - 1)) 

while(len >= map_bankwidth(map)) { 

while(len >= map_bankwidth(map)) { 

while(z < words * map_bankwidth(map)) { 

while(z < words * map_bankwidth(map)) { 

while(len) { 

while(len) { 

while(len) { 

while(len >= map_bankwidth(map)) { 

while(len) 

while(not_useful(p,map)) 

while(len) 

while(not_useful(p, map)); 

while(len) 

while(len) 

while(len) 

while(nubus_readdir(&dir, &ent) != -1) 

while(nubus_readdir(&dir, &ent) != -1) 

while(nubus_readdir(&dir, &ent) != -1) 

while(!done); 

while(0) 

while(0) 

while(0) 

while(host_page_buffer_sz > 0) { 

while(1) { 

while(1) { 

while(dvb_ringbuffer_avail(rbuf) > DVB_RINGBUFFER_PKTHDRSIZE) { 

while((dvb_ringbuffer_avail(rbuf) - consumed) > DVB_RINGBUFFER_PKTHDRSIZE) { 

while(!ready) { 

while(time_before(jiffies, timeout)) { 

while(time_before(jiffies, timeout)) { 

while(time_before(jiffies, timeout)) { 

while(!(tda1004x_read_byte(state, TDA1004X_STATUS_CD) & 0x20)) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0); 

while(0); 

while(0); 

while(0); 

while(0) 

while(0) 

while(0); LOCK_GIVE(cptr->hdw->big_lock); 

while(0); LOCK_GIVE(cptr->hdw->big_lock); 

while(0); LOCK_GIVE(cptr->hdw->big_lock); 

while(0); LOCK_GIVE(cptr->hdw->big_lock); 

while(0); LOCK_GIVE(cptr->hdw->big_lock); 

while(0); LOCK_GIVE(cptr->hdw->big_lock); 

while(0); LOCK_GIVE(cptr->hdw->big_lock); 

while(0); LOCK_GIVE(cptr->hdw->big_lock); 

while(0); mutex_unlock(&sp->mutex); 

while(0); mutex_unlock(&sp->mutex); 

while(0); mutex_unlock(&sp->mutex); 

while(0); mutex_unlock(&sp->mutex); 

while(0); mutex_unlock(&sp->mutex); 

while(0); LOCK_GIVE(cptr->hdw->big_lock); 

while(0); mutex_unlock(&sp->mutex); 

while(0); LOCK_GIVE(cptr->hdw->big_lock); 

while(0) 

while(0) 

while(0); LOCK_GIVE(hdw->ctl_lock); 

while(0); LOCK_GIVE(hdw->ctl_lock); 

while(0); LOCK_GIVE(hdw->ctl_lock); 

while(0); LOCK_GIVE(hdw->ctl_lock); 

while(0); LOCK_GIVE(hdw->ctl_lock); 

while((action = bh_action(info)) != 0) { 

while(rx_get_frame(info, tty)); 

while(info && info->line != line) 

while(info) { 

while(1) { 

while(LoopCount < 2); 

while(end_time-- && !info->irq_occurred) { 

while(count) { 

while(inw((unsigned long)PLD_RTCCR)); 

while(inw((unsigned long)PLD_RTCCR)); 

while((pdev=pci_get_device(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82454NX, pdev))!=NULL) 

while(readl(cpg->reg + SEC_ACCEL_CMD) & SEC_CMD_DISABLE_SEC) 

while(ncpus--) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(count < length){ 

while(col++ < 16){      /* pad end of buffer with blanks */ 

while((state & EXCPQ_EMPTY) != EXCPQ_EMPTY)   

while(!(state & PCQ_EMPTY))   

while(dle != cur_dle)   

while( (status = readl(iadev->reg+IPHASE5575_BUS_STATUS_REG) & 0x7f))   

while((skb = skb_dequeue(&iadev->tx_backlog))) { 

while((skb = skb_dequeue(&tmp_tx_backlog)))  

while(sectors) { 

while(sectors) { 

while(sectors) { 

while(!list_empty(&newstripes)) { 

while(i >= 0 && buf[i] == ' ') 

while(ret && (unshifted_key != first)); 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(count--) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(owner); 

while(0) 

while(idx--); 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while( numAPs >= 1 ) { 

while( num_aps >= 1 ) { 

while( num_aps >= 1 ) { 

while( (*p).scan_complete == FALSE && ret == HCF_SUCCESS ) { 

while(0) 

while(0) 

while(0) 

while(0) 

while( (x) && (HCF_YIELD) ) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(i_InterruptFlag==1) */ 

while(!((inb(usp->usp_iobase + 0)) & TxBE)); */ 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(not timeout); */ 

while(1) { 

while(cnt < in_len) { 

while(nbytes > 0) 

while(pmicdata->nBytesInM != 0) 

while(!(((value32 >> 24) & 0xff) & 0x80)  && (retry<10)) */ 

while(!(Bytetemp & 0x80)) 

while(Bytetemp & 0x80) 

while(!(0x80 &rtl8723au_read8(pAdapter, EFUSE_CTRL+3)) && (tmpidx<100)) 

while((0x80 & rtl8723au_read8(pAdapter, EFUSE_CTRL+3)) && 

while((i < try_cnt) && ((ret == _FAIL) || (wait_ms == 0))); 

while((i < try_cnt) && ((ret == _FAIL) || (wait_ms == 0))); 

while((i < try_cnt) && ((ret == _FAIL)||(wait_ms == 0))); 

while((i < try_cnt) && ((ret == _FAIL)||(wait_ms == 0))); 

while(1) */ 

while(0) 

while(0) 

while((UINT)Adapter->PackInfo[iIndex].uiCurrentPacketsOnHost > 

while(0) 

while(0) 

while(0) 

while(0) 

while( start_time <= (tsf_low+(50*1024) ) ) { 

while(0) 

while(0) 

while(0); 

while(0); 

while(0); 

while(0); 

while(0) 

while(0) 

while(1){ 

while(1){ 

while(1){ 

while(1){ 

while(1){ 

while(1){ 

while(1){ 

while(1){ 

while(*tmp_p != 0x00) { 

while(false); 

while(false); 

while(frag_offset < buffer_len); 

while(check_putcodeOK_time--); 

while(check_bootOk_time--); 

while(check_time--); 

while(RF3_Final_Value!=RegValueToBeCheck && RetryTimes!=0) 

while(RF3_Final_Value!=RegValueToBeCheck && RetryTimes!=0) 

while(RF3_Final_Value!=RegValueToBeCheck && RetryTimes!=0) 

while(RF3_Final_Value!=RegValueToBeCheck && RetryTimes!=0) 

while(1) 

while(!channel_map[ch]); 

while(!channel_map[ieee->current_network.channel]); 

while(!GET_DOT11D_INFO(ieee)->channel_map[ch]); 

while(pList->next != &pTS->RxPendingPktList) 

while(!list_empty(&pTS->RxPendingPktList)) { 

while(skb->len > ETHERNET_HEADER_SIZE) { 

while(0) 

while(!list_empty(&pRxTs->RxPendingPktList)) 

while(!list_empty(&pRxTS->RxPendingPktList)) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while((vma = our_vma(mm, addr, count)) != NULL) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(++i < req->request.num_mapped_sgs); 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(1) { 

while(0) 

while(0) 

while(len && timeout) 

while(time_before(jiffies, i) && (inb(base + PIO_INT_REG) & EMPTY) && timeout) 

while(len && timeout) 

while(time_before(jiffies, i) && (inb(base + PIO_INT_REG) & EMPTY) && timeout) 

while(len && timeout) 

while(len && timeout) 

while(time_before(jiffies, i) && (inb(base + PIO_INT_REG) & FULL) && timeout) 

while(time_before(jiffies, i) && (inb(base + PIO_INT_REG) & FULL) && timeout) 

while(time_before(jiffies, i) && !(inb(base + STATUS_REG) & SCI)) 

while(time_before(jiffies, i) && !(inb(base + STATUS_REG) & SCI)) 

while((idev=pnp_find_dev(NULL, id_table[i].vendor, 

while((idev=pnp_find_dev(NULL, id_table[i].vendor, 

while(0) 

while(0) 

while(0) 

while(curnode != NULL) { 

while((node = SLIST_FIRST(symlist_src2)) != NULL) { 

while(fgets(buf, sizeof(buf), ifile) != NULL) 

while(0) 

while(inb(G2STAT(base)) & G2STAT_INTPEND) { 

while(len >= 32) 

while(len > 0) 

while(len >= 32) 

while(len > 0) 

while(1) 

while(len > 0) 

while(0) 

while(0) 

while((siop = ffz(sir)) < p->siops) { 

while(((flag_ccb = readl(&reg->outbound_queueport)) != 0xFFFFFFFF) 

while(count){ 

while(count){ 

while(1){ 

while(!list_empty(&(dev->queues->queue[HostNormCmdQueue].cmdq))) { 

while(time_before(jiffies, start+30*HZ)) 

while(aac_consumer_get(dev, q, &entry)) 

while(entry != &dev->fib_list) { 

while(aac_consumer_get(dev, q, &entry)) 

while(d) { 

while(m == EMPTY_QUEUE); 

while(*status == 0){ 

while(sg_index) { 

while((volatile u32) pHba->state & DPTI_STATE_RESET ) 

while( readl(pHba->irq_mask) & I2O_INTERRUPT_PENDING_B) { 

while(did_work); 

while(pDev) { 

while(pDev) { 

while(m == EMPTY_QUEUE){ 

while(m == EMPTY_QUEUE); 

while(m==EMPTY_QUEUE); 

while(status_block[87]!=0xff){ 

while(pHba->hrt == NULL); 

while( ((int)readb(&dp6m_ptr->i960r.sema0_reg) ) & 3 ) 

while(pos != NULL && (next = strchr(pos, ':')) != NULL) { 

while() loops	* 

while(0) 

while( bval & 0x1f ) 

while( n-- > 0) 

while(time_before(jiffies, end)) 

while( pdcb != pDCB ); 

while( pdcb != pDCB ); 

while(0) 

while(0) 

while(i--) { 

while(i--) { 

while(i--) { 

while(i--) { 

while(i--) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(ptr) { 

while(MSGO_I<MSGOLEN) { 

while(CMD_I<CURRENT_SC->cmd_len) { 

while(TESTLO(DMASTAT, INTSTAT) || TESTLO(DMASTAT, DFIFOEMP) || TESTLO(SSTAT2, SEMPTY)) { 

while(TESTLO(DMASTAT, DFIFOFULL|INTSTAT) && time_before(jiffies,the_time)) 

while(TESTLO(SSTAT2, SEMPTY) && time_before(jiffies,the_time)) 

while(fifodata>0 && CURRENT_SC->SCp.this_residual>0) { 

while(fifodata>0) { 

while(TESTLO(DMASTAT, INTSTAT) && CURRENT_SC->SCp.this_residual>0) { 

while(TESTLO(DMASTAT, DFIFOEMP|INTSTAT) && time_before(jiffies,the_time)) 

while(data_count>0) { 

while(ptr) { 

while(pending); 

while(0) 

while(0) 

while(in_8(&mr->fifo_count)) 

while(ms->phase != idle) { 

while(RD_HARPOON(port+hp_scsisig) & SCSI_REQ){}\ 

while(RD_HARPOON(port+hp_scsisig) & SCSI_REQ){}\ 

while(0) 

while(mbox->busy && (i < max_mbox_busy_wait)); 

while(1); 

while(pos != NULL && (next = strchr(pos, ':')) != NULL) { 

while(1) */ 

while(1) { 

while(0) 

while( mbox->m_in.busy && (i < max_mbox_busy_wait) ); 

while((volatile u8)mbox->m_in.numstatus == 0xFF) 

while( (volatile u8)mbox->m_in.poll != 0x77 ) 

while(RDINDOOR(adapter) & 0x2) 

while((nstatus = (volatile u8)adapter->mbox->m_in.numstatus) 

while(1); 

while((nstatus = (volatile u8)adapter->mbox->m_in.numstatus) 

while( RDINDOOR(adapter) & 0x02 ) 

while(1); 

while((arbit & (ARBIT_WIN | ARBIT_FAIL)) == 0 && 

while(time_out-- != 0); 

while(tmp != 0) { 

while(qlink->next) 

while(qlink->next != qpti) 

while(size--) 

while(redir[page] != 0xFF) { 

while(loops>0) { 

while(loops>0) { 

while(loops>0) { 

while(loops>0) { 

while(1) { 

while(!(SPORT_GET_STAT(up) & TXF) && !uart_circ_empty(xmit)) { 

while((serial_in(up, UART_LSR) & UART_EMPTY) != UART_EMPTY); 

while(!cpm_uart_tx_empty(port)) { 

while(0) 

while(--count > 0); 

while(1) { 

while(UART_GET_FIFO_CNT(&mux_ports[0].port)) 

while(count--) { 

while(0) 

while() loop will get ALL chars out of Rx FIFO  

while((rx = uart->urx.w) & URX_DATA_READY); 

while((c=*(p++)) != 0) { 

while(info->xmit_cnt) { 

while((readl(&port->ip_serial_regs-> sscr) 

while((readl(&port->ip_serial_regs->sscr) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(!((lsr = custom.serdatr) & SDR_TSRE)) { 

while( info ) { 

while((action = bh_action(info)) != 0) { 

while( rx_get_frame(info) ); 

while((status = read_reg(info,CST0)) & BIT0) 

while( current_dev->next_device ) 

while(info) { 

while(info) { 

while( info->tx_count && (read_reg(info,SR0) & BIT1) ) { 

while(!done) { 

while(copy_count) { 

while( timeout-- && !info->irq_occurred ) { 

while(count) { 

while(count) { 

while(info && info->line != line) 

while( info ) { 

while(desc_complete(bufs[end])) { 

while((action = bh_action(info))) { 

while(rx_get_frame(info)); 

while(rx_get_buf(info)); 

while((gsr = rd_reg32(info, GSR) & 0xffffff00)) { 

while(current_dev->next_device) 

while(info) { 

while(info) { 

while(count == 0 || count == -EAGAIN); 

while(count == 0); 

while(!done) { 

while(temp_open_count) { 

while(copy_count) { 

while(timeout-- && !info->irq_occurred) 

while((action = mgsl_bh_action(info)) != 0) { 

while(get_rx_frame(info)); 

while( (Fifocount = (usc_InReg(info,RICR) >> 8)) ) { 

while(0); 

while( info ) { 

while( current_dev->next_device ) 

while(info) { 

while( !buffer_list[end_index].count ) 

while( start_index != end_index ); 

while( (Fifocount = usc_InReg(info, TICR) >> 8) && info->xmit_cnt ) { 

while( !Done ) { 

while( !info->rx_buffer_list[EndIndex].status ) { 

while(copy_count) { 

while( BufferSize ){ 

while( EndTime-- && !info->irq_occurred ) { 

while(count) { 

while(res_ptr < res_end) 

while(unlikely(size > 0)); 

while(--nents > 0) { 

while(card->next) { 

while(byte_cnt > chain_size) { 

while(byte_cnt > 0) { 

while(size > 0) { 

while(sg_dma_len(sglist) && nents--) { 

while(0) 

while(0) 

while(count) 

while(count) 

while(count) 

while(count > 1) 

while(count) 

while(count > 3) 

while(count) 

while(count--) 

while(count) 

while(count) 

while(count > 1) 

while(count) 

while(count > 3) 

while(count) 

while(i < num) { 

while(!list_empty(&blkif->persistent_purge_list)) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(c && c != h->reqQ) { 

while(c && c != h->cmpQ) { 

while(i<8 && eisa[i]) { 

while((c = h->reqQ) != NULL) { 

while((a = h->access.command_completed(h))) { 

while(c->busaddr != a) { 

while(c->type != CMD_IOCTL_DONE) 

while(test_and_set_bit(i&(BITS_PER_LONG-1), h->cmd_pool_bits+(i/BITS_PER_LONG)) != 0); 

while(0) 

while(0) 

while(0) 

while(addr != addr2); 

while( st_mfp.par_dt_reg & 0x20 ) 

while(1) { 

while(0) 

while(pd->bio_queue_size > pd->write_congestion_off); 

while((gpio & 0x02) == 0); 

while(!time_after(jiffies, timeout)) { 

while(!time_after(jiffies, timeout)) { 

while(tail) { 

while(na--) 

while((!rc) && (bss.index != cpu_to_le16(0xffff))) { 

while(1) { 

while(lastindex != wkr.kindex); 

while( line[0] ) { 

while((v = get_dec_u16(line, &i, 3))!=-1) { 

while( line[0] && line[0] != '\n' ) line++; 

while((lastindex != wkr.kindex) && (j < 180-30)); 

while(rc == 0 && BSSList_rid.index != cpu_to_le16(0xffff)) { 

while(!list_empty(&airo_devices)) { 

while(dwelltime > 0); 

while(skb) { 

while(0) 

while(skb); 

while(0) 

while(data[i]) { 

while(cnt++ < 100 && (rval & MCS_IRINTX)); 

while(!delay); 

while(!(inb(iobase+UART_LSR) & UART_LSR_TEMT)) 

while(i--) { 

while(i--) { 

while(i--){ 

while(there are packets) loop */ 

while(0) 

while(offset_len--) { 

while(i > 0) { /* free any that were allocated successfully */ 

while(i > 0) { /* free any that were mapped successfully */ 

while((status = SONIC_READ(SONIC_ISR) & SONIC_IMR_DEFAULT)); 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while((stat=p->scb->cus & STAT_MASK)) 

while(!((rstat=swab16(rbd->status)) & RBD_LAST)) 

while(0) 

while(0) 

while(0) 

while(cleared != ready) { 

while((idev = pnp_find_dev(NULL, 

while(unlikely(typhoon_num_free_tx(txRing) < (numDesc + 2))) 

while(section_len) { 

while(lastRead != le32_to_cpu(*index)) { 

while(rxaddr != local_ready && budget > 0) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while((np = of_find_all_nodes(np)) != NULL) { 

while( (readreg(dev, PP_SelfST) & INIT_DONE) == 0 && jiffies - reset_start_time < 2) 

while(db->tx_packet_cnt) { 

while(db->rx_avail_cnt) { 

while(db->rx_avail_cnt < RX_DESC_CNT) { 

while(db->tx_packet_cnt) { 

while(db->rx_avail_cnt) { 

while(db->rx_avail_cnt < RX_DESC_CNT) { 

while( 0 ) 

while( 0 ) 

while( old_tx != lp->new_tx) { 

while( (MEM->rx_head[entry].flag & RMD1_OWN) == RMD1_OWN_HOST ) { 

while( len-- ) { 

while(0) 

while( lp->cur_tx >= TX_RING_SIZE && lp->dirty_tx >= TX_RING_SIZE ) { 

while( ((csr0 = DREG) & (CSR0_ERR | CSR0_TINT | CSR0_RINT)) && 

while( dirty_tx < lp->cur_tx) { 

while( (MEM->rx_head[entry].flag & RMD1_OWN) == RMD1_OWN_HOST ) { 

while(1) { 

while(intr0 & RINT0); 

while(1) { 

while(--bcnt) { 

while(p->xmit_queued) 

while(!( (rmdstat = rmdp->u.s.status) & RCV_OWN)) 

while(time_before(jiffies, timeout)) { 

while(time_before(jiffies, timeout)) { 

while(time_before(jiffies, timeout)) { 

while(timeout++ < 5 && (inb(ioaddr+TANG_CARD_STATUS)&TANG_TX_READY)==0) 

while((tmp = *r) != NULL) 

while(++i<65536) 

while(length--) 

while((inb(ioaddr+DAYNA_CARD_STATUS)&DAYNA_TX_READY)==0) 

while(inb(ioaddr+TANG_CARD_STATUS)&TANG_RX_READY) 

while(lp->node_acquire==0)	/* Get *True* nodeid finally. */ 

while((++boguscount < 20) && (status&(TANG_RX_READY|TANG_TX_READY))); 

while(++boguscount < 20); 

while((++boguscount < 20) && (status&(TANG_RX_READY|TANG_TX_READY))); 

while(++boguscount<1000000) 

while(pkt_len--)        /* Discard packet */ 

while((inb(ioaddr+DAYNA_CARD_STATUS)&DAYNA_TX_READY)==0) 

while((inb(ioaddr+TANG_CARD_STATUS)&TANG_TX_READY)==0) 

while((inb(ioaddr+DAYNA_CARD_STATUS)&DAYNA_TX_READY)==0); 

while((stat = sca_intr_status(card)) != 0) { 

while(0) 

while(*hw++ == ':'); 

while(1) 

while(len) 

while(len) 

while(c->txcount) { 

while(len) 

while(++work<5000) 

while( (pdev = pci_get_class( PCI_CLASS_NETWORK_OTHER << 8, pdev )) 

while( repeat ); 

while(*rtable!=255) 

while( tail_len-- ) 

while(c->txcount && (read_zsreg(c,R0)&Tx_BUF_EMP)) 

while( nl->link )	/* it's master device! */ 

while( num < SBNI_MAX_NUM_CARDS ) { 

while( len-- ) 

while( n >= 0 ) { \ 

while(0) 

while( (LMC_CSR_READ(sc, csr_gp) & LMC_GEP_INIT) == 0 && 

while( (LMC_CSR_READ(sc, csr_gp) & LMC_GEP_INIT) == 0 && 

while(iLen > 0)  

while(time_before(jiffies, j+10)) 

while(time_before(jiffies, j)) 

while((stat = readl(card->plx + PLX_DOORBELL_FROM_CARD)) != 0) { 

while(1) { 

while(*hw++ == ':'); 

while(!ready){ 

while(index != rxlimit); 

while(0) 

while(0) 

while() */ 

while(0) 

while(!endit) { 

while(1) { 

while(*stack) 

while(true) { 

while((bio = bio_list_pop(&bio_list_on_stack))) 

while(next != NULL) 

while(isspace(start[length - 1])) 

while(new !=(irnet_socket *) NULL) 

while(new !=(irnet_socket *) NULL) 

while(self != NULL) 

while((lsap_todo--) && 

while(*name) { 

while(hash < cd->hash_size && 

while(1) { 

while(s->count) { 

while(--i >= 0) 

while(0) 

while(0) 

while(0) 

while(1) { 

while(d >= dc) 

while(i >= dc - dbuf) 

while(i >= 0) 

while(nhlen >= (int)sizeof(struct rtnexthop)) { 

while(check_port(cpu_to_le16(++port)) != 0) { 

while(sent < size) { 

while((f = *fp) != NULL) { 

while(*pos && (sk = dn_socket_get_next(seq, sk))) 

while(tmp) { 

while(*str && !ISNUM(*str)) str++; 

while(*pos && (rt = dn_rt_cache_get_next(seq, rt))) 

while(order && ((((1UL << order) * PAGE_SIZE) / 

while(dn_rt_hash_mask & (dn_rt_hash_mask - 1)) 

while(0) 

while(!mutex_trylock(&pool->flush_lock)) { 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(0) 

while(left > 0)	{ 

while(cur < end && cur->nd_opt_type != type); 

while(cur < end && !ndisc_is_useropt(cur)); 

while((skb = skb_dequeue(&c->mfc_un.unres.unresolved)) != NULL) { 

while((skb = __skb_dequeue(&uc->mfc_un.unres.unresolved))) { 

end! : thread num : 1 : 9213 
end! : thread num : 0 : 9241 
end! : thread num : 0 : 9344 
end! : thread num : 2 : 9062 
