
1. nvmain 다운로드.
위키에서 공식적인 다운로드 파일을 제동하지 않기 때문에.
동우형님께 제공받은 파일(nvmain.tar.gz)을 사용 한다.

2. 설치.
nvmain.tar.gz의 압축을 풀고 디렉토리에 들어가서
SCons로 설치를 한다.

그냥, JUST "scons"라고 입력하면 make파일을 통해서 make 되는 것 처럼
커널컴파일처럼 설치(빌드)가 된다.

3. 실행.
다음 명령어를 실행하면 nvmain이 실행된다.

./nvmain.fast Config/PCM_MLC_example.config Tests/Traces/hello_world.nvt 1000000

3-1. 예외!
arg0 : 확장자 fast의 유무가 상이할 수 있다.
arg1 : .config 파일의 경로나 파일명이 상이할 수 있다.
arg2 : .nvt파일의 경로나 파일명이 상이할 수 있다.
따라서, 해당 경로에 해당 파일이 없으면 적절한 확장자로 검색해서 대체한다.

3-2. 실행 결과
채널, 랭크, 뱅크 같은 결과와 적절한 숫자가 나온다면 성공 한 것이다.
적절한 숫자가 중요하다. 모두 0이 나오거나 규칙적(?)이면 실패한 것!

잘 실행되었다면 그 결과를 리다이렉션으로 적절히 파일로 뺀다.
에러 출력 없이 깔끔하게 된다면 성공 한 것이다.

리다이렉션 한 파일을 열어서 보면...

NVMain command line is:.... 으로 시작하고

중간에 Warning이 뜰 수 있는데, 실행은 잘 되기 때문에... 생략한다.

아래 결과가 맨 마지막에 출력된다.
Exiting at cycle 5000000 because simCycles 5000000 reached.

4. 파일 수정.

nvmain을 실행하면 나오는 맨 처음 메세지인
NVMain command line is: 앞에 메세지를 추가로 나오도록 간한히 수정 할 것이다.

제약 사항은 다음과 같다.
a. 새로운 디렉토리에 있는 새로운 .cpp 파일을 추가한다.
b. 추가된 코드파일의 함수를 활용해 원본 nvmain을 수정 한다.

맨 처음 출력되는 스트링이 있는 파일은 traceSim/traceMain.cpp 파일의
100번째 라인이다. cpp 파일이고, cout으로 출력한다.

4-1. 새로운 디렉터리의 새로운 소스파일 생성
상기 a의 파일을 생성하기 위해 dkdk라는 디렉토리에 dk_print.h를 생성한다.

mkdir dkdk
touch dkdk/dk_print.h
vim dkdk/dk_print.h

다음 코드를 작성하고 저장한다.

#include <iostream>
int dk_print(char *str)
{
  std::cout << "[ OK ] Add code by dkdk" << std::endl;
  std::cout << "====================" << std::endl;
  std::cout << str << std::endl;
  std::cout << "====================" << std::endl;

  return 0;
}

위 함수는 cpp로 작성되었고 iostream을 인크루드 한다.
char 문자열을 받아서 cout으로 출력하는 간단한 함수이다.

4-2. 기존 소스코드에 새로운 작업 추가.

traceSim/traceMain.cpp 파일에서 100번째 라인으로 가서
새로 만든 디렉터리와 헤더파일을 추가하고 100번째 라인 전후로
헤더파일에 있는 함수를 호출한다.

57라인  : #include "dkdk/dk_print.h"
102라인 : dk_print((char *)"JUN-HYUNG");

5. 빌드
특별한 설정파일의 변화 없이 그냥 scons 명령어를 사용하면
빌드되어서 nvmain이 실행 할 때 추가로 메세지가 더 나온다.

6. scons의 구조

최상위 경로에 있는 SConstruct파일중에 중요한 두 함수이다.

def NVMainSource(src):
  src_list.append(File(src))
  Export('NVMainSource')

def NVMainSourceType(build_dir, src_type):
  source_types[build_dir] = src_type
  Export('NVMainSourceType')

위의 NVMainSource은 SConscripts 계층에서 사용하는 함수를 정의
아래 NVMainSourceType는 SConscripts뿐만 아니라 구성 요소 유형을 추가 할 수 있다.
두 함수의 차이점은 확인되지 않았으나. 소스를 추가 하는 듯하다.



# Assume that this is a gem5 extras build if this is set.
if 'TARGET_ISA' in env and env['TARGET_ISA'] == 'no':
    Return()

if 'NVMAIN_BUILD' in env:
    NVMainSourceType('src', 'Backend Source')


NVMainSource('LH-Cache.cpp')










ource_types = {
  'MemControl'   : "Memory Controller",
  'FaultModels'  : "Hard-Error Model",
  'NVM'          : "Source",
  'SimInterface' : "Simulation Interface",
  'Utils'        : "Utility Feature",
  'include'      : "Include",
  'src'          : "Source",
  'traceReader'  : "Trace Reader",
  'traceSim'     : "Trace main()",
  'dkdk'         : "MY type",
  prog_name      : "Program"
}

